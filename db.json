{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.png","path":"favicon.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"1533fd65f74b1ef555eb1963554acd81646db80c","modified":1492049981290},{"_id":"source/favicon.png","hash":"d67c4be2feb621b601ca0a00753882b1fa274c37","modified":1492056430770},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1503380241164},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1503380241167},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1503380241172},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1503380241191},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1503380241194},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1503380241198},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1503380241202},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1503380241205},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1503380241209},{"_id":"themes/next/README.en.md","hash":"fd7a00ae9026fb4f87dd7eed9ce049d0db447140","modified":1503380241212},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1503380241216},{"_id":"themes/next/_config.yml","hash":"fd2bbb8250b1ad0c3f0da1b70f505993b66642b5","modified":1503384412770},{"_id":"themes/next/bower.json","hash":"63c38f50fb54b25bf5101f566189f9e5b3a6ef0e","modified":1503380241224},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1503380241228},{"_id":"themes/next/package.json","hash":"85a77bafb3d1e958b82e52528b7a95fcd59efda9","modified":1503380241568},{"_id":"source/categories/index.md","hash":"3a9f254a0f47590aa1359b09c898eb16ddae7171","modified":1503382050472},{"_id":"source/tags/index.md","hash":"9244890dc8993674280432718a73fcd5a1ab62c6","modified":1503382023488},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1503380241233},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1503380241239},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1503380241237},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1503380241243},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1503380241247},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1503380241254},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1503380241251},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1503380241259},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1503380241263},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1503380241267},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1503380241270},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1503380241277},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1503380241274},{"_id":"themes/next/layout/_layout.swig","hash":"b88585f9e1b7071f6670b20b77b656edd087ccc9","modified":1503380241291},{"_id":"themes/next/layout/archive.swig","hash":"c2be7c95af6205c7501a261f2fc9702c57107f89","modified":1503380241539},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1503380241545},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1503380241549},{"_id":"themes/next/layout/page.swig","hash":"dbff0302b4bfabb51556a197bf65190eb30361f0","modified":1503380241553},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1503380241557},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1503380241561},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1503380241564},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1503380241573},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1503380241577},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1503380242584},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1503380242589},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1503380242593},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503380242070},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1503380241283},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1503380241287},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1503380241297},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0f59a51b5cea3e8a7c078db486626cddc2978622","modified":1503380241302},{"_id":"themes/next/layout/_macro/post.swig","hash":"b6b86a199f5a3692ec492123fe8cb53a8ca08169","modified":1503380241306},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5b1e91c2f6f88fbecd426cd0727e7b7854c6cc1d","modified":1503380241309},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"2e7ec3dfd45ab57ab3c36fa252b06fbef0db6398","modified":1503382202374},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1503380241316},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a229b569743555215a4f2561997ad496d81e938","modified":1503380241320},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1503380241325},{"_id":"themes/next/layout/_partials/head.swig","hash":"476e6c2452732c2741f518004d336bc348e710d7","modified":1503380241328},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1503380241339},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1503380241343},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1503380241347},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1503380241351},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1503380241385},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1503380241389},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1503380241414},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1503380241491},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1503380241496},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1503380241500},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1503380241503},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1503380241510},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1503380241507},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1503380241582},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1503380241586},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1503380241589},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1503380241592},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1503380241597},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1503380241601},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1503380241604},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1503380241608},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1503380241611},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1503380242066},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1503380242075},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1503380242080},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1503380242083},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1503380242088},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1503380242092},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1503380242096},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1503380242099},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1503380242104},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1503380242108},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503380242112},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503380242116},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1503380242119},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1503380242125},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1503380242129},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503380241400},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503380241403},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503380241926},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503380241922},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503380241936},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503380242053},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503380242063},{"_id":"themes/next/source/images/avatar.png","hash":"5811c3e9286afa5821274f837c884ad19ec10ec1","modified":1492067210265},{"_id":"source/_posts/2017/04/angular-rootScope-new.md","hash":"c90d113242d5a36c78067ac951393d7179c9dcde","modified":1494841632761},{"_id":"source/_posts/2017/04/angular权威指南学习.md","hash":"3337dcdab1bb9fbffd3c2a694a8c2fa6a843b566","modified":1494841632776},{"_id":"source/_posts/2017/04/currentTarget.md","hash":"62c6975e7ac323720a0e429d845340725fb82eda","modified":1494841632790},{"_id":"source/_posts/2017/04/es6版promise.md","hash":"6df865f02b7b8285050538b0dbb774b01a5bc869","modified":1503380852921},{"_id":"source/_posts/2017/04/java-ssm.md","hash":"a7dc75e4844261141dd50e8ab4f3e6d3dced769d","modified":1503384118601},{"_id":"source/_posts/2017/04/java用jdbc-servelet时的问题.md","hash":"c57a9a42e414690b2e6023a150402902a9bf7a81","modified":1494841632817},{"_id":"source/_posts/2017/04/react-native进入姿势.md","hash":"00b7b6ec9d40851b3c9c1b1af75e6111f09c3a4f","modified":1503384714872},{"_id":"source/_posts/2017/04/vue-cli创建的任务和后台交互cookie及restAPI处理.md","hash":"3f3180a2f2421d2aa1252424d999d67157670742","modified":1494841632837},{"_id":"source/_posts/2017/04/学习计划.md","hash":"f41943b4fe1fd67d91b86459bb8fec1fcec05841","modified":1492590848659},{"_id":"source/_posts/2017/04/所谓publish-subscribe.md","hash":"9538eba1f6d576d390fe161415b0318ae230a28c","modified":1494841632842},{"_id":"source/_posts/2017/07/jsDemo.md","hash":"e9934ed31719b1f8d006ae3479ab196f2de48831","modified":1502957096965},{"_id":"source/_posts/2017/05/angular2-约定优于配置.md","hash":"bde6742036a84ef9d8e3c2c441543c8895be8e85","modified":1494842023969},{"_id":"source/_posts/2017/06/简单的代码，了解观察者模式和Promise.md","hash":"a0d8158b60b4d4b4c933b4c408fcbfd003e2e21e","modified":1502957096954},{"_id":"source/_posts/2017/08/js设计模式笔记-享元模式.md","hash":"5966977eb63c199ea3b8a4e9ab1734c602ca0c55","modified":1503380739288},{"_id":"source/_posts/2017/08/js设计模式笔记-代理模式.md","hash":"7f564ec591bf3182987ab41243fd21f0df66e4a4","modified":1503383226721},{"_id":"source/_posts/2017/08/js设计模式笔记-单例模式.md","hash":"b11b3ce46abe45a6f4aca0c33af4fbb002c0670a","modified":1503380745640},{"_id":"source/_posts/2017/08/js设计模式笔记-原型模式.md","hash":"d31e4b5e7a2c4935a05b99b7c2d4fe7d9cad5d6f","modified":1503041918977},{"_id":"source/_posts/2017/08/js设计模式笔记-外观模式.md","hash":"14411ef5915080e54e587b2cb6297f042fa79319","modified":1503380773903},{"_id":"source/_posts/2017/08/js设计模式笔记-工厂模式.md","hash":"93c2d32f49cc49037401b82eee8b5c8f1044544f","modified":1503380773955},{"_id":"source/_posts/2017/08/js设计模式笔记-建造者模式.md","hash":"d4749d222ba8698820c58053e62cb3b02603d3e9","modified":1503380773874},{"_id":"source/_posts/2017/08/js设计模式笔记-抽象工厂模式.md","hash":"c7bae9ad4afac09633ed1c7fee185d230654fac8","modified":1503380773921},{"_id":"source/_posts/2017/08/js设计模式笔记-桥接模式.md","hash":"939c69f7eb955461521890c4cbc57027463cf00d","modified":1503380773889},{"_id":"source/_posts/2017/08/js设计模式笔记-模板方法模式.md","hash":"d28d5f1157abb9f5a1dd34b220b04cfd18a85687","modified":1503396607207},{"_id":"source/_posts/2017/08/js设计模式笔记-状态模式.md","hash":"98784e17e35859e322393a6a8090b6c9e03d4c2f","modified":1503396778016},{"_id":"source/_posts/2017/08/js设计模式笔记-策略模式.md","hash":"321c52f39d139d852e1a30b7c361ca4f0a3cf58e","modified":1503397039367},{"_id":"source/_posts/2017/08/js设计模式笔记-简介.md","hash":"f5edd4f4278ce071b065548b2297b71abea8be6a","modified":1503380773938},{"_id":"source/_posts/2017/08/js设计模式笔记-组合模式.md","hash":"97384fe502c502e8c7b741b346fdb49bfb939cee","modified":1503380630738},{"_id":"source/_posts/2017/08/js设计模式笔记-装饰者模式.md","hash":"f41e638ab207dd896452c5e4174b8484d3cbe3a8","modified":1503380711094},{"_id":"source/_posts/2017/08/js设计模式笔记-观察者模式.md","hash":"6de05db7490e2c39e2e414210012f20ec4e6e7c7","modified":1503396699549},{"_id":"source/_posts/2017/08/js设计模式笔记-适配器模式.md","hash":"9820be74b52a0f216e54878cff7ed44d214966b1","modified":1503042174616},{"_id":"source/_posts/2017/08/js设计模式笔记-面向对象.md","hash":"34bf0bdc12223c95bc200dc0f8fdbf791195bcdf","modified":1503380730150},{"_id":"source/_posts/2017/08/说说HTTP缓存.md","hash":"76267dec4c9c37df7a3769c2339a5aafe306784a","modified":1503034726199},{"_id":"source/_posts/2017/08/读书整理.md","hash":"d2b1c8b77b2174651607ed90092d669f49943a5e","modified":1502958663612},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1503380241337},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1503380241333},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1503380241355},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1503380241360},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1503380241363},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1503380241368},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1503380241372},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1503380241376},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1503380241380},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1503380241394},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1503380241398},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1503380241409},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1503380241422},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1503380241428},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1503380241432},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1503380241435},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1503380241439},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1503380241443},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1503380241446},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1503380241450},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1503380241453},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1503380241457},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1503380241460},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1503380241464},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1503380241469},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1503380241473},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1503380241477},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"be2aaeb8f05979e2ba501248480d5294256d61f2","modified":1503380241481},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1503380241485},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1503380241489},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1503380241524},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1503380241527},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1503380241532},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1503380241537},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1503380241914},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1503380241919},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"bf009e85212749405c27d89b49f401911355ecc7","modified":1503380241931},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1503380241934},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"2a4e844dec690365774c2f6e8984706fee39ea63","modified":1503380242045},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1503380242050},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"89f88b9c9a191dd980f799fc36b83b63290d3ac9","modified":1503380242057},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a627633d3bb70b8501572b18037def478beb7017","modified":1503380242061},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1503380242138},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6984ec7d9fd753141550fe87f0eecbe5df361e3b","modified":1503383105441},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1503380242143},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1503380242151},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1503380242154},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1503380242159},{"_id":"themes/next/source/js/src/motion.js","hash":"dda8c76fce91d7f140c06de2583ba806810f12c2","modified":1503380242165},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1503380242169},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"526a97e60f90a03d920231b3d1c1c418800610cc","modified":1503397229673},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1503380242182},{"_id":"themes/next/source/js/src/utils.js","hash":"f90c7611dc665b5e321cb81c0bd689445bab438a","modified":1503380242185},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1503380242230},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1503380242241},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1503380242246},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1503380242250},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1503380242255},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1503380242328},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1503380242333},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1503380242337},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1503380242342},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1503380242355},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1503380242360},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1503380242363},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1503380242368},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1503380242372},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1503380242431},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1503380242440},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1503380242444},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1503380242448},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1503380242452},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1503380242456},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1503380242460},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1503380242464},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1503380242468},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1503380242473},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1503380242477},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1503380242481},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1503380242486},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1503380242490},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1503380242494},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1503380242498},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1503380242502},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1503380242506},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1503380242511},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1503380242514},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1503380242519},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1503380242525},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1503380242530},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1503380242535},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1503380242559},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1503380242563},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1503380242573},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1503380242576},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1503380242580},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1503380242435},{"_id":"source/_posts/2017/04/java-ssm/2.png","hash":"d4f1a8ab49b39a9d545bc4602fc7df3da82e73a9","modified":1491026261612},{"_id":"source/_posts/2017/04/java-ssm/3.png","hash":"ea2ffedd4e90499d7d04c35dd51bab286a09384f","modified":1491558215160},{"_id":"source/_posts/2017/04/java-ssm/4.png","hash":"c0edf633d13647c58505e34a6d07a580fa16c191","modified":1491558259886},{"_id":"source/_posts/2017/04/java-ssm/5.png","hash":"e7ad6205ac081db9eff107c473ae624bb6455066","modified":1491558277864},{"_id":"source/_posts/2017/04/java-ssm/vue_admin.sql","hash":"6f5c032a12ac4e8cf476245458f3ce5edef78a0e","modified":1491554194128},{"_id":"source/_posts/2017/04/react-native进入姿势/android_home.jpg","hash":"02c602230f05459012852ac4e9246a0f2a678724","modified":1492999859511},{"_id":"source/_posts/2017/04/react-native进入姿势/androids.jpg","hash":"bd16273b6779fd21edb9950fbeb300a2d60fc1d4","modified":1492999859519},{"_id":"source/_posts/2017/04/react-native进入姿势/avd.jpg","hash":"703932588892a1106dd4a49fafa51b04417e17eb","modified":1492999859528},{"_id":"source/_posts/2017/04/react-native进入姿势/bigSuccess.jpg","hash":"214f160249b72b167f12c270a6e252ef560d9aee","modified":1493006243651},{"_id":"source/_posts/2017/04/react-native进入姿势/dev.jpg","hash":"fe80e50f459c3fd8f6115c51ad5d6488fd97d1f2","modified":1493002328857},{"_id":"source/_posts/2017/04/react-native进入姿势/devSuccess.jpg","hash":"927b89dbc14e03db051301be427345d932074747","modified":1493002616428},{"_id":"source/_posts/2017/04/react-native进入姿势/directory.jpg","hash":"0f5b27633fbf246666c7a8a48774f218822fa700","modified":1492999859544},{"_id":"source/_posts/2017/04/react-native进入姿势/err.jpg","hash":"ac55d8d73b695e5d9ae9cc4b32503431016bc62e","modified":1492999859551},{"_id":"source/_posts/2017/04/react-native进入姿势/host.jpg","hash":"665a525df62b01c1b687ddc02dc48fa4fe9952c0","modified":1493002457379},{"_id":"source/_posts/2017/04/react-native进入姿势/init.gradle","hash":"3a2a983667380f44591e5b45f194e61ee2edecc4","modified":1492999859565},{"_id":"source/_posts/2017/04/react-native进入姿势/reload.jpg","hash":"a0b2846c342b37f8b5309b97de382efc1e9f74f0","modified":1493002541325},{"_id":"source/_posts/2017/04/react-native进入姿势/sdk.png","hash":"9c038793e927a1e277876d62737474ee30fdd474","modified":1493000777880},{"_id":"source/_posts/2017/04/react-native进入姿势/snap3555.jpg","hash":"09165ad61e411491e7177b7a1dc80cdf3fef2dac","modified":1492999859572},{"_id":"source/_posts/2017/04/react-native进入姿势/success.jpg","hash":"b721df0d0031b3fd0924ef355678c492242b2ee0","modified":1492999859587},{"_id":"source/_posts/2017/04/react-native进入姿势/tools.jpg","hash":"ddd968eacb4cc09a8773db8b48b1b8c252d0d241","modified":1492999859594},{"_id":"source/_posts/2017/04/react-native进入姿势/verr.jpg","hash":"c656ccd38ce2e758b511a1db44e1b750140b8ecc","modified":1492999859603},{"_id":"source/_posts/2017/04/react-native进入姿势/wox.jpg","hash":"db4d2161f5bebb9001847c9eae6a4323c66957ab","modified":1492999859609},{"_id":"source/_posts/2017/04/vue-cli创建的任务和后台交互cookie及restAPI处理/chrome下cookie.png","hash":"aae80c3ba9c633514aa76c06ea2a9a133f1d0d53","modified":1492498624193},{"_id":"source/_posts/2017/08/说说HTTP缓存/disk.png","hash":"03b34a426eaccd0df9cdcd4c0956d3384761ddcc","modified":1503026046317},{"_id":"source/_posts/2017/08/说说HTTP缓存/github.png","hash":"f68640017e7ea8db378f23761a047cbddf2a5d7b","modified":1503021017073},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1503380241516},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1503380241520},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b0e2a0e27a32f72cb283fe4b33d010d485113379","modified":1503380241621},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1503380241627},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1503380241631},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1503380241635},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1503380241639},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1503380241700},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1503380241810},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1503380241883},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"eec22651977ea25b5e65e8cb1b4906eef69ec588","modified":1503380241888},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1503380241893},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a45ed506274f655b11995c408cc566b16dada79","modified":1503380241897},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1503380241901},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1503380241905},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1503380241909},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a509016ac0227a1903d7f0ca3a825cf9ac7fde33","modified":1503380241943},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1503380241948},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1503380241953},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1503380241957},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1503380241961},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1503380241965},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1503380241970},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1503380241973},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1503380241988},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1503380241993},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1503380241997},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1503380242001},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1503380242005},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1503380242015},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1503380242020},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1503380242024},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1503380242028},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1503380242033},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1503380242039},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1503380242173},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1503380242212},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1503380242220},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1503380242225},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1503380242260},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1503380242269},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1503380242274},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1503380242265},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1503380242277},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1503380242281},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1503380242313},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1503380242318},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1503380242322},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1503380242346},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1503380242351},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1503380242377},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1503380242382},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1503380242386},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1503380242549},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1503380242553},{"_id":"source/_posts/2017/04/java-ssm/1.png","hash":"2a9a86a509ca8408742c8fb96ed413d7a274f2f4","modified":1491026164014},{"_id":"source/_posts/2017/04/react-native进入姿势/configerr.jpg","hash":"d08820b1ef81a6e345f48eb0e263761b929249f6","modified":1492999859536},{"_id":"source/_posts/2017/04/react-native进入姿势/gen.jpg","hash":"cbad7d84feda78aabf14f6fe5e1380a61ae927e1","modified":1492999859559},{"_id":"source/_posts/2017/04/react-native进入姿势/netErr.jpg","hash":"64ed9702db921dd52a2c3e8effa4cfc6bbbf92d0","modified":1493002141039},{"_id":"source/_posts/2017/04/react-native进入姿势/snap3556.jpg","hash":"055b1d875370f4f8d382b8de97839493d73e918b","modified":1492999859580},{"_id":"source/_posts/2017/08/说说HTTP缓存/cache-control.png","hash":"e9866b54d4768300b874e545b0d9a49ecfb64eec","modified":1503026740481},{"_id":"source/_posts/2017/08/说说HTTP缓存/githubRequest.png","hash":"42a94c3d5362510b7d738e0542b2e964c0a8b38e","modified":1503021269061},{"_id":"source/_posts/2017/08/说说HTTP缓存/liucheng.png","hash":"1143ee3a2f14b583e88345c1ab81e7f79f66f045","modified":1503026692654},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1503380242216},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1503380242421},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1503380242426},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1503380242568},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1503380241644},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1503380241649},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1503380241653},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1503380241657},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1503380241664},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1503380241660},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1503380241668},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1503380241673},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1503380241676},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1503380241682},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1503380241686},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1503380241690},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1503380241694},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1503380241697},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1503380241705},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1503380241710},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1503380241715},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1503380241718},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1503380241721},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1503380241725},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"658accf8e196721f295003da66941e6d1f7b81b0","modified":1503380241729},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1503380241733},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"f363a544aa800a2a5ed97c40887fe9743f67b03b","modified":1503380241737},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1503380241745},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1503380241741},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1503380241748},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1503380241752},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1503380241756},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"268c9704481fdb0b4d1e646196386143990fe235","modified":1503380241762},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"efc65bba7f2423439e9bca7d32ef7728c21e5c97","modified":1503380241766},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"5f3510419161ec22ca88cce6a181ddad61de9e86","modified":1503380241770},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1503380241774},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1503380241778},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1503380241781},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1503380241785},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1503380241791},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1503380241794},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1503380241798},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1503380241802},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1503380241806},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1503380241814},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1503380241818},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1503380241821},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1503380241826},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1503380241829},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"962b654f8f7cbd18a298126a403d236ed4540516","modified":1503380241834},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1503380241838},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1503380241842},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1503380241846},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1503380241850},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1503380241854},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1503380241858},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1503380241862},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1503380241866},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1503380241870},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1503380241873},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1503380241879},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1503380241978},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1503380241983},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1503380242010},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1503380242195},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1503380242199},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1503380242204},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1503380242208},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1503380242288},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1503380242292},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1503380242296},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1503380242300},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1503380242304},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1503380242309},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1503380242393},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1503380242401},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1503380242416},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1503380242237},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1503380242543},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1503380242409}],"Category":[{"name":"课外学习","_id":"cj6nfwqql0007r4v3j8e73db4"},{"name":"小轮子","_id":"cj6nfwqqu000cr4v35qwviw95"},{"name":"exception","_id":"cj6nfwqr8000jr4v3sy019iyz"},{"name":"自学历程","_id":"cj6nfwqre000pr4v3zbxbyn0f"}],"Data":[],"Page":[{"title":"categories","date":"2017-08-22T05:58:29.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-08-22 13:58:29\ntype: \"categories\"\n---\n","updated":"2017-08-22T06:07:30.472Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj6nfwqjz0000r4v36mpbxe6k","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-04-13T08:18:17.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-04-13 16:18:17\ntype: \"tags\"\n---\n","updated":"2017-08-22T06:07:03.488Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj6nfwqk40001r4v3puhay3x4","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"angular-$rootScope.$new()","date":"2017-04-22T01:32:15.000Z","_content":"## Scope实例上面有这么一个属性：$new()\n### $new(isolate, parent)\n``所有scope都是通过$new创建``\n#### 参数解释\n\n1. 参数一（isolate）设置是否为孤立作用域\n\n  - 如果是`true`，则建立孤立作用域，孤立作用域直接和祖级作用域联系 `child = new Scope(); child.$root = this.$root`\n  - 如果是`false`，则判断此`$rootScope`有没有子作用域，如果没有则建立一个子作用域构造函数，并且将这个子作用域的原型指向`this（`$rootScope => Scope的实例`）`,然后将`child = new this.$$ChildScope() child.__proto__ = Scope.prototype`\n2. 参数二设置要`new`的作用域的`parent`，如果不设置则将`parent = this`， 也就是将`new`的`child`挂载到`this(此$rootScope)上面，然后给`parent`的子作用域排序，有个判断如果设置了`isolate`并且`parent != this`,**则作用域不监听$destory事件**\n\n3.  e.g:\n`var scope = $rootScope.$new()`\n##### 没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。\n`\n","source":"_posts/2017/04/angular-rootScope-new.md","raw":"---\ntitle: angular-$rootScope.$new()\ndate: 2017-04-22 09:32:15\ntags: \n  - angular\n  - javascript\n---\n## Scope实例上面有这么一个属性：$new()\n### $new(isolate, parent)\n``所有scope都是通过$new创建``\n#### 参数解释\n\n1. 参数一（isolate）设置是否为孤立作用域\n\n  - 如果是`true`，则建立孤立作用域，孤立作用域直接和祖级作用域联系 `child = new Scope(); child.$root = this.$root`\n  - 如果是`false`，则判断此`$rootScope`有没有子作用域，如果没有则建立一个子作用域构造函数，并且将这个子作用域的原型指向`this（`$rootScope => Scope的实例`）`,然后将`child = new this.$$ChildScope() child.__proto__ = Scope.prototype`\n2. 参数二设置要`new`的作用域的`parent`，如果不设置则将`parent = this`， 也就是将`new`的`child`挂载到`this(此$rootScope)上面，然后给`parent`的子作用域排序，有个判断如果设置了`isolate`并且`parent != this`,**则作用域不监听$destory事件**\n\n3.  e.g:\n`var scope = $rootScope.$new()`\n##### 没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。\n`\n","slug":"angular-rootScope-new","published":1,"updated":"2017-05-15T09:47:12.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqq20002r4v34884z954","content":"<h2 id=\"Scope实例上面有这么一个属性：-new\"><a href=\"#Scope实例上面有这么一个属性：-new\" class=\"headerlink\" title=\"Scope实例上面有这么一个属性：$new()\"></a>Scope实例上面有这么一个属性：$new()</h2><h3 id=\"new-isolate-parent\"><a href=\"#new-isolate-parent\" class=\"headerlink\" title=\"$new(isolate, parent)\"></a>$new(isolate, parent)</h3><p><code>所有scope都是通过$new创建</code></p>\n<h4 id=\"参数解释\"><a href=\"#参数解释\" class=\"headerlink\" title=\"参数解释\"></a>参数解释</h4><ol>\n<li><p>参数一（isolate）设置是否为孤立作用域</p>\n<ul>\n<li>如果是<code>true</code>，则建立孤立作用域，孤立作用域直接和祖级作用域联系 <code>child = new Scope(); child.$root = this.$root</code></li>\n<li>如果是<code>false</code>，则判断此<code>$rootScope</code>有没有子作用域，如果没有则建立一个子作用域构造函数，并且将这个子作用域的原型指向<code>this（</code>$rootScope =&gt; Scope的实例<code>）</code>,然后将<code>child = new this.$$ChildScope() child.__proto__ = Scope.prototype</code></li>\n</ul>\n</li>\n<li><p>参数二设置要<code>new</code>的作用域的<code>parent</code>，如果不设置则将<code>parent = this</code>， 也就是将<code>new</code>的<code>child</code>挂载到<code>this(此$rootScope)上面，然后给</code>parent<code>的子作用域排序，有个判断如果设置了</code>isolate<code>并且</code>parent != this`,<strong>则作用域不监听$destory事件</strong></p>\n</li>\n<li><p>e.g:<br><code>var scope = $rootScope.$new()</code></p>\n<h5 id=\"没有指定参数，则1-将scope的父级指向-rootScope-2-将scope创建为-rootScope的子作用域，并在原型上继承-rootScope的所有属性方法，返回。\"><a href=\"#没有指定参数，则1-将scope的父级指向-rootScope-2-将scope创建为-rootScope的子作用域，并在原型上继承-rootScope的所有属性方法，返回。\" class=\"headerlink\" title=\"没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。\"></a>没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。</h5><p>`</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Scope实例上面有这么一个属性：-new\"><a href=\"#Scope实例上面有这么一个属性：-new\" class=\"headerlink\" title=\"Scope实例上面有这么一个属性：$new()\"></a>Scope实例上面有这么一个属性：$new()</h2><h3 id=\"new-isolate-parent\"><a href=\"#new-isolate-parent\" class=\"headerlink\" title=\"$new(isolate, parent)\"></a>$new(isolate, parent)</h3><p><code>所有scope都是通过$new创建</code></p>\n<h4 id=\"参数解释\"><a href=\"#参数解释\" class=\"headerlink\" title=\"参数解释\"></a>参数解释</h4><ol>\n<li><p>参数一（isolate）设置是否为孤立作用域</p>\n<ul>\n<li>如果是<code>true</code>，则建立孤立作用域，孤立作用域直接和祖级作用域联系 <code>child = new Scope(); child.$root = this.$root</code></li>\n<li>如果是<code>false</code>，则判断此<code>$rootScope</code>有没有子作用域，如果没有则建立一个子作用域构造函数，并且将这个子作用域的原型指向<code>this（</code>$rootScope =&gt; Scope的实例<code>）</code>,然后将<code>child = new this.$$ChildScope() child.__proto__ = Scope.prototype</code></li>\n</ul>\n</li>\n<li><p>参数二设置要<code>new</code>的作用域的<code>parent</code>，如果不设置则将<code>parent = this</code>， 也就是将<code>new</code>的<code>child</code>挂载到<code>this(此$rootScope)上面，然后给</code>parent<code>的子作用域排序，有个判断如果设置了</code>isolate<code>并且</code>parent != this`,<strong>则作用域不监听$destory事件</strong></p>\n</li>\n<li><p>e.g:<br><code>var scope = $rootScope.$new()</code></p>\n<h5 id=\"没有指定参数，则1-将scope的父级指向-rootScope-2-将scope创建为-rootScope的子作用域，并在原型上继承-rootScope的所有属性方法，返回。\"><a href=\"#没有指定参数，则1-将scope的父级指向-rootScope-2-将scope创建为-rootScope的子作用域，并在原型上继承-rootScope的所有属性方法，返回。\" class=\"headerlink\" title=\"没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。\"></a>没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。</h5><p>`</p>\n</li>\n</ol>\n"},{"title":"DOM属性currentTarget","date":"2017-04-19T07:18:24.000Z","_content":"```\n<html>\n<head>\n<script type=\"text/javascript\">\nfunction getEventTrigger(event)\n  { \n  x=event.currentTarget; \nconsole.log(event)\nconsole.log(event.currentTarget)\n  }\n</script>\n</head>\n<body >\n<p id=\"p1\" onmousedown=\"getEventTrigger(event)\">\nClick on this paragraph. An alert box will\nshow which element triggered the event.</p>\n</body>\n</html>\n```\n\n### 运行此代码会发现： **console.log(event) currentTarget:null**  而直接打印currentTarget则返回当前节点\n\n#### 这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况","source":"_posts/2017/04/currentTarget.md","raw":"---\ntitle: DOM属性currentTarget\ndate: 2017-04-19 15:18:24\ntags: \n  - javascript\n  - dom\n---\n```\n<html>\n<head>\n<script type=\"text/javascript\">\nfunction getEventTrigger(event)\n  { \n  x=event.currentTarget; \nconsole.log(event)\nconsole.log(event.currentTarget)\n  }\n</script>\n</head>\n<body >\n<p id=\"p1\" onmousedown=\"getEventTrigger(event)\">\nClick on this paragraph. An alert box will\nshow which element triggered the event.</p>\n</body>\n</html>\n```\n\n### 运行此代码会发现： **console.log(event) currentTarget:null**  而直接打印currentTarget则返回当前节点\n\n#### 这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况","slug":"currentTarget","published":1,"updated":"2017-05-15T09:47:12.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqq80003r4v3gclze1s0","content":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getEventTrigger</span>(<span class=\"params\">event</span>)</span></div><div class=\"line\">  &#123; </div><div class=\"line\">  x=event.currentTarget; </div><div class=\"line\"><span class=\"built_in\">console</span>.log(event)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(event.currentTarget)</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p1\"</span> <span class=\"attr\">onmousedown</span>=<span class=\"string\">\"getEventTrigger(event)\"</span>&gt;</span></div><div class=\"line\">Click on this paragraph. An alert box will</div><div class=\"line\">show which element triggered the event.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"运行此代码会发现：-console-log-event-currentTarget-null-而直接打印currentTarget则返回当前节点\"><a href=\"#运行此代码会发现：-console-log-event-currentTarget-null-而直接打印currentTarget则返回当前节点\" class=\"headerlink\" title=\"运行此代码会发现： console.log(event) currentTarget:null  而直接打印currentTarget则返回当前节点\"></a>运行此代码会发现： <strong>console.log(event) currentTarget:null</strong>  而直接打印currentTarget则返回当前节点</h3><h4 id=\"这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\"><a href=\"#这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\" class=\"headerlink\" title=\"这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\"></a>这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况</h4>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getEventTrigger</span>(<span class=\"params\">event</span>)</span></div><div class=\"line\">  &#123; </div><div class=\"line\">  x=event.currentTarget; </div><div class=\"line\"><span class=\"built_in\">console</span>.log(event)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(event.currentTarget)</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p1\"</span> <span class=\"attr\">onmousedown</span>=<span class=\"string\">\"getEventTrigger(event)\"</span>&gt;</span></div><div class=\"line\">Click on this paragraph. An alert box will</div><div class=\"line\">show which element triggered the event.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"运行此代码会发现：-console-log-event-currentTarget-null-而直接打印currentTarget则返回当前节点\"><a href=\"#运行此代码会发现：-console-log-event-currentTarget-null-而直接打印currentTarget则返回当前节点\" class=\"headerlink\" title=\"运行此代码会发现： console.log(event) currentTarget:null  而直接打印currentTarget则返回当前节点\"></a>运行此代码会发现： <strong>console.log(event) currentTarget:null</strong>  而直接打印currentTarget则返回当前节点</h3><h4 id=\"这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\"><a href=\"#这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\" class=\"headerlink\" title=\"这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\"></a>这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况</h4>"},{"title":"angular权威指南笔记","date":"2017-04-14T10:37:59.000Z","_content":"#### angular权威指南笔记\n\n1. $interpolate——服务插值表达式，可以设置插值表达式中的数据并``$interpolateProvider`` 可以自定义 **flag {{x}} => $x$**\n\n2. orderBy——排序：给显示的文本排序\n\n<!-- more -->\n3. ``$parsers``  \n   当用户同控制器进行交互，并且``ngModelController``  \n   中的``$setViewValue()``方法被调用时，\n   ``$parsers``数组中的函数会以流水线的形式被逐个调用。  \n   第一个``$parse``被调用后，执行结果会传\n   递给第二个``$parse``，以此类推\n   \n   ```\n   angular.module('myApp')\n     .directive('oneToTen', function() {\n       return {\n         require: '?ngModel',\n         link: function(scope, ele, attrs, ngModel) {\n             if (!ngModel) return;\n             ngModel.$parsers.unshift(\n             function(viewValue) {\n               var i = parseInt(viewValue);\n               if (i >= 0 && i < 10) {\n               ngModel.$setValidity('oneToTen', true);\n               return viewValue;\n             } else {\n               ngModel.$setValidity('oneToTen', false);\n               return undefined;\n           }\n         });\n       }\n       };\n     });\n   ```\n\n4. **$formatters**\n  当绑定的``ngModel``值发生了变化，并经过``$parsers``  \n  数组中解析器的处理后，这个值会被传递\n  给``$formatters``流水线。同``$parsers``  \n  数组可以修改表单的合法性状态类似， ``$formatters``中的函\n  数也可以修改并格式化这些值\n  ```\n  angular.module('myApp')\n      .directive('oneToTen', function() {\n        return {\n            require: '?ngModel',\n            link: function(scope, ele, attrs, ngModel) {\n            if (!ngModel) return;\n              ngModel.$formatters.unshift(function(v) {\n                return $filter('number')(v);\n              });\n          }\n        };\n      });\n  ```\n\n5. 表单验证：``ngModelController.$我是自定义``   \n    取出 ``form_name.input_name.$我是自定义``\n    angular可以通过``form_name.input_name.XX``   \n    拿到在``directive``里面给``ngModelController``自定义的布尔值\n    从而可以通过判断来进行show/hide的表单验证\n  \n6. 用属性声明指令比较好\n\n7. 指令 \n  **@** 绑定一次性显示的字符串 \n  **=** 双向绑定会获取作用域上面的值\n  **&** 绑定事件\n  **yourAttr: '@myAttr'** 在``html``用``myAttr``，在指令中还是用``yourAttr``\n\n8. ``ng-include``\n  会创建一个作用域，根据作用域原型继承原理，子作用域能访问父级的值，而反过来就不行了\n  所以不能在父级作用域操作``ng-include``中的数据，导致无法正常进行``$watch``\n  应该给```ng-include```创建单独的controller来控制作用域\n  类似的指令还有 ```ng-controller ng-app```\n\n9. 如要避免插值字符串{&#123; &#125;}为渲染完成闪烁问题，请使用``ng-cloak``指令\n\n10. ng-attr-(suffix) \n  如使用svg的时候报错，就是用前缀来避免\n```\n<svg>\n  <circle cx=\"{{ cx }}\"></circle>\n  </svg> // 报错\n<svg>\n  <circle ng-attr-cx=\"{{ cx }}\"><circle>\n</svg>  // OK\n```\n11. 指令的生命周期开始于``$compile``结束于``link方法``\n\n12. 指令API\n  ```\n  .directive('', ['', function(){\n  \n          \t// Runs during compile\n          \treturn {\n  \n          \t  name: '',  `指令名称`\n  \n          \t  priority: 1, `加载优先级`\n  \n          \t  terminal: true, `是否让优先级以下的指令不运行`\n  \n          \t  scope: &#123; &#125;, // &#123; &#125; = isolate, true = child, false/undefined = no change\n          \t  `作用域，如果是true则不让外部继承，外部读不到\n          \t    如果是对象则是隔离作用域（作用域不传递）\n          \t    具有隔离作用域的指令最主要的使用场景是创建可复用的组件，组件可以在未知上下文中使\n                用，并且可以避免污染所处的外部作用域或不经意地污染内部作用域`\n  \n          \t  controller: function($scope, $element, $attrs, $transclude) &#123; &#125;,\n  \n          \t  `指令的控制`\n          \t  require: 'ngModel', // Array = multiple requires,   \n          \t                     // ? = optional（指找不到控制器传递null）,   \n          \t                    // ^ = check parent elements\n                               // PS:可以在link方法的第四个参数指向该指令的controller\n  \n          \t  restrict: 'A', // E = Element,   \n          \t                // A = Attribute,   \n          \t               // C = Class,  \n          \t              // M = Comment\n          \t             // 声明方式\n          \t             \n          \t  template: '', // 字符串\n          \t  \n          \t  templateUrl: '', // 指令html的地址\n          \t  \n          \t  replace: true, // 用html标签完全替代此指令\n          \t  \n          \t  transclude: true, \n          \t       // 如果为true则无法正常监听数据变化，被用来，\n          \t      //  只有当你希望创建一个可以包含任意内容的指令时， \n          \t     //  才使用transclude: true。\n          \t    //  配合ng-transclude插进去\n          \t  \n          \t  compile: function(tElement, tAttrs,   \n                          function transclude(  \n                        \n                          function(scope, cloneLinkingFn){   \n                        \n                            return function linking(scope, elm, attrs)&#123; &#125;})),\n          \t\t\n          \t\tlink: function($scope, iElm, iAttrs, controller) {\n          \t\t\t\n          \t\t}\n          \t};\n          }])\n  ```\n13. Angular生命周期\n    1. 编译阶段： 遍历整个HTML，查找处理指令，遍历指令里面所有的模板，此时还没有数据绑定，\n      ng-repeat和ng-include类似的就会在在此时进行操作，减少开销\n    2. compile：在数据放入指令之前安全操作DOM\n    3. pre-link：将作用域与DOM连接起来之前操作dom，不安全的转换DOM\n    4. post-link: 负责事件监听器，监听数据和实时的DOM操作，如果需要性能，用compile\n    5. destroy\n  \n14. ngModel \n  * 要访问``ngModelController``必须在指令里面require\n   * 不要有隔离作用域，隔离作用域会导致无法更新外部绑定的值\n     * $viewValue 获取ngModel的值\n     * $setViewValue 设置ngModel的值，需要手动触发``$digest``循环\n     * $render自定义渲染，会在``$parser``流水线执行完后调用，慎用\n     * $parsers：数组，处理加工ngModel数据，ngModel从DOM读出来的值会被当参数传入，到数据模型\n     * $formatters 数组，在数据模型变的时候函数一一调用\n     * $viewChangeListeners 无需``$watch``函数不需要返回值，视图中的值变化时一一调用\n     * $error 没有通过验证的信息\n     * $pristine 是否对控件没有交互过\n     * $dirty 用户是否交互过\n     * $valid 是否正确 $setValidity设置\n     * $invalid 是否错误\n\n15. constant会在所有配置config之前执行。config: 模块加载时会执行此函数\n\n16. run 类main函数，在注入器创建之后被执行，是第一个被执行的方法，一般篇日志路由事件监听器\n    每次路由改变时执行run方法\n    \n17. 路由\n  ng-view 最高权限指令同一元素只会运行ng-view\n  ng-view运行顺序\n    触发$routeChangeSuccess后试图会更新\n    模板会通过路由与ng-view关联\n      1. 创建一个新作用域\n      2. 移除上一个视图，同时清除作用域\n      3. 关联当前模板\n      4. 如果路由中定义的controller则与当前作用域关联起来\n      5. 触发$viewContentLoaded\n      6. 调用onload指定的函数（如果有）\n      \n  **router的resolve属性，$injector会将声明的key添加进依赖，并能注入**\n  \n  **$location相当于window.location的封装，但只针对视图，不能针对全局浏览器窗口**\n  \n18. 依赖注入\n  * 对象通常过的其控制权的方式\n    * 在内部创建依赖；\n    * 通过全局变量进行引用；\n    * 在需要的地方通过参数进行传递\n  \n  angular依赖注入使用$injector来管里依赖关系和实例化\n  包括模块，指令，控制器的注入\n  在运行时， 任何模块启动时$injector都会负责实例化，并将其需要的所有依赖传递进去\n   ```\n   angular.module('myApp', [])\n        .factory('greeter', function() {\n          return {\n            greet: function(msg) {alert(msg);}\n          }\n        })\n        .controller('MyController',\n          function($scope, greeter) {\n            $scope.sayHello = function() {\n            greeter.greet(\"Hello!\");\n          };\n        });\n        \n        <div ng-app=\"myApp\">\n          <div ng-controller=\"MyController\">\n            <button ng-click=\"sayHello()\">Hello</button>\n          </div>\n        </div\n   ```\n##### angular加载过程\n```\n  // 使用注入器加载应用\n  var injector = angular.injector(['ng', 'myApp']);\n  // 通过注入器加载$controller服务： var $controller = injector.get('$controller');\n  var scope = injector.get('$rootScope').$new();\n  // 加载控制器并传入一个作用域，同AngularJS在运行时做的一样\n  var MyController = $controller('MyController', {$scope: scope})\n```\n  * angular通过**annotate**函数将greeter从参数列表中提取出来\n    如果没有加[]进行显式的声明，那么ng就会通过参数来获取依赖关系\n  ```\n    injector.annotate(function($q, myService){ })\n    // annotate会返回被注入目标中的服务的名称，从而进行匹配\n  ```\n  * injector.invoke(func($q)) 调用方法, fn.apply(self, args)\n    将参数列表转化成实例后的函数在进行调用\n    大概如此：\n  ```\n    function Fucker() {\n      this.getFucker = function () {\n        console.log('motherfucker')\n      }\n    }\n    \n    function invoke(fn, self) {\n      // 一般是['dep1', 'dep2', func]\n      // 会找寻依赖对应的参数函数并通过方法将其实例化\n      // 调用func\n      fn.apply(self, [new Fucker()])\n    }\n    \n    invoke(function (fucker) {\n      fucker.getFucker() // motherfucker\n    })\n  ```\n19. 分析ng-include为什么会导致无法正常双向绑定\n  * ng-include指令会生成一个作用域 (child)\n  * ng-include父节点的作用域（parent）\n  * parent.flag = \"test\" 根据原型继承原理 child._proto_.flag = \"test\"\n  * 当parent.flag变成\"dev\" 则child._proto_.flag = \"dev\"\n  * 如果child.flag = \"product\" 则 child.flag 与 parent.flag 失去联系\n  * 解决这种问题需要，将要传递的属性变为对象形式\n```\n  function Parent() {\n    this.face = \"哈哈\"\n  }\n  \n  Parent.prototype = {\n    constructor: Parent,\n  \n    $new: function () {\n      var child\n  \n      this.$$childScope = function () {\n        this.$id = 112212\n      }\n      this.$$childScope.prototype = this\n      child = new this.$$childScope()\n  \n      return child\n    }\n  \n  }\n  var parentScope = new Parent()\n  \n  var childScope = parentScope.$new()\n  \nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n) // [\"哈哈\", \"哈哈\"] [\"哈哈\", \"哈哈\"]\n  \n  \nparentScope.face = \"test\"\nparentScope.fixed.face = \"test\"\nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n) // [\"test\", \"test\"] [\"test\", \"test\"]\n  \n  \nchildScope.face = \"我是谁\"\nchildScope.fixed.face = \"我是谁\"\nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n)// [\"test\", \"我是谁\"] [\"我是谁\", \"我是谁\"]\n  \n```\n20. $scope生命周期\n  * 创建\n    * 创建控制器或指令时，angular会用``$injector``创建一个作用域，并在新建的控制器指令中将作用域传递进去\n        * ``$scope``会通过``$new``创建通过原型与父级保持联系\n  * 链接\n    * 用$watch将数据监听\n  * 更新\n    * 当$watch监听到变化，触发回调\n  * 销毁\n    * 视图不需要会销毁自己\n  ","source":"_posts/2017/04/angular权威指南学习.md","raw":"---\ntitle: angular权威指南笔记\ncategories: 课外学习\ndate: 2017-04-14 18:37:59\ntags:\n  - angular\n  - javascript\n---\n#### angular权威指南笔记\n\n1. $interpolate——服务插值表达式，可以设置插值表达式中的数据并``$interpolateProvider`` 可以自定义 **flag {{x}} => $x$**\n\n2. orderBy——排序：给显示的文本排序\n\n<!-- more -->\n3. ``$parsers``  \n   当用户同控制器进行交互，并且``ngModelController``  \n   中的``$setViewValue()``方法被调用时，\n   ``$parsers``数组中的函数会以流水线的形式被逐个调用。  \n   第一个``$parse``被调用后，执行结果会传\n   递给第二个``$parse``，以此类推\n   \n   ```\n   angular.module('myApp')\n     .directive('oneToTen', function() {\n       return {\n         require: '?ngModel',\n         link: function(scope, ele, attrs, ngModel) {\n             if (!ngModel) return;\n             ngModel.$parsers.unshift(\n             function(viewValue) {\n               var i = parseInt(viewValue);\n               if (i >= 0 && i < 10) {\n               ngModel.$setValidity('oneToTen', true);\n               return viewValue;\n             } else {\n               ngModel.$setValidity('oneToTen', false);\n               return undefined;\n           }\n         });\n       }\n       };\n     });\n   ```\n\n4. **$formatters**\n  当绑定的``ngModel``值发生了变化，并经过``$parsers``  \n  数组中解析器的处理后，这个值会被传递\n  给``$formatters``流水线。同``$parsers``  \n  数组可以修改表单的合法性状态类似， ``$formatters``中的函\n  数也可以修改并格式化这些值\n  ```\n  angular.module('myApp')\n      .directive('oneToTen', function() {\n        return {\n            require: '?ngModel',\n            link: function(scope, ele, attrs, ngModel) {\n            if (!ngModel) return;\n              ngModel.$formatters.unshift(function(v) {\n                return $filter('number')(v);\n              });\n          }\n        };\n      });\n  ```\n\n5. 表单验证：``ngModelController.$我是自定义``   \n    取出 ``form_name.input_name.$我是自定义``\n    angular可以通过``form_name.input_name.XX``   \n    拿到在``directive``里面给``ngModelController``自定义的布尔值\n    从而可以通过判断来进行show/hide的表单验证\n  \n6. 用属性声明指令比较好\n\n7. 指令 \n  **@** 绑定一次性显示的字符串 \n  **=** 双向绑定会获取作用域上面的值\n  **&** 绑定事件\n  **yourAttr: '@myAttr'** 在``html``用``myAttr``，在指令中还是用``yourAttr``\n\n8. ``ng-include``\n  会创建一个作用域，根据作用域原型继承原理，子作用域能访问父级的值，而反过来就不行了\n  所以不能在父级作用域操作``ng-include``中的数据，导致无法正常进行``$watch``\n  应该给```ng-include```创建单独的controller来控制作用域\n  类似的指令还有 ```ng-controller ng-app```\n\n9. 如要避免插值字符串{&#123; &#125;}为渲染完成闪烁问题，请使用``ng-cloak``指令\n\n10. ng-attr-(suffix) \n  如使用svg的时候报错，就是用前缀来避免\n```\n<svg>\n  <circle cx=\"{{ cx }}\"></circle>\n  </svg> // 报错\n<svg>\n  <circle ng-attr-cx=\"{{ cx }}\"><circle>\n</svg>  // OK\n```\n11. 指令的生命周期开始于``$compile``结束于``link方法``\n\n12. 指令API\n  ```\n  .directive('', ['', function(){\n  \n          \t// Runs during compile\n          \treturn {\n  \n          \t  name: '',  `指令名称`\n  \n          \t  priority: 1, `加载优先级`\n  \n          \t  terminal: true, `是否让优先级以下的指令不运行`\n  \n          \t  scope: &#123; &#125;, // &#123; &#125; = isolate, true = child, false/undefined = no change\n          \t  `作用域，如果是true则不让外部继承，外部读不到\n          \t    如果是对象则是隔离作用域（作用域不传递）\n          \t    具有隔离作用域的指令最主要的使用场景是创建可复用的组件，组件可以在未知上下文中使\n                用，并且可以避免污染所处的外部作用域或不经意地污染内部作用域`\n  \n          \t  controller: function($scope, $element, $attrs, $transclude) &#123; &#125;,\n  \n          \t  `指令的控制`\n          \t  require: 'ngModel', // Array = multiple requires,   \n          \t                     // ? = optional（指找不到控制器传递null）,   \n          \t                    // ^ = check parent elements\n                               // PS:可以在link方法的第四个参数指向该指令的controller\n  \n          \t  restrict: 'A', // E = Element,   \n          \t                // A = Attribute,   \n          \t               // C = Class,  \n          \t              // M = Comment\n          \t             // 声明方式\n          \t             \n          \t  template: '', // 字符串\n          \t  \n          \t  templateUrl: '', // 指令html的地址\n          \t  \n          \t  replace: true, // 用html标签完全替代此指令\n          \t  \n          \t  transclude: true, \n          \t       // 如果为true则无法正常监听数据变化，被用来，\n          \t      //  只有当你希望创建一个可以包含任意内容的指令时， \n          \t     //  才使用transclude: true。\n          \t    //  配合ng-transclude插进去\n          \t  \n          \t  compile: function(tElement, tAttrs,   \n                          function transclude(  \n                        \n                          function(scope, cloneLinkingFn){   \n                        \n                            return function linking(scope, elm, attrs)&#123; &#125;})),\n          \t\t\n          \t\tlink: function($scope, iElm, iAttrs, controller) {\n          \t\t\t\n          \t\t}\n          \t};\n          }])\n  ```\n13. Angular生命周期\n    1. 编译阶段： 遍历整个HTML，查找处理指令，遍历指令里面所有的模板，此时还没有数据绑定，\n      ng-repeat和ng-include类似的就会在在此时进行操作，减少开销\n    2. compile：在数据放入指令之前安全操作DOM\n    3. pre-link：将作用域与DOM连接起来之前操作dom，不安全的转换DOM\n    4. post-link: 负责事件监听器，监听数据和实时的DOM操作，如果需要性能，用compile\n    5. destroy\n  \n14. ngModel \n  * 要访问``ngModelController``必须在指令里面require\n   * 不要有隔离作用域，隔离作用域会导致无法更新外部绑定的值\n     * $viewValue 获取ngModel的值\n     * $setViewValue 设置ngModel的值，需要手动触发``$digest``循环\n     * $render自定义渲染，会在``$parser``流水线执行完后调用，慎用\n     * $parsers：数组，处理加工ngModel数据，ngModel从DOM读出来的值会被当参数传入，到数据模型\n     * $formatters 数组，在数据模型变的时候函数一一调用\n     * $viewChangeListeners 无需``$watch``函数不需要返回值，视图中的值变化时一一调用\n     * $error 没有通过验证的信息\n     * $pristine 是否对控件没有交互过\n     * $dirty 用户是否交互过\n     * $valid 是否正确 $setValidity设置\n     * $invalid 是否错误\n\n15. constant会在所有配置config之前执行。config: 模块加载时会执行此函数\n\n16. run 类main函数，在注入器创建之后被执行，是第一个被执行的方法，一般篇日志路由事件监听器\n    每次路由改变时执行run方法\n    \n17. 路由\n  ng-view 最高权限指令同一元素只会运行ng-view\n  ng-view运行顺序\n    触发$routeChangeSuccess后试图会更新\n    模板会通过路由与ng-view关联\n      1. 创建一个新作用域\n      2. 移除上一个视图，同时清除作用域\n      3. 关联当前模板\n      4. 如果路由中定义的controller则与当前作用域关联起来\n      5. 触发$viewContentLoaded\n      6. 调用onload指定的函数（如果有）\n      \n  **router的resolve属性，$injector会将声明的key添加进依赖，并能注入**\n  \n  **$location相当于window.location的封装，但只针对视图，不能针对全局浏览器窗口**\n  \n18. 依赖注入\n  * 对象通常过的其控制权的方式\n    * 在内部创建依赖；\n    * 通过全局变量进行引用；\n    * 在需要的地方通过参数进行传递\n  \n  angular依赖注入使用$injector来管里依赖关系和实例化\n  包括模块，指令，控制器的注入\n  在运行时， 任何模块启动时$injector都会负责实例化，并将其需要的所有依赖传递进去\n   ```\n   angular.module('myApp', [])\n        .factory('greeter', function() {\n          return {\n            greet: function(msg) {alert(msg);}\n          }\n        })\n        .controller('MyController',\n          function($scope, greeter) {\n            $scope.sayHello = function() {\n            greeter.greet(\"Hello!\");\n          };\n        });\n        \n        <div ng-app=\"myApp\">\n          <div ng-controller=\"MyController\">\n            <button ng-click=\"sayHello()\">Hello</button>\n          </div>\n        </div\n   ```\n##### angular加载过程\n```\n  // 使用注入器加载应用\n  var injector = angular.injector(['ng', 'myApp']);\n  // 通过注入器加载$controller服务： var $controller = injector.get('$controller');\n  var scope = injector.get('$rootScope').$new();\n  // 加载控制器并传入一个作用域，同AngularJS在运行时做的一样\n  var MyController = $controller('MyController', {$scope: scope})\n```\n  * angular通过**annotate**函数将greeter从参数列表中提取出来\n    如果没有加[]进行显式的声明，那么ng就会通过参数来获取依赖关系\n  ```\n    injector.annotate(function($q, myService){ })\n    // annotate会返回被注入目标中的服务的名称，从而进行匹配\n  ```\n  * injector.invoke(func($q)) 调用方法, fn.apply(self, args)\n    将参数列表转化成实例后的函数在进行调用\n    大概如此：\n  ```\n    function Fucker() {\n      this.getFucker = function () {\n        console.log('motherfucker')\n      }\n    }\n    \n    function invoke(fn, self) {\n      // 一般是['dep1', 'dep2', func]\n      // 会找寻依赖对应的参数函数并通过方法将其实例化\n      // 调用func\n      fn.apply(self, [new Fucker()])\n    }\n    \n    invoke(function (fucker) {\n      fucker.getFucker() // motherfucker\n    })\n  ```\n19. 分析ng-include为什么会导致无法正常双向绑定\n  * ng-include指令会生成一个作用域 (child)\n  * ng-include父节点的作用域（parent）\n  * parent.flag = \"test\" 根据原型继承原理 child._proto_.flag = \"test\"\n  * 当parent.flag变成\"dev\" 则child._proto_.flag = \"dev\"\n  * 如果child.flag = \"product\" 则 child.flag 与 parent.flag 失去联系\n  * 解决这种问题需要，将要传递的属性变为对象形式\n```\n  function Parent() {\n    this.face = \"哈哈\"\n  }\n  \n  Parent.prototype = {\n    constructor: Parent,\n  \n    $new: function () {\n      var child\n  \n      this.$$childScope = function () {\n        this.$id = 112212\n      }\n      this.$$childScope.prototype = this\n      child = new this.$$childScope()\n  \n      return child\n    }\n  \n  }\n  var parentScope = new Parent()\n  \n  var childScope = parentScope.$new()\n  \nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n) // [\"哈哈\", \"哈哈\"] [\"哈哈\", \"哈哈\"]\n  \n  \nparentScope.face = \"test\"\nparentScope.fixed.face = \"test\"\nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n) // [\"test\", \"test\"] [\"test\", \"test\"]\n  \n  \nchildScope.face = \"我是谁\"\nchildScope.fixed.face = \"我是谁\"\nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n)// [\"test\", \"我是谁\"] [\"我是谁\", \"我是谁\"]\n  \n```\n20. $scope生命周期\n  * 创建\n    * 创建控制器或指令时，angular会用``$injector``创建一个作用域，并在新建的控制器指令中将作用域传递进去\n        * ``$scope``会通过``$new``创建通过原型与父级保持联系\n  * 链接\n    * 用$watch将数据监听\n  * 更新\n    * 当$watch监听到变化，触发回调\n  * 销毁\n    * 视图不需要会销毁自己\n  ","slug":"angular权威指南学习","published":1,"updated":"2017-05-15T09:47:12.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqqh0005r4v3lvbdlb8a","content":"<h4 id=\"angular权威指南笔记\"><a href=\"#angular权威指南笔记\" class=\"headerlink\" title=\"angular权威指南笔记\"></a>angular权威指南笔记</h4><ol>\n<li><p>$interpolate——服务插值表达式，可以设置插值表达式中的数据并<code>$interpolateProvider</code> 可以自定义 <strong>flag  =&gt; $x$</strong></p>\n</li>\n<li><p>orderBy——排序：给显示的文本排序</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li><p><code>$parsers</code><br>当用户同控制器进行交互，并且<code>ngModelController</code><br>中的<code>$setViewValue()</code>方法被调用时，<br><code>$parsers</code>数组中的函数会以流水线的形式被逐个调用。<br>第一个<code>$parse</code>被调用后，执行结果会传<br>递给第二个<code>$parse</code>，以此类推</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>)</div><div class=\"line\">  .directive(<span class=\"string\">'oneToTen'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">require</span>: <span class=\"string\">'?ngModel'</span>,</div><div class=\"line\">      link: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope, ele, attrs, ngModel)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!ngModel) <span class=\"keyword\">return</span>;</div><div class=\"line\">          ngModel.$parsers.unshift(</div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(viewValue)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> i = parseInt(viewValue);</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; <span class=\"number\">10</span>) &#123;</div><div class=\"line\">            ngModel.$setValidity(<span class=\"string\">'oneToTen'</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> viewValue;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ngModel.$setValidity(<span class=\"string\">'oneToTen'</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> undefined;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>$formatters</strong><br>当绑定的<code>ngModel</code>值发生了变化，并经过<code>$parsers</code><br>数组中解析器的处理后，这个值会被传递<br>给<code>$formatters</code>流水线。同<code>$parsers</code><br>数组可以修改表单的合法性状态类似， <code>$formatters</code>中的函<br>数也可以修改并格式化这些值</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>)</div><div class=\"line\">    .directive(<span class=\"string\">'oneToTen'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">require</span>: <span class=\"string\">'?ngModel'</span>,</div><div class=\"line\">          link: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope, ele, attrs, ngModel)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!ngModel) <span class=\"keyword\">return</span>;</div><div class=\"line\">            ngModel.$formatters.unshift(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(v)</span> </span>&#123;</div><div class=\"line\">              <span class=\"keyword\">return</span> $filter(<span class=\"string\">'number'</span>)(v);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>表单验证：<code>ngModelController.$我是自定义</code><br> 取出 <code>form_name.input_name.$我是自定义</code><br> angular可以通过<code>form_name.input_name.XX</code><br> 拿到在<code>directive</code>里面给<code>ngModelController</code>自定义的布尔值<br> 从而可以通过判断来进行show/hide的表单验证</p>\n</li>\n<li><p>用属性声明指令比较好</p>\n</li>\n<li><p>指令<br><strong>@</strong> 绑定一次性显示的字符串<br><strong>=</strong> 双向绑定会获取作用域上面的值<br><strong>&amp;</strong> 绑定事件<br><strong>yourAttr: ‘@myAttr’</strong> 在<code>html</code>用<code>myAttr</code>，在指令中还是用<code>yourAttr</code></p>\n</li>\n<li><p><code>ng-include</code><br>会创建一个作用域，根据作用域原型继承原理，子作用域能访问父级的值，而反过来就不行了<br>所以不能在父级作用域操作<code>ng-include</code>中的数据，导致无法正常进行<code>$watch</code><br>应该给<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">类似的指令还有 ```ng-controller ng-app</div></pre></td></tr></table></figure></p>\n</li>\n<li><p>如要避免插值字符串{&#123; &#125;}为渲染完成闪烁问题，请使用<code>ng-cloak</code>指令</p>\n</li>\n<li><p>ng-attr-(suffix)<br>如使用svg的时候报错，就是用前缀来避免</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123; cx &#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">circle</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span> // 报错</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">ng-attr-cx</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123; cx &#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">circle</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span>  // OK</div></pre></td></tr></table></figure>\n</li>\n<li><p>指令的生命周期开始于<code>$compile</code>结束于<code>link方法</code></p>\n</li>\n<li><p>指令API</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">''</span>, [<span class=\"string\">''</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        \t<span class=\"comment\">// Runs during compile</span></div><div class=\"line\">        \t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\"></div><div class=\"line\">        \t  name: <span class=\"string\">''</span>,  `指令名称`</div><div class=\"line\"></div><div class=\"line\">        \t  priority: <span class=\"number\">1</span>, `加载优先级`</div><div class=\"line\"></div><div class=\"line\">        \t  terminal: <span class=\"keyword\">true</span>, `是否让优先级以下的指令不运行`</div><div class=\"line\"></div><div class=\"line\">        \t  scope: &amp;<span class=\"comment\">#123; &amp;#125;, // &amp;#123; &amp;#125; = isolate, true = child, false/undefined = no change</span></div><div class=\"line\">        \t  `作用域，如果是<span class=\"keyword\">true</span>则不让外部继承，外部读不到</div><div class=\"line\">        \t    如果是对象则是隔离作用域（作用域不传递）</div><div class=\"line\">        \t    具有隔离作用域的指令最主要的使用场景是创建可复用的组件，组件可以在未知上下文中使</div><div class=\"line\">              用，并且可以避免污染所处的外部作用域或不经意地污染内部作用域`</div><div class=\"line\"></div><div class=\"line\">        \t  controller: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, $element, $attrs, $transclude)</span> &amp;#123</span>; &amp;<span class=\"comment\">#125;,</span></div><div class=\"line\"></div><div class=\"line\">        \t  `指令的控制`</div><div class=\"line\">        \t  <span class=\"keyword\">require</span>: <span class=\"string\">'ngModel'</span>, <span class=\"comment\">// Array = multiple requires,   </span></div><div class=\"line\">        \t                     <span class=\"comment\">// ? = optional（指找不到控制器传递null）,   </span></div><div class=\"line\">        \t                    <span class=\"comment\">// ^ = check parent elements</span></div><div class=\"line\">                             <span class=\"comment\">// PS:可以在link方法的第四个参数指向该指令的controller</span></div><div class=\"line\"></div><div class=\"line\">        \t  restrict: <span class=\"string\">'A'</span>, <span class=\"comment\">// E = Element,   </span></div><div class=\"line\">        \t                <span class=\"comment\">// A = Attribute,   </span></div><div class=\"line\">        \t               <span class=\"comment\">// C = Class,  </span></div><div class=\"line\">        \t              <span class=\"comment\">// M = Comment</span></div><div class=\"line\">        \t             <span class=\"comment\">// 声明方式</span></div><div class=\"line\">        \t             </div><div class=\"line\">        \t  template: <span class=\"string\">''</span>, <span class=\"comment\">// 字符串</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  templateUrl: <span class=\"string\">''</span>, <span class=\"comment\">// 指令html的地址</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  replace: <span class=\"keyword\">true</span>, <span class=\"comment\">// 用html标签完全替代此指令</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  transclude: <span class=\"keyword\">true</span>, </div><div class=\"line\">        \t       <span class=\"comment\">// 如果为true则无法正常监听数据变化，被用来，</span></div><div class=\"line\">        \t      <span class=\"comment\">//  只有当你希望创建一个可以包含任意内容的指令时， </span></div><div class=\"line\">        \t     <span class=\"comment\">//  才使用transclude: true。</span></div><div class=\"line\">        \t    <span class=\"comment\">//  配合ng-transclude插进去</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  compile: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(tElement, tAttrs,   </span></span></div><div class=\"line\">                        function transclude<span class=\"params\">(  </span></div><div class=\"line\">                      </div><div class=\"line\">                        function<span class=\"params\">(scope, cloneLinkingFn)</span>&#123;   </div><div class=\"line\">                      </div><div class=\"line\">                          return function linking<span class=\"params\">(scope, elm, attrs)</span>&amp;#<span class=\"number\">123</span>; &amp;#<span class=\"number\">125</span>;&#125;)),</div><div class=\"line\">        \t\t</div><div class=\"line\">        \t\t<span class=\"title\">link</span>: <span class=\"title\">function</span><span class=\"params\">($scope, iElm, iAttrs, controller)</span> &#123;</div><div class=\"line\">        \t\t\t</div><div class=\"line\">        \t\t&#125;</div><div class=\"line\">        \t&#125;;</div><div class=\"line\">        &#125;])</div></pre></td></tr></table></figure>\n</li>\n<li><p>Angular生命周期</p>\n<ol>\n<li>编译阶段： 遍历整个HTML，查找处理指令，遍历指令里面所有的模板，此时还没有数据绑定，<br>ng-repeat和ng-include类似的就会在在此时进行操作，减少开销</li>\n<li>compile：在数据放入指令之前安全操作DOM</li>\n<li>pre-link：将作用域与DOM连接起来之前操作dom，不安全的转换DOM</li>\n<li>post-link: 负责事件监听器，监听数据和实时的DOM操作，如果需要性能，用compile</li>\n<li>destroy</li>\n</ol>\n</li>\n<li><p>ngModel </p>\n<ul>\n<li>要访问<code>ngModelController</code>必须在指令里面require</li>\n<li>不要有隔离作用域，隔离作用域会导致无法更新外部绑定的值<ul>\n<li>$viewValue 获取ngModel的值</li>\n<li>$setViewValue 设置ngModel的值，需要手动触发<code>$digest</code>循环</li>\n<li>$render自定义渲染，会在<code>$parser</code>流水线执行完后调用，慎用</li>\n<li>$parsers：数组，处理加工ngModel数据，ngModel从DOM读出来的值会被当参数传入，到数据模型</li>\n<li>$formatters 数组，在数据模型变的时候函数一一调用</li>\n<li>$viewChangeListeners 无需<code>$watch</code>函数不需要返回值，视图中的值变化时一一调用</li>\n<li>$error 没有通过验证的信息</li>\n<li>$pristine 是否对控件没有交互过</li>\n<li>$dirty 用户是否交互过</li>\n<li>$valid 是否正确 $setValidity设置</li>\n<li>$invalid 是否错误</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>constant会在所有配置config之前执行。config: 模块加载时会执行此函数</p>\n</li>\n<li><p>run 类main函数，在注入器创建之后被执行，是第一个被执行的方法，一般篇日志路由事件监听器<br>每次路由改变时执行run方法</p>\n</li>\n<li><p>路由<br>ng-view 最高权限指令同一元素只会运行ng-view<br>ng-view运行顺序<br>触发$routeChangeSuccess后试图会更新<br>模板会通过路由与ng-view关联</p>\n<ol>\n<li>创建一个新作用域</li>\n<li>移除上一个视图，同时清除作用域</li>\n<li>关联当前模板</li>\n<li>如果路由中定义的controller则与当前作用域关联起来</li>\n<li>触发$viewContentLoaded</li>\n<li>调用onload指定的函数（如果有）</li>\n</ol>\n<p><strong>router的resolve属性，$injector会将声明的key添加进依赖，并能注入</strong></p>\n<p><strong>$location相当于window.location的封装，但只针对视图，不能针对全局浏览器窗口</strong></p>\n</li>\n<li><p>依赖注入</p>\n<ul>\n<li>对象通常过的其控制权的方式</li>\n<li>在内部创建依赖；</li>\n<li>通过全局变量进行引用；</li>\n<li>在需要的地方通过参数进行传递</li>\n</ul>\n<p>angular依赖注入使用$injector来管里依赖关系和实例化<br>包括模块，指令，控制器的注入<br>在运行时， 任何模块启动时$injector都会负责实例化，并将其需要的所有依赖传递进去</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>, [])</div><div class=\"line\">     .factory(<span class=\"string\">'greeter'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">         <span class=\"attr\">greet</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;alert(msg);&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;)</div><div class=\"line\">     .controller(<span class=\"string\">'MyController'</span>,</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, greeter</span>) </span>&#123;</div><div class=\"line\">         $scope.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">         greeter.greet(<span class=\"string\">\"Hello!\"</span>);</div><div class=\"line\">       &#125;;</div><div class=\"line\">     &#125;);</div><div class=\"line\">     </div><div class=\"line\">     <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"myApp\"</span>&gt;</span></span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"MyController\"</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"sayHello()\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span></span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"angular加载过程\"><a href=\"#angular加载过程\" class=\"headerlink\" title=\"angular加载过程\"></a>angular加载过程</h5><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span> 使用注入器加载应用</div><div class=\"line\">var injector = angular.injector([<span class=\"string\">'ng'</span>, <span class=\"string\">'myApp'</span>]);</div><div class=\"line\"><span class=\"regexp\">//</span> 通过注入器加载<span class=\"variable\">$controller</span>服务： var <span class=\"variable\">$controller</span> = injector.get(<span class=\"string\">'$controller'</span>);</div><div class=\"line\">var scope = injector.get(<span class=\"string\">'$rootScope'</span>).<span class=\"variable\">$new</span>();</div><div class=\"line\"><span class=\"regexp\">//</span> 加载控制器并传入一个作用域，同AngularJS在运行时做的一样</div><div class=\"line\">var MyController = <span class=\"variable\">$controller</span>(<span class=\"string\">'MyController'</span>, &#123;<span class=\"variable\">$scope</span>: scope&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>angular通过<strong>annotate</strong>函数将greeter从参数列表中提取出来<br>如果没有加[]进行显式的声明，那么ng就会通过参数来获取依赖关系</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">injector.annotate(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($q, myService)</span></span>&#123; &#125;)</div><div class=\"line\"><span class=\"comment\">// annotate会返回被注入目标中的服务的名称，从而进行匹配</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>injector.invoke(func($q)) 调用方法, fn.apply(self, args)<br>将参数列表转化成实例后的函数在进行调用<br>大概如此：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fucker</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.getFucker = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'motherfucker'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invoke</span>(<span class=\"params\">fn, self</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 一般是['dep1', 'dep2', func]</span></div><div class=\"line\">  <span class=\"comment\">// 会找寻依赖对应的参数函数并通过方法将其实例化</span></div><div class=\"line\">  <span class=\"comment\">// 调用func</span></div><div class=\"line\">  fn.apply(self, [<span class=\"keyword\">new</span> Fucker()])</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">invoke(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fucker</span>) </span>&#123;</div><div class=\"line\">  fucker.getFucker() <span class=\"comment\">// motherfucker</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>分析ng-include为什么会导致无法正常双向绑定</p>\n<ul>\n<li>ng-include指令会生成一个作用域 (child)</li>\n<li>ng-include父节点的作用域（parent）</li>\n<li>parent.flag = “test” 根据原型继承原理 child.<em>proto</em>.flag = “test”</li>\n<li>当parent.flag变成”dev” 则child.<em>proto</em>.flag = “dev”</li>\n<li>如果child.flag = “product” 则 child.flag 与 parent.flag 失去联系</li>\n<li>解决这种问题需要，将要传递的属性变为对象形式<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">  function Parent() &#123;</div><div class=\"line\">    this<span class=\"selector-class\">.face</span> = <span class=\"string\">\"哈哈\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  Parent<span class=\"selector-class\">.prototype</span> = &#123;</div><div class=\"line\">    constructor: Parent,</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"variable\">$new</span>: function () &#123;</div><div class=\"line\">      <span class=\"selector-tag\">var</span> child</div><div class=\"line\">  </div><div class=\"line\">      this.$<span class=\"variable\">$childScope</span> = function () &#123;</div><div class=\"line\">        this.<span class=\"variable\">$id</span> = <span class=\"number\">112212</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      this.$<span class=\"variable\">$childScope</span><span class=\"selector-class\">.prototype</span> = this</div><div class=\"line\">      child = new this.$<span class=\"variable\">$childScope</span>()</div><div class=\"line\">  </div><div class=\"line\">      return child</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-tag\">var</span> parentScope = new Parent()</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"selector-tag\">var</span> childScope = parentScope.<span class=\"variable\">$new</span>()</div><div class=\"line\">  </div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">) <span class=\"comment\">// [\"哈哈\", \"哈哈\"] [\"哈哈\", \"哈哈\"]</span></div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">parentScope<span class=\"selector-class\">.face</span> = <span class=\"string\">\"test\"</span></div><div class=\"line\">parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span> = <span class=\"string\">\"test\"</span></div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">) <span class=\"comment\">// [\"test\", \"test\"] [\"test\", \"test\"]</span></div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">childScope<span class=\"selector-class\">.face</span> = <span class=\"string\">\"我是谁\"</span></div><div class=\"line\">childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span> = <span class=\"string\">\"我是谁\"</span></div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">)<span class=\"comment\">// [\"test\", \"我是谁\"] [\"我是谁\", \"我是谁\"]</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>$scope生命周期</p>\n<ul>\n<li>创建</li>\n<li>创建控制器或指令时，angular会用<code>$injector</code>创建一个作用域，并在新建的控制器指令中将作用域传递进去<ul>\n<li><code>$scope</code>会通过<code>$new</code>创建通过原型与父级保持联系</li>\n</ul>\n</li>\n<li>链接</li>\n<li>用$watch将数据监听</li>\n<li>更新</li>\n<li>当$watch监听到变化，触发回调</li>\n<li>销毁</li>\n<li>视图不需要会销毁自己</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h4 id=\"angular权威指南笔记\"><a href=\"#angular权威指南笔记\" class=\"headerlink\" title=\"angular权威指南笔记\"></a>angular权威指南笔记</h4><ol>\n<li><p>$interpolate——服务插值表达式，可以设置插值表达式中的数据并<code>$interpolateProvider</code> 可以自定义 <strong>flag  =&gt; $x$</strong></p>\n</li>\n<li><p>orderBy——排序：给显示的文本排序</p>\n</li>\n</ol>","more":"<ol>\n<li><p><code>$parsers</code><br>当用户同控制器进行交互，并且<code>ngModelController</code><br>中的<code>$setViewValue()</code>方法被调用时，<br><code>$parsers</code>数组中的函数会以流水线的形式被逐个调用。<br>第一个<code>$parse</code>被调用后，执行结果会传<br>递给第二个<code>$parse</code>，以此类推</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>)</div><div class=\"line\">  .directive(<span class=\"string\">'oneToTen'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">require</span>: <span class=\"string\">'?ngModel'</span>,</div><div class=\"line\">      link: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope, ele, attrs, ngModel)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!ngModel) <span class=\"keyword\">return</span>;</div><div class=\"line\">          ngModel.$parsers.unshift(</div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(viewValue)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> i = parseInt(viewValue);</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; <span class=\"number\">10</span>) &#123;</div><div class=\"line\">            ngModel.$setValidity(<span class=\"string\">'oneToTen'</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> viewValue;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ngModel.$setValidity(<span class=\"string\">'oneToTen'</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> undefined;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>$formatters</strong><br>当绑定的<code>ngModel</code>值发生了变化，并经过<code>$parsers</code><br>数组中解析器的处理后，这个值会被传递<br>给<code>$formatters</code>流水线。同<code>$parsers</code><br>数组可以修改表单的合法性状态类似， <code>$formatters</code>中的函<br>数也可以修改并格式化这些值</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>)</div><div class=\"line\">    .directive(<span class=\"string\">'oneToTen'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">require</span>: <span class=\"string\">'?ngModel'</span>,</div><div class=\"line\">          link: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope, ele, attrs, ngModel)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!ngModel) <span class=\"keyword\">return</span>;</div><div class=\"line\">            ngModel.$formatters.unshift(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(v)</span> </span>&#123;</div><div class=\"line\">              <span class=\"keyword\">return</span> $filter(<span class=\"string\">'number'</span>)(v);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>表单验证：<code>ngModelController.$我是自定义</code><br> 取出 <code>form_name.input_name.$我是自定义</code><br> angular可以通过<code>form_name.input_name.XX</code><br> 拿到在<code>directive</code>里面给<code>ngModelController</code>自定义的布尔值<br> 从而可以通过判断来进行show/hide的表单验证</p>\n</li>\n<li><p>用属性声明指令比较好</p>\n</li>\n<li><p>指令<br><strong>@</strong> 绑定一次性显示的字符串<br><strong>=</strong> 双向绑定会获取作用域上面的值<br><strong>&amp;</strong> 绑定事件<br><strong>yourAttr: ‘@myAttr’</strong> 在<code>html</code>用<code>myAttr</code>，在指令中还是用<code>yourAttr</code></p>\n</li>\n<li><p><code>ng-include</code><br>会创建一个作用域，根据作用域原型继承原理，子作用域能访问父级的值，而反过来就不行了<br>所以不能在父级作用域操作<code>ng-include</code>中的数据，导致无法正常进行<code>$watch</code><br>应该给<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">类似的指令还有 ```ng-controller ng-app</div></pre></td></tr></table></figure></p>\n</li>\n<li><p>如要避免插值字符串{&#123; &#125;}为渲染完成闪烁问题，请使用<code>ng-cloak</code>指令</p>\n</li>\n<li><p>ng-attr-(suffix)<br>如使用svg的时候报错，就是用前缀来避免</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123; cx &#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">circle</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span> // 报错</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">ng-attr-cx</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123; cx &#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">circle</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span>  // OK</div></pre></td></tr></table></figure>\n</li>\n<li><p>指令的生命周期开始于<code>$compile</code>结束于<code>link方法</code></p>\n</li>\n<li><p>指令API</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">''</span>, [<span class=\"string\">''</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        \t<span class=\"comment\">// Runs during compile</span></div><div class=\"line\">        \t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\"></div><div class=\"line\">        \t  name: <span class=\"string\">''</span>,  `指令名称`</div><div class=\"line\"></div><div class=\"line\">        \t  priority: <span class=\"number\">1</span>, `加载优先级`</div><div class=\"line\"></div><div class=\"line\">        \t  terminal: <span class=\"keyword\">true</span>, `是否让优先级以下的指令不运行`</div><div class=\"line\"></div><div class=\"line\">        \t  scope: &amp;<span class=\"comment\">#123; &amp;#125;, // &amp;#123; &amp;#125; = isolate, true = child, false/undefined = no change</span></div><div class=\"line\">        \t  `作用域，如果是<span class=\"keyword\">true</span>则不让外部继承，外部读不到</div><div class=\"line\">        \t    如果是对象则是隔离作用域（作用域不传递）</div><div class=\"line\">        \t    具有隔离作用域的指令最主要的使用场景是创建可复用的组件，组件可以在未知上下文中使</div><div class=\"line\">              用，并且可以避免污染所处的外部作用域或不经意地污染内部作用域`</div><div class=\"line\"></div><div class=\"line\">        \t  controller: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, $element, $attrs, $transclude)</span> &amp;#123</span>; &amp;<span class=\"comment\">#125;,</span></div><div class=\"line\"></div><div class=\"line\">        \t  `指令的控制`</div><div class=\"line\">        \t  <span class=\"keyword\">require</span>: <span class=\"string\">'ngModel'</span>, <span class=\"comment\">// Array = multiple requires,   </span></div><div class=\"line\">        \t                     <span class=\"comment\">// ? = optional（指找不到控制器传递null）,   </span></div><div class=\"line\">        \t                    <span class=\"comment\">// ^ = check parent elements</span></div><div class=\"line\">                             <span class=\"comment\">// PS:可以在link方法的第四个参数指向该指令的controller</span></div><div class=\"line\"></div><div class=\"line\">        \t  restrict: <span class=\"string\">'A'</span>, <span class=\"comment\">// E = Element,   </span></div><div class=\"line\">        \t                <span class=\"comment\">// A = Attribute,   </span></div><div class=\"line\">        \t               <span class=\"comment\">// C = Class,  </span></div><div class=\"line\">        \t              <span class=\"comment\">// M = Comment</span></div><div class=\"line\">        \t             <span class=\"comment\">// 声明方式</span></div><div class=\"line\">        \t             </div><div class=\"line\">        \t  template: <span class=\"string\">''</span>, <span class=\"comment\">// 字符串</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  templateUrl: <span class=\"string\">''</span>, <span class=\"comment\">// 指令html的地址</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  replace: <span class=\"keyword\">true</span>, <span class=\"comment\">// 用html标签完全替代此指令</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  transclude: <span class=\"keyword\">true</span>, </div><div class=\"line\">        \t       <span class=\"comment\">// 如果为true则无法正常监听数据变化，被用来，</span></div><div class=\"line\">        \t      <span class=\"comment\">//  只有当你希望创建一个可以包含任意内容的指令时， </span></div><div class=\"line\">        \t     <span class=\"comment\">//  才使用transclude: true。</span></div><div class=\"line\">        \t    <span class=\"comment\">//  配合ng-transclude插进去</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  compile: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(tElement, tAttrs,   </span></span></div><div class=\"line\">                        function transclude<span class=\"params\">(  </span></div><div class=\"line\">                      </div><div class=\"line\">                        function<span class=\"params\">(scope, cloneLinkingFn)</span>&#123;   </div><div class=\"line\">                      </div><div class=\"line\">                          return function linking<span class=\"params\">(scope, elm, attrs)</span>&amp;#<span class=\"number\">123</span>; &amp;#<span class=\"number\">125</span>;&#125;)),</div><div class=\"line\">        \t\t</div><div class=\"line\">        \t\t<span class=\"title\">link</span>: <span class=\"title\">function</span><span class=\"params\">($scope, iElm, iAttrs, controller)</span> &#123;</div><div class=\"line\">        \t\t\t</div><div class=\"line\">        \t\t&#125;</div><div class=\"line\">        \t&#125;;</div><div class=\"line\">        &#125;])</div></pre></td></tr></table></figure>\n</li>\n<li><p>Angular生命周期</p>\n<ol>\n<li>编译阶段： 遍历整个HTML，查找处理指令，遍历指令里面所有的模板，此时还没有数据绑定，<br>ng-repeat和ng-include类似的就会在在此时进行操作，减少开销</li>\n<li>compile：在数据放入指令之前安全操作DOM</li>\n<li>pre-link：将作用域与DOM连接起来之前操作dom，不安全的转换DOM</li>\n<li>post-link: 负责事件监听器，监听数据和实时的DOM操作，如果需要性能，用compile</li>\n<li>destroy</li>\n</ol>\n</li>\n<li><p>ngModel </p>\n<ul>\n<li>要访问<code>ngModelController</code>必须在指令里面require</li>\n<li>不要有隔离作用域，隔离作用域会导致无法更新外部绑定的值<ul>\n<li>$viewValue 获取ngModel的值</li>\n<li>$setViewValue 设置ngModel的值，需要手动触发<code>$digest</code>循环</li>\n<li>$render自定义渲染，会在<code>$parser</code>流水线执行完后调用，慎用</li>\n<li>$parsers：数组，处理加工ngModel数据，ngModel从DOM读出来的值会被当参数传入，到数据模型</li>\n<li>$formatters 数组，在数据模型变的时候函数一一调用</li>\n<li>$viewChangeListeners 无需<code>$watch</code>函数不需要返回值，视图中的值变化时一一调用</li>\n<li>$error 没有通过验证的信息</li>\n<li>$pristine 是否对控件没有交互过</li>\n<li>$dirty 用户是否交互过</li>\n<li>$valid 是否正确 $setValidity设置</li>\n<li>$invalid 是否错误</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>constant会在所有配置config之前执行。config: 模块加载时会执行此函数</p>\n</li>\n<li><p>run 类main函数，在注入器创建之后被执行，是第一个被执行的方法，一般篇日志路由事件监听器<br>每次路由改变时执行run方法</p>\n</li>\n<li><p>路由<br>ng-view 最高权限指令同一元素只会运行ng-view<br>ng-view运行顺序<br>触发$routeChangeSuccess后试图会更新<br>模板会通过路由与ng-view关联</p>\n<ol>\n<li>创建一个新作用域</li>\n<li>移除上一个视图，同时清除作用域</li>\n<li>关联当前模板</li>\n<li>如果路由中定义的controller则与当前作用域关联起来</li>\n<li>触发$viewContentLoaded</li>\n<li>调用onload指定的函数（如果有）</li>\n</ol>\n<p><strong>router的resolve属性，$injector会将声明的key添加进依赖，并能注入</strong></p>\n<p><strong>$location相当于window.location的封装，但只针对视图，不能针对全局浏览器窗口</strong></p>\n</li>\n<li><p>依赖注入</p>\n<ul>\n<li>对象通常过的其控制权的方式</li>\n<li>在内部创建依赖；</li>\n<li>通过全局变量进行引用；</li>\n<li>在需要的地方通过参数进行传递</li>\n</ul>\n<p>angular依赖注入使用$injector来管里依赖关系和实例化<br>包括模块，指令，控制器的注入<br>在运行时， 任何模块启动时$injector都会负责实例化，并将其需要的所有依赖传递进去</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>, [])</div><div class=\"line\">     .factory(<span class=\"string\">'greeter'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">         <span class=\"attr\">greet</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;alert(msg);&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;)</div><div class=\"line\">     .controller(<span class=\"string\">'MyController'</span>,</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, greeter</span>) </span>&#123;</div><div class=\"line\">         $scope.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">         greeter.greet(<span class=\"string\">\"Hello!\"</span>);</div><div class=\"line\">       &#125;;</div><div class=\"line\">     &#125;);</div><div class=\"line\">     </div><div class=\"line\">     <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"myApp\"</span>&gt;</span></span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"MyController\"</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"sayHello()\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span></span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"angular加载过程\"><a href=\"#angular加载过程\" class=\"headerlink\" title=\"angular加载过程\"></a>angular加载过程</h5><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span> 使用注入器加载应用</div><div class=\"line\">var injector = angular.injector([<span class=\"string\">'ng'</span>, <span class=\"string\">'myApp'</span>]);</div><div class=\"line\"><span class=\"regexp\">//</span> 通过注入器加载<span class=\"variable\">$controller</span>服务： var <span class=\"variable\">$controller</span> = injector.get(<span class=\"string\">'$controller'</span>);</div><div class=\"line\">var scope = injector.get(<span class=\"string\">'$rootScope'</span>).<span class=\"variable\">$new</span>();</div><div class=\"line\"><span class=\"regexp\">//</span> 加载控制器并传入一个作用域，同AngularJS在运行时做的一样</div><div class=\"line\">var MyController = <span class=\"variable\">$controller</span>(<span class=\"string\">'MyController'</span>, &#123;<span class=\"variable\">$scope</span>: scope&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>angular通过<strong>annotate</strong>函数将greeter从参数列表中提取出来<br>如果没有加[]进行显式的声明，那么ng就会通过参数来获取依赖关系</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">injector.annotate(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($q, myService)</span></span>&#123; &#125;)</div><div class=\"line\"><span class=\"comment\">// annotate会返回被注入目标中的服务的名称，从而进行匹配</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>injector.invoke(func($q)) 调用方法, fn.apply(self, args)<br>将参数列表转化成实例后的函数在进行调用<br>大概如此：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fucker</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.getFucker = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'motherfucker'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invoke</span>(<span class=\"params\">fn, self</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 一般是['dep1', 'dep2', func]</span></div><div class=\"line\">  <span class=\"comment\">// 会找寻依赖对应的参数函数并通过方法将其实例化</span></div><div class=\"line\">  <span class=\"comment\">// 调用func</span></div><div class=\"line\">  fn.apply(self, [<span class=\"keyword\">new</span> Fucker()])</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">invoke(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fucker</span>) </span>&#123;</div><div class=\"line\">  fucker.getFucker() <span class=\"comment\">// motherfucker</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>分析ng-include为什么会导致无法正常双向绑定</p>\n<ul>\n<li>ng-include指令会生成一个作用域 (child)</li>\n<li>ng-include父节点的作用域（parent）</li>\n<li>parent.flag = “test” 根据原型继承原理 child.<em>proto</em>.flag = “test”</li>\n<li>当parent.flag变成”dev” 则child.<em>proto</em>.flag = “dev”</li>\n<li>如果child.flag = “product” 则 child.flag 与 parent.flag 失去联系</li>\n<li>解决这种问题需要，将要传递的属性变为对象形式<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">  function Parent() &#123;</div><div class=\"line\">    this<span class=\"selector-class\">.face</span> = <span class=\"string\">\"哈哈\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  Parent<span class=\"selector-class\">.prototype</span> = &#123;</div><div class=\"line\">    constructor: Parent,</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"variable\">$new</span>: function () &#123;</div><div class=\"line\">      <span class=\"selector-tag\">var</span> child</div><div class=\"line\">  </div><div class=\"line\">      this.$<span class=\"variable\">$childScope</span> = function () &#123;</div><div class=\"line\">        this.<span class=\"variable\">$id</span> = <span class=\"number\">112212</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      this.$<span class=\"variable\">$childScope</span><span class=\"selector-class\">.prototype</span> = this</div><div class=\"line\">      child = new this.$<span class=\"variable\">$childScope</span>()</div><div class=\"line\">  </div><div class=\"line\">      return child</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-tag\">var</span> parentScope = new Parent()</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"selector-tag\">var</span> childScope = parentScope.<span class=\"variable\">$new</span>()</div><div class=\"line\">  </div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">) <span class=\"comment\">// [\"哈哈\", \"哈哈\"] [\"哈哈\", \"哈哈\"]</span></div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">parentScope<span class=\"selector-class\">.face</span> = <span class=\"string\">\"test\"</span></div><div class=\"line\">parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span> = <span class=\"string\">\"test\"</span></div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">) <span class=\"comment\">// [\"test\", \"test\"] [\"test\", \"test\"]</span></div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">childScope<span class=\"selector-class\">.face</span> = <span class=\"string\">\"我是谁\"</span></div><div class=\"line\">childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span> = <span class=\"string\">\"我是谁\"</span></div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">)<span class=\"comment\">// [\"test\", \"我是谁\"] [\"我是谁\", \"我是谁\"]</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>$scope生命周期</p>\n<ul>\n<li>创建</li>\n<li>创建控制器或指令时，angular会用<code>$injector</code>创建一个作用域，并在新建的控制器指令中将作用域传递进去<ul>\n<li><code>$scope</code>会通过<code>$new</code>创建通过原型与父级保持联系</li>\n</ul>\n</li>\n<li>链接</li>\n<li>用$watch将数据监听</li>\n<li>更新</li>\n<li>当$watch监听到变化，触发回调</li>\n<li>销毁</li>\n<li>视图不需要会销毁自己</li>\n</ul>\n</li>\n</ol>"},{"title":"es6版promise","date":"2017-04-18T02:34:21.000Z","_content":"\n## es6版Promise\n#### 用法\n```\n  new Promise(function(resolve, reject) {\n    resolve('resolve')\n  })\n    .then(function(result) {\n      console.log(result) // resolve\n    })\n```\n#### ``Promise``是一个构造函数，接受一个函数作为参数  \n  这个函数接受两个参数：  \n  (1) resolve 成功的时候返回的数据 （履行承诺）  \n  (2) reject 失败的时候返回的数据 （拒绝承诺）\n#### ``Promise``原型方法\n  (1) ``then``注册成功后的回调  \n  (2) ``catch``注册失败后的回调  \n<!-- more -->\n#### 上源代码——由于使用es6所以用babel，[点击看编译过的代码](https://github.com/slipkinem/jsTest/blob/master/promise/final/promise.dist.js)\n```\nclass util {\n  static isFunction(value) {\n    return typeof value === 'function'\n  }\n\n  static isArray(value) {\n    return Array.isArray(value)\n  }\n}\n\n/**\n * Promise\n * @constructor\n */\nclass Promise extends util {\n  constructor(executor) {\n    /**\n     * 继承绑定，作为context调用父类的constructor\n     */\n    super(executor)\n\n    if (!Promise.isFunction(executor)) throw new TypeError('参数必须是一个函数')\n    /**\n     * @description\n     * 状态分为 PENDING  可以过度到RESOLVED或REJECTED\n     *        RESOLVED\n     *        REJECTED\n     * @type {string}\n     * @private\n     */\n    this._status = 'PENDING'\n    /**\n     * 正确值\n     * @type {Object}\n     * @private\n     */\n    this._value = Object.create(null)\n    /**\n     * 错误值\n     * @type {Object}\n     * @private\n     */\n    this._reason = Object.create(null)\n    /**\n     * 储存错误回调\n     * @type {Array}\n     * @private\n     */\n    this._rejecteds = []\n    /**\n     * 正确回调的方法集 \n     * @type {Array}\n     * @private\n     */\n    this._deferreds = []\n    /**\n     * 在class中 constructor里面的函数无法直接访问this\n     * 为了形成private，所以不放外面\n     * @type {Promise}\n     * @private\n     */\n    let _this = this\n\n    /**\n     * 执行承诺的函数\n     * @param value\n     */\n    function resolve(value) {\n      /**\n       * 异步，为了让then先执行，注册进回调\n       */\n      setTimeout(() => {\n        try {\n          if (_this._status === 'PENDING') {\n            _this._status = 'RESOLVED'\n            _this._value = value\n            /**\n             * 循环执行所有的回调\n             */\n            _this._deferreds.forEach((deferred) => {\n              deferred(value)\n            })\n\n          }\n        } catch (e) {\n          reject(e)\n        }\n\n      })\n    }\n\n    function reject(reason) {\n      setTimeout(() => {\n        try {\n          if (_this._status === 'PENDING') {\n            _this._status = 'REJECTED'\n            _this._reason = reason\n\n            _this._rejecteds.forEach((rejected) => {\n              rejected(reason)\n            })\n          }\n        } catch (e) {\n          reject(e)\n        }\n      })\n    }\n\n    try {\n      executor(resolve, reject)\n    } catch (e) {\n      reject(e)\n    }\n\n  }\n\n  /**\n   * resolve方法\n   * @example Promise.resolve('test').then(function(result){ result // test })\n   * @param value\n   * @returns {Promise}\n   */\n  static resolve(value) {\n    return new Promise((resolve, reject) => {\n      resolve(value)\n    })\n  }\n\n  /**\n   * all方法 当需要许多promise一起执行的时候用，最后返回一个存有所有promise返回值的数组\n   * 当一个promise reject掉了，认为此all方法执行失败，进入reject\n   * @param promises\n   * @returns {Promise}\n   */\n  static all(promises) {\n    if (!Promise.isArray(promises)) throw new TypeError('promises 必须是一个数组')\n\n    /**\n     * 返回一个Promise\n     */\n    return new Promise((resolve, reject) => {\n      let result = [],\n        len = promises.length\n\n      /**\n       * 将所有的返回值存储起来\n       * @param value\n       */\n      function resolveAll(value) {\n        result.push(value)\n\n        if (--len === 0) {\n          resolve(result)\n        }\n      }\n\n      promises.forEach(function (promise) {\n        /**\n         * 将成功后的加入result数组\n         * 一旦有一个失败，则直接返回失败\n         */\n        promise.then(resolveAll, reject)\n      })\n\n    })\n  }\n\n  /**\n   * 方便使用，封装catch方法\n   * @param onRejected\n   */\n  catch(onRejected) {\n    this.then(null, onRejected)\n  }\n\n  /**\n   * 重点方法，then\n   * @param onFulfilled\n   * @param onRejected\n   * @returns {Promise}\n   */\n  then(onFulfilled, onRejected) {\n    /**\n     * 每次执行then都会返回一个promise供链式调用\n     */\n    return new Promise((resolve, reject) => {\n      let returnedValue = Object.create(null)\n      /**\n       * 如果是RESOLVED状态说明执行了过resolve函数，this.value是有值的\n       * e.g. Promise.resolve('resolve').then(function(result){})\n       * 最主要看onFulfilled返回值是什么\n       */\n      /**\n       * _RESOLVED\n       * @param value\n       * @private\n       */\n      function _RESOLVED(value) {\n        /**\n         * 取得onFulfilled的返回值，判断是否返回一个promise\n         * 回调方式的then\n         * @example\n         * new Promise(function(resolve, reject){\n         *  resolve('test')\n         * })\n         *  .then(function(result){\n         *    return new Promise(function(resolve, reject){\n         *      resolve(result + 'test')\n         *    })\n         *      .then()\n         *  })\n         */\n        returnedValue = Promise.isFunction(onFulfilled) && onFulfilled(value) || value\n\n        try {\n          if (returnedValue && returnedValue instanceof Promise) {\n            returnedValue.then((value) => {\n              resolve(value)\n            }, (reason) => {\n              reject(reason)\n            })\n          } else {\n            resolve(returnedValue)\n          }\n\n        } catch (e) {\n          reject(e)\n        }\n      }\n\n      /**\n       * 失败的错误\n       * @param reason\n       * @private\n       */\n      function _REJECTED(reason) {\n        returnedValue = Promise.isFunction(onRejected) && onRejected(reason) || reason\n\n        reject(returnedValue)\n      }\n\n      /**\n       * 直接调用resolve的情况\n       * @example\n       * Promise.resolve('test')\n       *  .then(function() {})\n       */\n\n      if (this._status === 'RESOLVED') {\n        _RESOLVED(this._value)\n\n      } else if (this._status === 'REJECTED') {\n        _REJECTED(this._reason)\n\n      } else if (this._status === 'PENDING') {\n        /**\n         * e.g. new Promise().then(function(result){})\n         */\n        this._deferreds.push(_RESOLVED)\n\n        this._rejecteds.push(_REJECTED)\n      }\n\n    })\n\n  }\n\n}\n/**\n * 将类返回，外面用babel编译\n * @type {Promise}\n */\nmodule.exports = Promise\n```\n","source":"_posts/2017/04/es6版promise.md","raw":"---\ntitle: es6版promise\ncategories: 小轮子\ndate: 2017-04-18 10:34:21\ntags: \n  - javascript\n  - es6\n  - promise\n---\n\n## es6版Promise\n#### 用法\n```\n  new Promise(function(resolve, reject) {\n    resolve('resolve')\n  })\n    .then(function(result) {\n      console.log(result) // resolve\n    })\n```\n#### ``Promise``是一个构造函数，接受一个函数作为参数  \n  这个函数接受两个参数：  \n  (1) resolve 成功的时候返回的数据 （履行承诺）  \n  (2) reject 失败的时候返回的数据 （拒绝承诺）\n#### ``Promise``原型方法\n  (1) ``then``注册成功后的回调  \n  (2) ``catch``注册失败后的回调  \n<!-- more -->\n#### 上源代码——由于使用es6所以用babel，[点击看编译过的代码](https://github.com/slipkinem/jsTest/blob/master/promise/final/promise.dist.js)\n```\nclass util {\n  static isFunction(value) {\n    return typeof value === 'function'\n  }\n\n  static isArray(value) {\n    return Array.isArray(value)\n  }\n}\n\n/**\n * Promise\n * @constructor\n */\nclass Promise extends util {\n  constructor(executor) {\n    /**\n     * 继承绑定，作为context调用父类的constructor\n     */\n    super(executor)\n\n    if (!Promise.isFunction(executor)) throw new TypeError('参数必须是一个函数')\n    /**\n     * @description\n     * 状态分为 PENDING  可以过度到RESOLVED或REJECTED\n     *        RESOLVED\n     *        REJECTED\n     * @type {string}\n     * @private\n     */\n    this._status = 'PENDING'\n    /**\n     * 正确值\n     * @type {Object}\n     * @private\n     */\n    this._value = Object.create(null)\n    /**\n     * 错误值\n     * @type {Object}\n     * @private\n     */\n    this._reason = Object.create(null)\n    /**\n     * 储存错误回调\n     * @type {Array}\n     * @private\n     */\n    this._rejecteds = []\n    /**\n     * 正确回调的方法集 \n     * @type {Array}\n     * @private\n     */\n    this._deferreds = []\n    /**\n     * 在class中 constructor里面的函数无法直接访问this\n     * 为了形成private，所以不放外面\n     * @type {Promise}\n     * @private\n     */\n    let _this = this\n\n    /**\n     * 执行承诺的函数\n     * @param value\n     */\n    function resolve(value) {\n      /**\n       * 异步，为了让then先执行，注册进回调\n       */\n      setTimeout(() => {\n        try {\n          if (_this._status === 'PENDING') {\n            _this._status = 'RESOLVED'\n            _this._value = value\n            /**\n             * 循环执行所有的回调\n             */\n            _this._deferreds.forEach((deferred) => {\n              deferred(value)\n            })\n\n          }\n        } catch (e) {\n          reject(e)\n        }\n\n      })\n    }\n\n    function reject(reason) {\n      setTimeout(() => {\n        try {\n          if (_this._status === 'PENDING') {\n            _this._status = 'REJECTED'\n            _this._reason = reason\n\n            _this._rejecteds.forEach((rejected) => {\n              rejected(reason)\n            })\n          }\n        } catch (e) {\n          reject(e)\n        }\n      })\n    }\n\n    try {\n      executor(resolve, reject)\n    } catch (e) {\n      reject(e)\n    }\n\n  }\n\n  /**\n   * resolve方法\n   * @example Promise.resolve('test').then(function(result){ result // test })\n   * @param value\n   * @returns {Promise}\n   */\n  static resolve(value) {\n    return new Promise((resolve, reject) => {\n      resolve(value)\n    })\n  }\n\n  /**\n   * all方法 当需要许多promise一起执行的时候用，最后返回一个存有所有promise返回值的数组\n   * 当一个promise reject掉了，认为此all方法执行失败，进入reject\n   * @param promises\n   * @returns {Promise}\n   */\n  static all(promises) {\n    if (!Promise.isArray(promises)) throw new TypeError('promises 必须是一个数组')\n\n    /**\n     * 返回一个Promise\n     */\n    return new Promise((resolve, reject) => {\n      let result = [],\n        len = promises.length\n\n      /**\n       * 将所有的返回值存储起来\n       * @param value\n       */\n      function resolveAll(value) {\n        result.push(value)\n\n        if (--len === 0) {\n          resolve(result)\n        }\n      }\n\n      promises.forEach(function (promise) {\n        /**\n         * 将成功后的加入result数组\n         * 一旦有一个失败，则直接返回失败\n         */\n        promise.then(resolveAll, reject)\n      })\n\n    })\n  }\n\n  /**\n   * 方便使用，封装catch方法\n   * @param onRejected\n   */\n  catch(onRejected) {\n    this.then(null, onRejected)\n  }\n\n  /**\n   * 重点方法，then\n   * @param onFulfilled\n   * @param onRejected\n   * @returns {Promise}\n   */\n  then(onFulfilled, onRejected) {\n    /**\n     * 每次执行then都会返回一个promise供链式调用\n     */\n    return new Promise((resolve, reject) => {\n      let returnedValue = Object.create(null)\n      /**\n       * 如果是RESOLVED状态说明执行了过resolve函数，this.value是有值的\n       * e.g. Promise.resolve('resolve').then(function(result){})\n       * 最主要看onFulfilled返回值是什么\n       */\n      /**\n       * _RESOLVED\n       * @param value\n       * @private\n       */\n      function _RESOLVED(value) {\n        /**\n         * 取得onFulfilled的返回值，判断是否返回一个promise\n         * 回调方式的then\n         * @example\n         * new Promise(function(resolve, reject){\n         *  resolve('test')\n         * })\n         *  .then(function(result){\n         *    return new Promise(function(resolve, reject){\n         *      resolve(result + 'test')\n         *    })\n         *      .then()\n         *  })\n         */\n        returnedValue = Promise.isFunction(onFulfilled) && onFulfilled(value) || value\n\n        try {\n          if (returnedValue && returnedValue instanceof Promise) {\n            returnedValue.then((value) => {\n              resolve(value)\n            }, (reason) => {\n              reject(reason)\n            })\n          } else {\n            resolve(returnedValue)\n          }\n\n        } catch (e) {\n          reject(e)\n        }\n      }\n\n      /**\n       * 失败的错误\n       * @param reason\n       * @private\n       */\n      function _REJECTED(reason) {\n        returnedValue = Promise.isFunction(onRejected) && onRejected(reason) || reason\n\n        reject(returnedValue)\n      }\n\n      /**\n       * 直接调用resolve的情况\n       * @example\n       * Promise.resolve('test')\n       *  .then(function() {})\n       */\n\n      if (this._status === 'RESOLVED') {\n        _RESOLVED(this._value)\n\n      } else if (this._status === 'REJECTED') {\n        _REJECTED(this._reason)\n\n      } else if (this._status === 'PENDING') {\n        /**\n         * e.g. new Promise().then(function(result){})\n         */\n        this._deferreds.push(_RESOLVED)\n\n        this._rejecteds.push(_REJECTED)\n      }\n\n    })\n\n  }\n\n}\n/**\n * 将类返回，外面用babel编译\n * @type {Promise}\n */\nmodule.exports = Promise\n```\n","slug":"es6版promise","published":1,"updated":"2017-08-22T05:47:32.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqqj0006r4v31jm31mql","content":"<h2 id=\"es6版Promise\"><a href=\"#es6版Promise\" class=\"headerlink\" title=\"es6版Promise\"></a>es6版Promise</h2><h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  resolve(<span class=\"string\">'resolve'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// resolve</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"Promise是一个构造函数，接受一个函数作为参数\"><a href=\"#Promise是一个构造函数，接受一个函数作为参数\" class=\"headerlink\" title=\"Promise是一个构造函数，接受一个函数作为参数\"></a><code>Promise</code>是一个构造函数，接受一个函数作为参数</h4><p>  这个函数接受两个参数：<br>  (1) resolve 成功的时候返回的数据 （履行承诺）<br>  (2) reject 失败的时候返回的数据 （拒绝承诺）</p>\n<h4 id=\"Promise原型方法\"><a href=\"#Promise原型方法\" class=\"headerlink\" title=\"Promise原型方法\"></a><code>Promise</code>原型方法</h4><p>  (1) <code>then</code>注册成功后的回调<br>  (2) <code>catch</code>注册失败后的回调<br><a id=\"more\"></a></p>\n<h4 id=\"上源代码——由于使用es6所以用babel，点击看编译过的代码\"><a href=\"#上源代码——由于使用es6所以用babel，点击看编译过的代码\" class=\"headerlink\" title=\"上源代码——由于使用es6所以用babel，点击看编译过的代码\"></a>上源代码——由于使用es6所以用babel，<a href=\"https://github.com/slipkinem/jsTest/blob/master/promise/final/promise.dist.js\" target=\"_blank\" rel=\"external\">点击看编译过的代码</a></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">util</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">static</span> isFunction(value) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> value === <span class=\"string\">'function'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">static</span> isArray(value) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(value)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Promise</div><div class=\"line\"> * @constructor</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> <span class=\"keyword\">extends</span> <span class=\"title\">util</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(executor) &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 继承绑定，作为context调用父类的constructor</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">super</span>(executor)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">Promise</span>.isFunction(executor)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'参数必须是一个函数'</span>)</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * @description</div><div class=\"line\">     * 状态分为 PENDING  可以过度到RESOLVED或REJECTED</div><div class=\"line\">     *        RESOLVED</div><div class=\"line\">     *        REJECTED</div><div class=\"line\">     * @type &#123;string&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">this</span>._status = <span class=\"string\">'PENDING'</span></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 正确值</div><div class=\"line\">     * @type &#123;Object&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">this</span>._value = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 错误值</div><div class=\"line\">     * @type &#123;Object&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">this</span>._reason = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 储存错误回调</div><div class=\"line\">     * @type &#123;Array&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">this</span>._rejecteds = []</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 正确回调的方法集 </div><div class=\"line\">     * @type &#123;Array&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">this</span>._deferreds = []</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 在class中 constructor里面的函数无法直接访问this</div><div class=\"line\">     * 为了形成private，所以不放外面</div><div class=\"line\">     * @type &#123;Promise&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 执行承诺的函数</div><div class=\"line\">     * @param value</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\">       * 异步，为了让then先执行，注册进回调</div><div class=\"line\">       */</div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (_this._status === <span class=\"string\">'PENDING'</span>) &#123;</div><div class=\"line\">            _this._status = <span class=\"string\">'RESOLVED'</span></div><div class=\"line\">            _this._value = value</div><div class=\"line\">            <span class=\"comment\">/**</span></div><div class=\"line\">             * 循环执行所有的回调</div><div class=\"line\">             */</div><div class=\"line\">            _this._deferreds.forEach(<span class=\"function\">(<span class=\"params\">deferred</span>) =&gt;</span> &#123;</div><div class=\"line\">              deferred(value)</div><div class=\"line\">            &#125;)</div><div class=\"line\"></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (_this._status === <span class=\"string\">'PENDING'</span>) &#123;</div><div class=\"line\">            _this._status = <span class=\"string\">'REJECTED'</span></div><div class=\"line\">            _this._reason = reason</div><div class=\"line\"></div><div class=\"line\">            _this._rejecteds.forEach(<span class=\"function\">(<span class=\"params\">rejected</span>) =&gt;</span> &#123;</div><div class=\"line\">              rejected(reason)</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      executor(resolve, reject)</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">      reject(e)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * resolve方法</div><div class=\"line\">   * @example Promise.resolve('test').then(function(result)&#123; result // test &#125;)</div><div class=\"line\">   * @param value</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">static</span> resolve(value) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">      resolve(value)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * all方法 当需要许多promise一起执行的时候用，最后返回一个存有所有promise返回值的数组</div><div class=\"line\">   * 当一个promise reject掉了，认为此all方法执行失败，进入reject</div><div class=\"line\">   * @param promises</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">static</span> all(promises) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">Promise</span>.isArray(promises)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'promises 必须是一个数组'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 返回一个Promise</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> result = [],</div><div class=\"line\">        len = promises.length</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\">       * 将所有的返回值存储起来</div><div class=\"line\">       * @param value</div><div class=\"line\">       */</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolveAll</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        result.push(value)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (--len === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          resolve(result)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      promises.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">promise</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 将成功后的加入result数组</div><div class=\"line\">         * 一旦有一个失败，则直接返回失败</div><div class=\"line\">         */</div><div class=\"line\">        promise.then(resolveAll, reject)</div><div class=\"line\">      &#125;)</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 方便使用，封装catch方法</div><div class=\"line\">   * @param onRejected</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">catch</span>(onRejected) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, onRejected)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 重点方法，then</div><div class=\"line\">   * @param onFulfilled</div><div class=\"line\">   * @param onRejected</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  then(onFulfilled, onRejected) &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 每次执行then都会返回一个promise供链式调用</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> returnedValue = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\">       * 如果是RESOLVED状态说明执行了过resolve函数，this.value是有值的</div><div class=\"line\">       * e.g. Promise.resolve('resolve').then(function(result)&#123;&#125;)</div><div class=\"line\">       * 最主要看onFulfilled返回值是什么</div><div class=\"line\">       */</div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\">       * _RESOLVED</div><div class=\"line\">       * @param value</div><div class=\"line\">       * @private</div><div class=\"line\">       */</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_RESOLVED</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 取得onFulfilled的返回值，判断是否返回一个promise</div><div class=\"line\">         * 回调方式的then</div><div class=\"line\">         * @example</div><div class=\"line\">         * new Promise(function(resolve, reject)&#123;</div><div class=\"line\">         *  resolve('test')</div><div class=\"line\">         * &#125;)</div><div class=\"line\">         *  .then(function(result)&#123;</div><div class=\"line\">         *    return new Promise(function(resolve, reject)&#123;</div><div class=\"line\">         *      resolve(result + 'test')</div><div class=\"line\">         *    &#125;)</div><div class=\"line\">         *      .then()</div><div class=\"line\">         *  &#125;)</div><div class=\"line\">         */</div><div class=\"line\">        returnedValue = <span class=\"built_in\">Promise</span>.isFunction(onFulfilled) &amp;&amp; onFulfilled(value) || value</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (returnedValue &amp;&amp; returnedValue <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</div><div class=\"line\">            returnedValue.then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</div><div class=\"line\">              resolve(value)</div><div class=\"line\">            &#125;, (reason) =&gt; &#123;</div><div class=\"line\">              reject(reason)</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            resolve(returnedValue)</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\">       * 失败的错误</div><div class=\"line\">       * @param reason</div><div class=\"line\">       * @private</div><div class=\"line\">       */</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_REJECTED</span>(<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">        returnedValue = <span class=\"built_in\">Promise</span>.isFunction(onRejected) &amp;&amp; onRejected(reason) || reason</div><div class=\"line\"></div><div class=\"line\">        reject(returnedValue)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\">       * 直接调用resolve的情况</div><div class=\"line\">       * @example</div><div class=\"line\">       * Promise.resolve('test')</div><div class=\"line\">       *  .then(function() &#123;&#125;)</div><div class=\"line\">       */</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._status === <span class=\"string\">'RESOLVED'</span>) &#123;</div><div class=\"line\">        _RESOLVED(<span class=\"keyword\">this</span>._value)</div><div class=\"line\"></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._status === <span class=\"string\">'REJECTED'</span>) &#123;</div><div class=\"line\">        _REJECTED(<span class=\"keyword\">this</span>._reason)</div><div class=\"line\"></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._status === <span class=\"string\">'PENDING'</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * e.g. new Promise().then(function(result)&#123;&#125;)</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">this</span>._deferreds.push(_RESOLVED)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>._rejecteds.push(_REJECTED)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 将类返回，外面用babel编译</div><div class=\"line\"> * @type &#123;Promise&#125;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Promise</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"es6版Promise\"><a href=\"#es6版Promise\" class=\"headerlink\" title=\"es6版Promise\"></a>es6版Promise</h2><h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  resolve(<span class=\"string\">'resolve'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// resolve</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"Promise是一个构造函数，接受一个函数作为参数\"><a href=\"#Promise是一个构造函数，接受一个函数作为参数\" class=\"headerlink\" title=\"Promise是一个构造函数，接受一个函数作为参数\"></a><code>Promise</code>是一个构造函数，接受一个函数作为参数</h4><p>  这个函数接受两个参数：<br>  (1) resolve 成功的时候返回的数据 （履行承诺）<br>  (2) reject 失败的时候返回的数据 （拒绝承诺）</p>\n<h4 id=\"Promise原型方法\"><a href=\"#Promise原型方法\" class=\"headerlink\" title=\"Promise原型方法\"></a><code>Promise</code>原型方法</h4><p>  (1) <code>then</code>注册成功后的回调<br>  (2) <code>catch</code>注册失败后的回调<br></p>","more":"<p></p>\n<h4 id=\"上源代码——由于使用es6所以用babel，点击看编译过的代码\"><a href=\"#上源代码——由于使用es6所以用babel，点击看编译过的代码\" class=\"headerlink\" title=\"上源代码——由于使用es6所以用babel，点击看编译过的代码\"></a>上源代码——由于使用es6所以用babel，<a href=\"https://github.com/slipkinem/jsTest/blob/master/promise/final/promise.dist.js\">点击看编译过的代码</a></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">util</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">static</span> isFunction(value) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> value === <span class=\"string\">'function'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">static</span> isArray(value) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(value)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Promise</div><div class=\"line\"> * @constructor</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> <span class=\"keyword\">extends</span> <span class=\"title\">util</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(executor) &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 继承绑定，作为context调用父类的constructor</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">super</span>(executor)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">Promise</span>.isFunction(executor)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'参数必须是一个函数'</span>)</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * @description</div><div class=\"line\">     * 状态分为 PENDING  可以过度到RESOLVED或REJECTED</div><div class=\"line\">     *        RESOLVED</div><div class=\"line\">     *        REJECTED</div><div class=\"line\">     * @type &#123;string&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">this</span>._status = <span class=\"string\">'PENDING'</span></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 正确值</div><div class=\"line\">     * @type &#123;Object&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">this</span>._value = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 错误值</div><div class=\"line\">     * @type &#123;Object&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">this</span>._reason = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 储存错误回调</div><div class=\"line\">     * @type &#123;Array&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">this</span>._rejecteds = []</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 正确回调的方法集 </div><div class=\"line\">     * @type &#123;Array&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">this</span>._deferreds = []</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 在class中 constructor里面的函数无法直接访问this</div><div class=\"line\">     * 为了形成private，所以不放外面</div><div class=\"line\">     * @type &#123;Promise&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 执行承诺的函数</div><div class=\"line\">     * @param value</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\">       * 异步，为了让then先执行，注册进回调</div><div class=\"line\">       */</div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (_this._status === <span class=\"string\">'PENDING'</span>) &#123;</div><div class=\"line\">            _this._status = <span class=\"string\">'RESOLVED'</span></div><div class=\"line\">            _this._value = value</div><div class=\"line\">            <span class=\"comment\">/**</span></div><div class=\"line\">             * 循环执行所有的回调</div><div class=\"line\">             */</div><div class=\"line\">            _this._deferreds.forEach(<span class=\"function\">(<span class=\"params\">deferred</span>) =&gt;</span> &#123;</div><div class=\"line\">              deferred(value)</div><div class=\"line\">            &#125;)</div><div class=\"line\"></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (_this._status === <span class=\"string\">'PENDING'</span>) &#123;</div><div class=\"line\">            _this._status = <span class=\"string\">'REJECTED'</span></div><div class=\"line\">            _this._reason = reason</div><div class=\"line\"></div><div class=\"line\">            _this._rejecteds.forEach(<span class=\"function\">(<span class=\"params\">rejected</span>) =&gt;</span> &#123;</div><div class=\"line\">              rejected(reason)</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      executor(resolve, reject)</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">      reject(e)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * resolve方法</div><div class=\"line\">   * @example Promise.resolve('test').then(function(result)&#123; result // test &#125;)</div><div class=\"line\">   * @param value</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">static</span> resolve(value) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">      resolve(value)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * all方法 当需要许多promise一起执行的时候用，最后返回一个存有所有promise返回值的数组</div><div class=\"line\">   * 当一个promise reject掉了，认为此all方法执行失败，进入reject</div><div class=\"line\">   * @param promises</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">static</span> all(promises) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">Promise</span>.isArray(promises)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'promises 必须是一个数组'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 返回一个Promise</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> result = [],</div><div class=\"line\">        len = promises.length</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\">       * 将所有的返回值存储起来</div><div class=\"line\">       * @param value</div><div class=\"line\">       */</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolveAll</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        result.push(value)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (--len === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          resolve(result)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      promises.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">promise</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 将成功后的加入result数组</div><div class=\"line\">         * 一旦有一个失败，则直接返回失败</div><div class=\"line\">         */</div><div class=\"line\">        promise.then(resolveAll, reject)</div><div class=\"line\">      &#125;)</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 方便使用，封装catch方法</div><div class=\"line\">   * @param onRejected</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">catch</span>(onRejected) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, onRejected)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 重点方法，then</div><div class=\"line\">   * @param onFulfilled</div><div class=\"line\">   * @param onRejected</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  then(onFulfilled, onRejected) &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 每次执行then都会返回一个promise供链式调用</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> returnedValue = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\">       * 如果是RESOLVED状态说明执行了过resolve函数，this.value是有值的</div><div class=\"line\">       * e.g. Promise.resolve('resolve').then(function(result)&#123;&#125;)</div><div class=\"line\">       * 最主要看onFulfilled返回值是什么</div><div class=\"line\">       */</div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\">       * _RESOLVED</div><div class=\"line\">       * @param value</div><div class=\"line\">       * @private</div><div class=\"line\">       */</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_RESOLVED</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 取得onFulfilled的返回值，判断是否返回一个promise</div><div class=\"line\">         * 回调方式的then</div><div class=\"line\">         * @example</div><div class=\"line\">         * new Promise(function(resolve, reject)&#123;</div><div class=\"line\">         *  resolve('test')</div><div class=\"line\">         * &#125;)</div><div class=\"line\">         *  .then(function(result)&#123;</div><div class=\"line\">         *    return new Promise(function(resolve, reject)&#123;</div><div class=\"line\">         *      resolve(result + 'test')</div><div class=\"line\">         *    &#125;)</div><div class=\"line\">         *      .then()</div><div class=\"line\">         *  &#125;)</div><div class=\"line\">         */</div><div class=\"line\">        returnedValue = <span class=\"built_in\">Promise</span>.isFunction(onFulfilled) &amp;&amp; onFulfilled(value) || value</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (returnedValue &amp;&amp; returnedValue <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</div><div class=\"line\">            returnedValue.then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</div><div class=\"line\">              resolve(value)</div><div class=\"line\">            &#125;, (reason) =&gt; &#123;</div><div class=\"line\">              reject(reason)</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            resolve(returnedValue)</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\">       * 失败的错误</div><div class=\"line\">       * @param reason</div><div class=\"line\">       * @private</div><div class=\"line\">       */</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_REJECTED</span>(<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">        returnedValue = <span class=\"built_in\">Promise</span>.isFunction(onRejected) &amp;&amp; onRejected(reason) || reason</div><div class=\"line\"></div><div class=\"line\">        reject(returnedValue)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\">       * 直接调用resolve的情况</div><div class=\"line\">       * @example</div><div class=\"line\">       * Promise.resolve('test')</div><div class=\"line\">       *  .then(function() &#123;&#125;)</div><div class=\"line\">       */</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._status === <span class=\"string\">'RESOLVED'</span>) &#123;</div><div class=\"line\">        _RESOLVED(<span class=\"keyword\">this</span>._value)</div><div class=\"line\"></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._status === <span class=\"string\">'REJECTED'</span>) &#123;</div><div class=\"line\">        _REJECTED(<span class=\"keyword\">this</span>._reason)</div><div class=\"line\"></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._status === <span class=\"string\">'PENDING'</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * e.g. new Promise().then(function(result)&#123;&#125;)</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">this</span>._deferreds.push(_RESOLVED)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>._rejecteds.push(_REJECTED)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 将类返回，外面用babel编译</div><div class=\"line\"> * @type &#123;Promise&#125;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Promise</span></div></pre></td></tr></table></figure>"},{"title":"java用jdbc，servelet的一个小问题","date":"2017-04-21T02:14:19.000Z","_content":"\n1. 在用jdbc连接数据库的时候碰见一个tomcat抛得错误，  \n``java.lang.ClassNotFoundException: com.mysql.jdbc.Driver`` ，  \n感觉不对，我已经在idea的Modules里面添加了mysql.jar的包，在测试的时候连接是正常的。  \n原来要将mysql驱动包复制到tomcat的lib文件夹。  \n2. 在连接驱动包的时候碰见这种写法``Class.forName(\"com.mysql.jdbc.Driver\")``  \n原来这种写法是注册mysql依赖包，等同于``DriverManager.registerDriver(new com.mysql.jdbc.Driver());``\n3. maven：为了让依赖好管理， mybatis：为了让DML更简单，spring：为了让servlet更好用","source":"_posts/2017/04/java用jdbc-servelet时的问题.md","raw":"---\ntitle: java用jdbc，servelet的一个小问题\ncategories: exception\ndate: 2017-04-21 10:14:19\ntags:\n  - java\n---\n\n1. 在用jdbc连接数据库的时候碰见一个tomcat抛得错误，  \n``java.lang.ClassNotFoundException: com.mysql.jdbc.Driver`` ，  \n感觉不对，我已经在idea的Modules里面添加了mysql.jar的包，在测试的时候连接是正常的。  \n原来要将mysql驱动包复制到tomcat的lib文件夹。  \n2. 在连接驱动包的时候碰见这种写法``Class.forName(\"com.mysql.jdbc.Driver\")``  \n原来这种写法是注册mysql依赖包，等同于``DriverManager.registerDriver(new com.mysql.jdbc.Driver());``\n3. maven：为了让依赖好管理， mybatis：为了让DML更简单，spring：为了让servlet更好用","slug":"java用jdbc-servelet时的问题","published":1,"updated":"2017-05-15T09:47:12.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqqn0008r4v31qvjjatz","content":"<ol>\n<li>在用jdbc连接数据库的时候碰见一个tomcat抛得错误，<br><code>java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</code> ，<br>感觉不对，我已经在idea的Modules里面添加了mysql.jar的包，在测试的时候连接是正常的。<br>原来要将mysql驱动包复制到tomcat的lib文件夹。  </li>\n<li>在连接驱动包的时候碰见这种写法<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code><br>原来这种写法是注册mysql依赖包，等同于<code>DriverManager.registerDriver(new com.mysql.jdbc.Driver());</code></li>\n<li>maven：为了让依赖好管理， mybatis：为了让DML更简单，spring：为了让servlet更好用</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>在用jdbc连接数据库的时候碰见一个tomcat抛得错误，<br><code>java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</code> ，<br>感觉不对，我已经在idea的Modules里面添加了mysql.jar的包，在测试的时候连接是正常的。<br>原来要将mysql驱动包复制到tomcat的lib文件夹。  </li>\n<li>在连接驱动包的时候碰见这种写法<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code><br>原来这种写法是注册mysql依赖包，等同于<code>DriverManager.registerDriver(new com.mysql.jdbc.Driver());</code></li>\n<li>maven：为了让依赖好管理， mybatis：为了让DML更简单，spring：为了让servlet更好用</li>\n</ol>\n"},{"title":"react-native进入姿势","date":"2017-04-22T03:34:51.000Z","_content":"## 开始战斗\n``准备学一点react，然后觉得不如直接学习react-native，就开始了react-native之路，从环境搭建到一个小DEMO，花了不少时间，主要是下载太麻烦``\n### 准备工作\n   1. ide: 我选择idea，习惯了\n   2. 电脑：win7的i5渣配置，所以先不打算进行ios开发\n   3. 没有vpn，宽带是交话费送的10M联通宽带，网速还行1m/s\n   4. 推荐给电脑安装**[wox](http://www.getwox.com/)和everything(wox插件就有)**，方便寻找文件\n\n## 环境搭建\n### node环境\n1. 下载安装**nodeJs**（最新的就行），为了防止环境变量有问题，不要修改安装目录\n2. 使用 node-v npm -v 看看有没有安装成功\n<!-- more -->\n3. 注册淘宝镜像 \n```$xslt\n> npm config set registry https://registry.npm.taobao.org --global\n> npm config set disturl https://npm.taobao.org/dist --global\n```\n\n4. 下载**yarn**，react-native默认使用yarn下载\n```$xslt\n  > npm i -g yarn\n  > yarn -v\n```\n\n5. 给**yarn**注册淘宝镜像\n```$xslt\n> yarn config set registry https://registry.npm.taobao.org --global\n> yarn config set disturl https://npm.taobao.org/dist --global \n```\n\n### react-native安装\n  1. 使用yarn下载react-native-cli\n```$xslt\n> yarn global add react-native-cli\n> react-native --version\n```\n\n  2. 创建项目,一直等待下载完成，生成的目录还是很清晰的\n```$xslt\n> yarn-native init rnDemo \n```\n\n  ![directory](directory.jpg)\n  3. 试着运行项目\n```git\n> cd rnDemo\n> npm start\n```\n\n   命令行显示，8081端口开启服务。在浏览器输入[localhost:8081](localhost:8081),显示``React Native packager is running.``，说明服务还是通畅的。可咱们要做安卓项目！所以继续使用命令行\n```$xslt\n> react-native run-android\n```\n\n   不出意外会挺慢，因为要下载gradle（gradle是安卓项目常用的构建工具，用来管理jar包和执行任务）和jar包，命令行会提示在此url下载文件``Download https://jcenter.bintray.com/com/android/tools/annotations/25.2.3/annotations-25.2.3.jar``\n  4. 因为网络的问题，所以给gradle配置阿里云maven（java常用的包管理工具，有一个下载的仓库，但很慢）镜像。进入**.gradle**文件夹，一般在``C:\\Users\\Administrator\\.gradle``，使用wox就简单多了\n    ![wox](wox.jpg)  \n  在 **.gradle** 文件夹里面新建 **init.gradle** 文件，并写入下面代码，或[点击下载init.gradle](init.gradle)\n```groovy\nallprojects{\n    repositories {\n        def REPOSITORY_URL = 'http://maven.aliyun.com/nexus/content/groups/public/'\n        all { ArtifactRepository repo ->\n            if(repo instanceof MavenArtifactRepository){\n                def url = repo.url.toString()\n                if (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com/')) {\n                    project.logger.lifecycle \"Repository ${repo.url} replaced by $REPOSITORY_URL.\"\n                    remove repo\n                }\n            }\n        }\n        maven {\n            url REPOSITORY_URL\n        }\n    }\n}\n```\n\n  5. 继续运行命令``react-native run-android``\n```git\n> react-native run-android\n```\n\n可以看到下载速度快了好多，但最后会发现报错``SDK location not found``，这是因为没有安装 **android sdk** ，接下来配置 **android环境**\n\n### android开发环境配置\n1. 安装java环境，搜一下有N多教程\n2. 下载**android studio** 没有翻墙的话推荐使用[网盘下载](https://pan.baidu.com/s/1jIyKHjK)\n3. 安装**android studio** 推荐使用默认安装一直点击``next``  \n4. 第一次启动会进入下面界面\n![androids](androids.jpg)\n  * standard 标准配置，推荐第一次安装使用能够\n  * custom 选择安装， 可以自己定制安装选项  \n由于是第一此安装就直接选用默认的**standard**安装，但是react-native官网推荐custom\n4. 记得勾选**Android Virtual Device**，一直**next**，最后点击**finished**等待下载完成\n  ![avd](avd.jpg)\n  \n### 环境变量\n在电脑环境变量设置里面，点击新建，ANDROID_HOME sdk路径\n![ANDROID_HOME](android_home.jpg)  \n然后再到环境变量 **path** 里面添加类似这样  \n``C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\tools``  \n``C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\platform-tools``  \n一定注意路径的正确性  \n![tools](tools.jpg)\n\n### 再次运行\n1. 运行``react-native run-android``\n```git\n> react-native run-android\n```\n\n又提示报错关于 ``[Android SDK Platform 23, Android SDK Build-Tools 23.0.1].``， 这是由于少了build-tools 23.0.1, 在sdk manager里面安装就行了  \n![snap3555](snap3555.jpg)  \n![snap3556](snap3556.jpg)  \n点击**finished**\n\n2. 运行``react-native run-android``\n```git\n> react-native run-android\n```\n提示报错`` com.android.builder.testing.api.DeviceException: No connected devices!``, 由于没连上设备导致的错误\n\n### 连接设备\nadb（连接devices的驱动）可以通过模拟器和真机进行，android studio带的模拟器不怎么好用，所以我选择用强大的**genymotion**进行开发\n\n#### 下载genymotion免费版并启动\n1. 下载并安装[genymotion免费版](https://pan.baidu.com/share/link?shareid=3943454172&uk=3073382768#list/path=%2F),替换安装目录文件就免费了\n2. 由于**genymotion**依赖virtualbox，下载安装[virtualbox](https://www.baidu.com/s?ie=utf-8&f=3&rsv_bp=1&rsv_idx=1&tn=baidu&wd=virtualbox&oq=genymotion%25E7%25A0%25B4%25E8%25A7%25A3%25E7%2589%2588&rsv_pq=e656eb5a0011ec27&rsv_t=715efDZI0lJ%2B1tsmUpCuiiAat7RfExGnvVtlkSWbKVbC%2BS9zwTu7ku7rueA&rqlang=cn&rsv_enter=1&inputT=1128&rsv_sug3=8&rsv_sug1=8&rsv_sug7=100&bs=genymotion%E7%A0%B4%E8%A7%A3%E7%89%88)就行了\n3. 以上安装好之后打开**genymotion**，根据提示添加一个设备并运行该安卓模拟器\n![gen](gen.jpg)\n4. 安装完毕，选择一个添加好的虚拟机，并启动。 糟糕，不知什么原因报错了。\n![err](err.jpg)  \n``碰到这种报错不用怕，打开virtualBox，直接启动安装好的虚拟机。``\n![verr](verr.jpg)  \n``可以看出来是virtualBox的配置有错误，那就打开配置信息 `` \n![configerr](configerr.jpg)  \n``跟随黄色提示配置好virtualBox,继续启动在genymotion里面添加的设备，完美! `` \n![success](success.jpg)  \n5. 在genymotion里面配置sdk路径\n![sdk](sdk.png)\n6. 如果还是提示连接不上设备，就用adb连接一下\n```$xslt\n> adb devices\n> adb connect 127.0.0.1\n> adb devices\n```\n\n## 开始开发\n\n1. 各种配置都设置好了，继续运行``react-native run-android``\n2. 尼玛又是error,这次明显的看出提示没有连接上js Service,得手动连接了    \n![netErr](netErr.jpg)  \n``点击菜单 -> Dev Setting -> Debug server host``\n![dev](dev.jpg)  \n![host](host.jpg)    \n``然后返回，reload一下``\n![reload](reload.jpg)  \n``出现成功界面，可以愉快的开发了``  \n![devSuccess](devSuccess.jpg)  \n**注意：在菜单里面点击 Enable Hot Reloading，这样就可以保存后实时刷新了**\n\n### 正式开发，就写一个简单的底部导航路由\n用到底部导航package [react-native-tab-navigator](https://github.com/expo/react-native-tab-navigator)\n```bash\n> yarn add react-native-tab-navigator\n```\n\n修改``index.android.js``,给入口少搁点东西，不然看着恶心\n```js\nimport React, { Component } from 'react';\nimport {\n  AppRegistry\n} from 'react-native';\n\nimport RootApp from './app/RootApp'\n\nAppRegistry.registerComponent('rnDemo', () => RootApp); // rnDemo是项目的名称\n```\n\n在根目录新建文件夹app，在app里面新建 RootApp.js、components/Home.js、components/Nice.js  \n\napp/RootApp.js\n```js\nimport React, {Component} from 'react'\nimport {\n  View,\n  StyleSheet\n} from 'react-native'\nimport TabNavigator from 'react-native-tab-navigator'\nimport Home from './components/Home'\nimport Nice from './components/Nice'\nimport TabNavigatorItem from \"react-native-tab-navigator/TabNavigatorItem\";\n\nexport default class RootApp extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedTab: 'home'\n    }\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <TabNavigator>\n          <TabNavigatorItem\n            title=\"Home\"\n            onPress={() => this.setState({selectedTab: 'home'})}\n            selected={this.state.selectedTab === 'home'}>\n            <Home/>\n          </TabNavigatorItem>\n          <TabNavigatorItem\n            title=\"Nice\"\n            onPress={() => this.setState({selectedTab: 'nice'})}\n            selected={this.state.selectedTab === 'nice'}>\n            <Nice/>\n          </TabNavigatorItem>\n        </TabNavigator>\n      </View>\n    )\n  }\n}\n\nlet styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ccc'\n  }\n});\n```\n\napp/components/Home.js\n```js\nimport React, {Component} from 'react'\nimport {\n  Text\n} from 'react-native'\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <Text>\n        我是Home\n      </Text>\n    )\n  }\n}\n```\n\napp/components/Nice.js\n```js\nimport React, {Component} from 'react'\nimport {\n  Text\n} from 'react-native'\n\nexport default class Nice extends Component {\n  render() {\n    return (\n      <Text>\n        我是Nice\n      </Text>\n    )\n  }\n}\n```\n\n大功告成  \n![bigSuccess](bigSuccess.jpg)\n","source":"_posts/2017/04/react-native进入姿势.md","raw":"---\ntitle: react-native进入姿势\ndate: 2017-04-22 11:34:51\ncategories: 自学历程\ntags:\n  - javascript\n  - reactNative\n---\n## 开始战斗\n``准备学一点react，然后觉得不如直接学习react-native，就开始了react-native之路，从环境搭建到一个小DEMO，花了不少时间，主要是下载太麻烦``\n### 准备工作\n   1. ide: 我选择idea，习惯了\n   2. 电脑：win7的i5渣配置，所以先不打算进行ios开发\n   3. 没有vpn，宽带是交话费送的10M联通宽带，网速还行1m/s\n   4. 推荐给电脑安装**[wox](http://www.getwox.com/)和everything(wox插件就有)**，方便寻找文件\n\n## 环境搭建\n### node环境\n1. 下载安装**nodeJs**（最新的就行），为了防止环境变量有问题，不要修改安装目录\n2. 使用 node-v npm -v 看看有没有安装成功\n<!-- more -->\n3. 注册淘宝镜像 \n```$xslt\n> npm config set registry https://registry.npm.taobao.org --global\n> npm config set disturl https://npm.taobao.org/dist --global\n```\n\n4. 下载**yarn**，react-native默认使用yarn下载\n```$xslt\n  > npm i -g yarn\n  > yarn -v\n```\n\n5. 给**yarn**注册淘宝镜像\n```$xslt\n> yarn config set registry https://registry.npm.taobao.org --global\n> yarn config set disturl https://npm.taobao.org/dist --global \n```\n\n### react-native安装\n  1. 使用yarn下载react-native-cli\n```$xslt\n> yarn global add react-native-cli\n> react-native --version\n```\n\n  2. 创建项目,一直等待下载完成，生成的目录还是很清晰的\n```$xslt\n> yarn-native init rnDemo \n```\n\n  ![directory](directory.jpg)\n  3. 试着运行项目\n```git\n> cd rnDemo\n> npm start\n```\n\n   命令行显示，8081端口开启服务。在浏览器输入[localhost:8081](localhost:8081),显示``React Native packager is running.``，说明服务还是通畅的。可咱们要做安卓项目！所以继续使用命令行\n```$xslt\n> react-native run-android\n```\n\n   不出意外会挺慢，因为要下载gradle（gradle是安卓项目常用的构建工具，用来管理jar包和执行任务）和jar包，命令行会提示在此url下载文件``Download https://jcenter.bintray.com/com/android/tools/annotations/25.2.3/annotations-25.2.3.jar``\n  4. 因为网络的问题，所以给gradle配置阿里云maven（java常用的包管理工具，有一个下载的仓库，但很慢）镜像。进入**.gradle**文件夹，一般在``C:\\Users\\Administrator\\.gradle``，使用wox就简单多了\n    ![wox](wox.jpg)  \n  在 **.gradle** 文件夹里面新建 **init.gradle** 文件，并写入下面代码，或[点击下载init.gradle](init.gradle)\n```groovy\nallprojects{\n    repositories {\n        def REPOSITORY_URL = 'http://maven.aliyun.com/nexus/content/groups/public/'\n        all { ArtifactRepository repo ->\n            if(repo instanceof MavenArtifactRepository){\n                def url = repo.url.toString()\n                if (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com/')) {\n                    project.logger.lifecycle \"Repository ${repo.url} replaced by $REPOSITORY_URL.\"\n                    remove repo\n                }\n            }\n        }\n        maven {\n            url REPOSITORY_URL\n        }\n    }\n}\n```\n\n  5. 继续运行命令``react-native run-android``\n```git\n> react-native run-android\n```\n\n可以看到下载速度快了好多，但最后会发现报错``SDK location not found``，这是因为没有安装 **android sdk** ，接下来配置 **android环境**\n\n### android开发环境配置\n1. 安装java环境，搜一下有N多教程\n2. 下载**android studio** 没有翻墙的话推荐使用[网盘下载](https://pan.baidu.com/s/1jIyKHjK)\n3. 安装**android studio** 推荐使用默认安装一直点击``next``  \n4. 第一次启动会进入下面界面\n![androids](androids.jpg)\n  * standard 标准配置，推荐第一次安装使用能够\n  * custom 选择安装， 可以自己定制安装选项  \n由于是第一此安装就直接选用默认的**standard**安装，但是react-native官网推荐custom\n4. 记得勾选**Android Virtual Device**，一直**next**，最后点击**finished**等待下载完成\n  ![avd](avd.jpg)\n  \n### 环境变量\n在电脑环境变量设置里面，点击新建，ANDROID_HOME sdk路径\n![ANDROID_HOME](android_home.jpg)  \n然后再到环境变量 **path** 里面添加类似这样  \n``C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\tools``  \n``C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\platform-tools``  \n一定注意路径的正确性  \n![tools](tools.jpg)\n\n### 再次运行\n1. 运行``react-native run-android``\n```git\n> react-native run-android\n```\n\n又提示报错关于 ``[Android SDK Platform 23, Android SDK Build-Tools 23.0.1].``， 这是由于少了build-tools 23.0.1, 在sdk manager里面安装就行了  \n![snap3555](snap3555.jpg)  \n![snap3556](snap3556.jpg)  \n点击**finished**\n\n2. 运行``react-native run-android``\n```git\n> react-native run-android\n```\n提示报错`` com.android.builder.testing.api.DeviceException: No connected devices!``, 由于没连上设备导致的错误\n\n### 连接设备\nadb（连接devices的驱动）可以通过模拟器和真机进行，android studio带的模拟器不怎么好用，所以我选择用强大的**genymotion**进行开发\n\n#### 下载genymotion免费版并启动\n1. 下载并安装[genymotion免费版](https://pan.baidu.com/share/link?shareid=3943454172&uk=3073382768#list/path=%2F),替换安装目录文件就免费了\n2. 由于**genymotion**依赖virtualbox，下载安装[virtualbox](https://www.baidu.com/s?ie=utf-8&f=3&rsv_bp=1&rsv_idx=1&tn=baidu&wd=virtualbox&oq=genymotion%25E7%25A0%25B4%25E8%25A7%25A3%25E7%2589%2588&rsv_pq=e656eb5a0011ec27&rsv_t=715efDZI0lJ%2B1tsmUpCuiiAat7RfExGnvVtlkSWbKVbC%2BS9zwTu7ku7rueA&rqlang=cn&rsv_enter=1&inputT=1128&rsv_sug3=8&rsv_sug1=8&rsv_sug7=100&bs=genymotion%E7%A0%B4%E8%A7%A3%E7%89%88)就行了\n3. 以上安装好之后打开**genymotion**，根据提示添加一个设备并运行该安卓模拟器\n![gen](gen.jpg)\n4. 安装完毕，选择一个添加好的虚拟机，并启动。 糟糕，不知什么原因报错了。\n![err](err.jpg)  \n``碰到这种报错不用怕，打开virtualBox，直接启动安装好的虚拟机。``\n![verr](verr.jpg)  \n``可以看出来是virtualBox的配置有错误，那就打开配置信息 `` \n![configerr](configerr.jpg)  \n``跟随黄色提示配置好virtualBox,继续启动在genymotion里面添加的设备，完美! `` \n![success](success.jpg)  \n5. 在genymotion里面配置sdk路径\n![sdk](sdk.png)\n6. 如果还是提示连接不上设备，就用adb连接一下\n```$xslt\n> adb devices\n> adb connect 127.0.0.1\n> adb devices\n```\n\n## 开始开发\n\n1. 各种配置都设置好了，继续运行``react-native run-android``\n2. 尼玛又是error,这次明显的看出提示没有连接上js Service,得手动连接了    \n![netErr](netErr.jpg)  \n``点击菜单 -> Dev Setting -> Debug server host``\n![dev](dev.jpg)  \n![host](host.jpg)    \n``然后返回，reload一下``\n![reload](reload.jpg)  \n``出现成功界面，可以愉快的开发了``  \n![devSuccess](devSuccess.jpg)  \n**注意：在菜单里面点击 Enable Hot Reloading，这样就可以保存后实时刷新了**\n\n### 正式开发，就写一个简单的底部导航路由\n用到底部导航package [react-native-tab-navigator](https://github.com/expo/react-native-tab-navigator)\n```bash\n> yarn add react-native-tab-navigator\n```\n\n修改``index.android.js``,给入口少搁点东西，不然看着恶心\n```js\nimport React, { Component } from 'react';\nimport {\n  AppRegistry\n} from 'react-native';\n\nimport RootApp from './app/RootApp'\n\nAppRegistry.registerComponent('rnDemo', () => RootApp); // rnDemo是项目的名称\n```\n\n在根目录新建文件夹app，在app里面新建 RootApp.js、components/Home.js、components/Nice.js  \n\napp/RootApp.js\n```js\nimport React, {Component} from 'react'\nimport {\n  View,\n  StyleSheet\n} from 'react-native'\nimport TabNavigator from 'react-native-tab-navigator'\nimport Home from './components/Home'\nimport Nice from './components/Nice'\nimport TabNavigatorItem from \"react-native-tab-navigator/TabNavigatorItem\";\n\nexport default class RootApp extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedTab: 'home'\n    }\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <TabNavigator>\n          <TabNavigatorItem\n            title=\"Home\"\n            onPress={() => this.setState({selectedTab: 'home'})}\n            selected={this.state.selectedTab === 'home'}>\n            <Home/>\n          </TabNavigatorItem>\n          <TabNavigatorItem\n            title=\"Nice\"\n            onPress={() => this.setState({selectedTab: 'nice'})}\n            selected={this.state.selectedTab === 'nice'}>\n            <Nice/>\n          </TabNavigatorItem>\n        </TabNavigator>\n      </View>\n    )\n  }\n}\n\nlet styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ccc'\n  }\n});\n```\n\napp/components/Home.js\n```js\nimport React, {Component} from 'react'\nimport {\n  Text\n} from 'react-native'\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <Text>\n        我是Home\n      </Text>\n    )\n  }\n}\n```\n\napp/components/Nice.js\n```js\nimport React, {Component} from 'react'\nimport {\n  Text\n} from 'react-native'\n\nexport default class Nice extends Component {\n  render() {\n    return (\n      <Text>\n        我是Nice\n      </Text>\n    )\n  }\n}\n```\n\n大功告成  \n![bigSuccess](bigSuccess.jpg)\n","slug":"react-native进入姿势","published":1,"updated":"2017-08-22T06:51:54.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqqq000ar4v3w15ecd6u","content":"<h2 id=\"开始战斗\"><a href=\"#开始战斗\" class=\"headerlink\" title=\"开始战斗\"></a>开始战斗</h2><p><code>准备学一点react，然后觉得不如直接学习react-native，就开始了react-native之路，从环境搭建到一个小DEMO，花了不少时间，主要是下载太麻烦</code></p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>ide: 我选择idea，习惯了</li>\n<li>电脑：win7的i5渣配置，所以先不打算进行ios开发</li>\n<li>没有vpn，宽带是交话费送的10M联通宽带，网速还行1m/s</li>\n<li>推荐给电脑安装<strong><a href=\"http://www.getwox.com/\" target=\"_blank\" rel=\"external\">wox</a>和everything(wox插件就有)</strong>，方便寻找文件</li>\n</ol>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"node环境\"><a href=\"#node环境\" class=\"headerlink\" title=\"node环境\"></a>node环境</h3><ol>\n<li>下载安装<strong>nodeJs</strong>（最新的就行），为了防止环境变量有问题，不要修改安装目录</li>\n<li>使用 node-v npm -v 看看有没有安装成功<a id=\"more\"></a></li>\n<li><p>注册淘宝镜像 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm config set registry https://registry.npm.taobao.org --global</div><div class=\"line\">&gt; npm config set disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载<strong>yarn</strong>，react-native默认使用yarn下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm i -g yarn</div><div class=\"line\">&gt; yarn -v</div></pre></td></tr></table></figure>\n</li>\n<li><p>给<strong>yarn</strong>注册淘宝镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; yarn config set registry https://registry.npm.taobao.org --global</div><div class=\"line\">&gt; yarn config set disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"react-native安装\"><a href=\"#react-native安装\" class=\"headerlink\" title=\"react-native安装\"></a>react-native安装</h3><ol>\n<li><p>使用yarn下载react-native-cli</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; yarn global add react-native-cli</div><div class=\"line\">&gt; react-native --version</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建项目,一直等待下载完成，生成的目录还是很清晰的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; yarn-native init rnDemo</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/04/22/react-native进入姿势/directory.jpg\" alt=\"directory\"></p>\n</li>\n<li><p>试着运行项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; cd rnDemo</div><div class=\"line\">&gt; npm start</div></pre></td></tr></table></figure>\n<p>命令行显示，8081端口开启服务。在浏览器输入<a href=\"localhost:8081\" target=\"_blank\" rel=\"external\">localhost:8081</a>,显示<code>React Native packager is running.</code>，说明服务还是通畅的。可咱们要做安卓项目！所以继续使用命令行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; react-native run-android</div></pre></td></tr></table></figure>\n<p>不出意外会挺慢，因为要下载gradle（gradle是安卓项目常用的构建工具，用来管理jar包和执行任务）和jar包，命令行会提示在此url下载文件<code>Download https://jcenter.bintray.com/com/android/tools/annotations/25.2.3/annotations-25.2.3.jar</code></p>\n</li>\n<li><p>因为网络的问题，所以给gradle配置阿里云maven（java常用的包管理工具，有一个下载的仓库，但很慢）镜像。进入<strong>.gradle</strong>文件夹，一般在<code>C:\\Users\\Administrator\\.gradle</code>，使用wox就简单多了<br><img src=\"/2017/04/22/react-native进入姿势/wox.jpg\" alt=\"wox\"><br>在 <strong>.gradle</strong> 文件夹里面新建 <strong>init.gradle</strong> 文件，并写入下面代码，或<a href=\"init.gradle\">点击下载init.gradle</a></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">allprojects&#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        <span class=\"keyword\">def</span> REPOSITORY_URL = <span class=\"string\">'http://maven.aliyun.com/nexus/content/groups/public/'</span></div><div class=\"line\">        all &#123; ArtifactRepository repo -&gt;</div><div class=\"line\">            <span class=\"keyword\">if</span>(repo <span class=\"keyword\">instanceof</span> MavenArtifactRepository)&#123;</div><div class=\"line\">                <span class=\"keyword\">def</span> url = repo.url.toString()</div><div class=\"line\">                <span class=\"keyword\">if</span> (url.startsWith(<span class=\"string\">'https://repo1.maven.org/maven2'</span>) || url.startsWith(<span class=\"string\">'https://jcenter.bintray.com/'</span>)) &#123;</div><div class=\"line\">                    project.logger.lifecycle <span class=\"string\">\"Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.\"</span></div><div class=\"line\">                    remove repo</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        maven &#123;</div><div class=\"line\">            url REPOSITORY_URL</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>继续运行命令<code>react-native run-android</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; react-native run-android</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>可以看到下载速度快了好多，但最后会发现报错<code>SDK location not found</code>，这是因为没有安装 <strong>android sdk</strong> ，接下来配置 <strong>android环境</strong></p>\n<h3 id=\"android开发环境配置\"><a href=\"#android开发环境配置\" class=\"headerlink\" title=\"android开发环境配置\"></a>android开发环境配置</h3><ol>\n<li>安装java环境，搜一下有N多教程</li>\n<li>下载<strong>android studio</strong> 没有翻墙的话推荐使用<a href=\"https://pan.baidu.com/s/1jIyKHjK\" target=\"_blank\" rel=\"external\">网盘下载</a></li>\n<li>安装<strong>android studio</strong> 推荐使用默认安装一直点击<code>next</code>  </li>\n<li>第一次启动会进入下面界面<br><img src=\"/2017/04/22/react-native进入姿势/androids.jpg\" alt=\"androids\"><ul>\n<li>standard 标准配置，推荐第一次安装使用能够</li>\n<li>custom 选择安装， 可以自己定制安装选项<br>由于是第一此安装就直接选用默认的<strong>standard</strong>安装，但是react-native官网推荐custom</li>\n</ul>\n</li>\n<li>记得勾选<strong>Android Virtual Device</strong>，一直<strong>next</strong>，最后点击<strong>finished</strong>等待下载完成<br><img src=\"/2017/04/22/react-native进入姿势/avd.jpg\" alt=\"avd\"></li>\n</ol>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>在电脑环境变量设置里面，点击新建，ANDROID_HOME sdk路径<br><img src=\"/2017/04/22/react-native进入姿势/android_home.jpg\" alt=\"ANDROID_HOME\"><br>然后再到环境变量 <strong>path</strong> 里面添加类似这样<br><code>C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\tools</code><br><code>C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\platform-tools</code><br>一定注意路径的正确性<br><img src=\"/2017/04/22/react-native进入姿势/tools.jpg\" alt=\"tools\"></p>\n<h3 id=\"再次运行\"><a href=\"#再次运行\" class=\"headerlink\" title=\"再次运行\"></a>再次运行</h3><ol>\n<li>运行<code>react-native run-android</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; react-native run-android</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>又提示报错关于 <code>[Android SDK Platform 23, Android SDK Build-Tools 23.0.1].</code>， 这是由于少了build-tools 23.0.1, 在sdk manager里面安装就行了<br><img src=\"/2017/04/22/react-native进入姿势/snap3555.jpg\" alt=\"snap3555\"><br><img src=\"/2017/04/22/react-native进入姿势/snap3556.jpg\" alt=\"snap3556\"><br>点击<strong>finished</strong></p>\n<ol>\n<li>运行<code>react-native run-android</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; react-native run-android</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>提示报错<code>com.android.builder.testing.api.DeviceException: No connected devices!</code>, 由于没连上设备导致的错误</p>\n<h3 id=\"连接设备\"><a href=\"#连接设备\" class=\"headerlink\" title=\"连接设备\"></a>连接设备</h3><p>adb（连接devices的驱动）可以通过模拟器和真机进行，android studio带的模拟器不怎么好用，所以我选择用强大的<strong>genymotion</strong>进行开发</p>\n<h4 id=\"下载genymotion免费版并启动\"><a href=\"#下载genymotion免费版并启动\" class=\"headerlink\" title=\"下载genymotion免费版并启动\"></a>下载genymotion免费版并启动</h4><ol>\n<li>下载并安装<a href=\"https://pan.baidu.com/share/link?shareid=3943454172&amp;uk=3073382768#list/path=%2F\" target=\"_blank\" rel=\"external\">genymotion免费版</a>,替换安装目录文件就免费了</li>\n<li>由于<strong>genymotion</strong>依赖virtualbox，下载安装<a href=\"https://www.baidu.com/s?ie=utf-8&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=virtualbox&amp;oq=genymotion%25E7%25A0%25B4%25E8%25A7%25A3%25E7%2589%2588&amp;rsv_pq=e656eb5a0011ec27&amp;rsv_t=715efDZI0lJ%2B1tsmUpCuiiAat7RfExGnvVtlkSWbKVbC%2BS9zwTu7ku7rueA&amp;rqlang=cn&amp;rsv_enter=1&amp;inputT=1128&amp;rsv_sug3=8&amp;rsv_sug1=8&amp;rsv_sug7=100&amp;bs=genymotion%E7%A0%B4%E8%A7%A3%E7%89%88\" target=\"_blank\" rel=\"external\">virtualbox</a>就行了</li>\n<li>以上安装好之后打开<strong>genymotion</strong>，根据提示添加一个设备并运行该安卓模拟器<br><img src=\"/2017/04/22/react-native进入姿势/gen.jpg\" alt=\"gen\"></li>\n<li>安装完毕，选择一个添加好的虚拟机，并启动。 糟糕，不知什么原因报错了。<br><img src=\"/2017/04/22/react-native进入姿势/err.jpg\" alt=\"err\"><br><code>碰到这种报错不用怕，打开virtualBox，直接启动安装好的虚拟机。</code><br><img src=\"/2017/04/22/react-native进入姿势/verr.jpg\" alt=\"verr\"><br><code>可以看出来是virtualBox的配置有错误，那就打开配置信息</code><br><img src=\"/2017/04/22/react-native进入姿势/configerr.jpg\" alt=\"configerr\"><br><code>跟随黄色提示配置好virtualBox,继续启动在genymotion里面添加的设备，完美!</code><br><img src=\"/2017/04/22/react-native进入姿势/success.jpg\" alt=\"success\">  </li>\n<li>在genymotion里面配置sdk路径<br><img src=\"/2017/04/22/react-native进入姿势/sdk.png\" alt=\"sdk\"></li>\n<li>如果还是提示连接不上设备，就用adb连接一下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; adb devices</div><div class=\"line\">&gt; adb connect 127.0.0.1</div><div class=\"line\">&gt; adb devices</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"开始开发\"><a href=\"#开始开发\" class=\"headerlink\" title=\"开始开发\"></a>开始开发</h2><ol>\n<li>各种配置都设置好了，继续运行<code>react-native run-android</code></li>\n<li>尼玛又是error,这次明显的看出提示没有连接上js Service,得手动连接了<br><img src=\"/2017/04/22/react-native进入姿势/netErr.jpg\" alt=\"netErr\"><br><code>点击菜单 -&gt; Dev Setting -&gt; Debug server host</code><br><img src=\"/2017/04/22/react-native进入姿势/dev.jpg\" alt=\"dev\"><br><img src=\"/2017/04/22/react-native进入姿势/host.jpg\" alt=\"host\"><br><code>然后返回，reload一下</code><br><img src=\"/2017/04/22/react-native进入姿势/reload.jpg\" alt=\"reload\"><br><code>出现成功界面，可以愉快的开发了</code><br><img src=\"/2017/04/22/react-native进入姿势/devSuccess.jpg\" alt=\"devSuccess\"><br><strong>注意：在菜单里面点击 Enable Hot Reloading，这样就可以保存后实时刷新了</strong></li>\n</ol>\n<h3 id=\"正式开发，就写一个简单的底部导航路由\"><a href=\"#正式开发，就写一个简单的底部导航路由\" class=\"headerlink\" title=\"正式开发，就写一个简单的底部导航路由\"></a>正式开发，就写一个简单的底部导航路由</h3><p>用到底部导航package <a href=\"https://github.com/expo/react-native-tab-navigator\" target=\"_blank\" rel=\"external\">react-native-tab-navigator</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; yarn add react-native-tab-navigator</div></pre></td></tr></table></figure></p>\n<p>修改<code>index.android.js</code>,给入口少搁点东西，不然看着恶心<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  AppRegistry</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> RootApp <span class=\"keyword\">from</span> <span class=\"string\">'./app/RootApp'</span></div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent(<span class=\"string\">'rnDemo'</span>, () =&gt; RootApp); <span class=\"comment\">// rnDemo是项目的名称</span></div></pre></td></tr></table></figure></p>\n<p>在根目录新建文件夹app，在app里面新建 RootApp.js、components/Home.js、components/Nice.js  </p>\n<p>app/RootApp.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  View,</div><div class=\"line\">  StyleSheet</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"><span class=\"keyword\">import</span> TabNavigator <span class=\"keyword\">from</span> <span class=\"string\">'react-native-tab-navigator'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'./components/Home'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Nice <span class=\"keyword\">from</span> <span class=\"string\">'./components/Nice'</span></div><div class=\"line\"><span class=\"keyword\">import</span> TabNavigatorItem <span class=\"keyword\">from</span> <span class=\"string\">\"react-native-tab-navigator/TabNavigatorItem\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RootApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props)</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      <span class=\"attr\">selectedTab</span>: <span class=\"string\">'home'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.container&#125;</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TabNavigator</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">TabNavigatorItem</span></span></div><div class=\"line\">            <span class=\"attr\">title</span>=<span class=\"string\">\"Home\"</span></div><div class=\"line\">            <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt; this.setState(&#123;selectedTab: 'home'&#125;)&#125;</div><div class=\"line\">            selected=&#123;this.state.selectedTab === 'home'&#125;&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Home</span>/&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">TabNavigatorItem</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">TabNavigatorItem</span></span></div><div class=\"line\">            <span class=\"attr\">title</span>=<span class=\"string\">\"Nice\"</span></div><div class=\"line\">            <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt; this.setState(&#123;selectedTab: 'nice'&#125;)&#125;</div><div class=\"line\">            selected=&#123;this.state.selectedTab === 'nice'&#125;&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Nice</span>/&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">TabNavigatorItem</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TabNavigator</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> styles = StyleSheet.create(&#123;</div><div class=\"line\">  <span class=\"attr\">container</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#ccc'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>app/components/Home.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  Text</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span></span></div><div class=\"line\">        我是Home</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>app/components/Nice.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  Text</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nice</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span></span></div><div class=\"line\">        我是Nice</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>大功告成<br><img src=\"/2017/04/22/react-native进入姿势/bigSuccess.jpg\" alt=\"bigSuccess\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"开始战斗\"><a href=\"#开始战斗\" class=\"headerlink\" title=\"开始战斗\"></a>开始战斗</h2><p><code>准备学一点react，然后觉得不如直接学习react-native，就开始了react-native之路，从环境搭建到一个小DEMO，花了不少时间，主要是下载太麻烦</code></p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>ide: 我选择idea，习惯了</li>\n<li>电脑：win7的i5渣配置，所以先不打算进行ios开发</li>\n<li>没有vpn，宽带是交话费送的10M联通宽带，网速还行1m/s</li>\n<li>推荐给电脑安装<strong><a href=\"http://www.getwox.com/\">wox</a>和everything(wox插件就有)</strong>，方便寻找文件</li>\n</ol>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"node环境\"><a href=\"#node环境\" class=\"headerlink\" title=\"node环境\"></a>node环境</h3><ol>\n<li>下载安装<strong>nodeJs</strong>（最新的就行），为了防止环境变量有问题，不要修改安装目录</li>\n<li>使用 node-v npm -v 看看有没有安装成功</li></ol>","more":"\n<li><p>注册淘宝镜像 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm config set registry https://registry.npm.taobao.org --global</div><div class=\"line\">&gt; npm config set disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载<strong>yarn</strong>，react-native默认使用yarn下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm i -g yarn</div><div class=\"line\">&gt; yarn -v</div></pre></td></tr></table></figure>\n</li>\n<li><p>给<strong>yarn</strong>注册淘宝镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; yarn config set registry https://registry.npm.taobao.org --global</div><div class=\"line\">&gt; yarn config set disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure>\n</li>\n\n<h3 id=\"react-native安装\"><a href=\"#react-native安装\" class=\"headerlink\" title=\"react-native安装\"></a>react-native安装</h3><ol>\n<li><p>使用yarn下载react-native-cli</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; yarn global add react-native-cli</div><div class=\"line\">&gt; react-native --version</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建项目,一直等待下载完成，生成的目录还是很清晰的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; yarn-native init rnDemo</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/04/22/react-native进入姿势/directory.jpg\" alt=\"directory\"></p>\n</li>\n<li><p>试着运行项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; cd rnDemo</div><div class=\"line\">&gt; npm start</div></pre></td></tr></table></figure>\n<p>命令行显示，8081端口开启服务。在浏览器输入<a href=\"localhost:8081\">localhost:8081</a>,显示<code>React Native packager is running.</code>，说明服务还是通畅的。可咱们要做安卓项目！所以继续使用命令行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; react-native run-android</div></pre></td></tr></table></figure>\n<p>不出意外会挺慢，因为要下载gradle（gradle是安卓项目常用的构建工具，用来管理jar包和执行任务）和jar包，命令行会提示在此url下载文件<code>Download https://jcenter.bintray.com/com/android/tools/annotations/25.2.3/annotations-25.2.3.jar</code></p>\n</li>\n<li><p>因为网络的问题，所以给gradle配置阿里云maven（java常用的包管理工具，有一个下载的仓库，但很慢）镜像。进入<strong>.gradle</strong>文件夹，一般在<code>C:\\Users\\Administrator\\.gradle</code>，使用wox就简单多了<br><img src=\"/2017/04/22/react-native进入姿势/wox.jpg\" alt=\"wox\"><br>在 <strong>.gradle</strong> 文件夹里面新建 <strong>init.gradle</strong> 文件，并写入下面代码，或<a href=\"init.gradle\">点击下载init.gradle</a></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">allprojects&#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        <span class=\"keyword\">def</span> REPOSITORY_URL = <span class=\"string\">'http://maven.aliyun.com/nexus/content/groups/public/'</span></div><div class=\"line\">        all &#123; ArtifactRepository repo -&gt;</div><div class=\"line\">            <span class=\"keyword\">if</span>(repo <span class=\"keyword\">instanceof</span> MavenArtifactRepository)&#123;</div><div class=\"line\">                <span class=\"keyword\">def</span> url = repo.url.toString()</div><div class=\"line\">                <span class=\"keyword\">if</span> (url.startsWith(<span class=\"string\">'https://repo1.maven.org/maven2'</span>) || url.startsWith(<span class=\"string\">'https://jcenter.bintray.com/'</span>)) &#123;</div><div class=\"line\">                    project.logger.lifecycle <span class=\"string\">\"Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.\"</span></div><div class=\"line\">                    remove repo</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        maven &#123;</div><div class=\"line\">            url REPOSITORY_URL</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>继续运行命令<code>react-native run-android</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; react-native run-android</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>可以看到下载速度快了好多，但最后会发现报错<code>SDK location not found</code>，这是因为没有安装 <strong>android sdk</strong> ，接下来配置 <strong>android环境</strong></p>\n<h3 id=\"android开发环境配置\"><a href=\"#android开发环境配置\" class=\"headerlink\" title=\"android开发环境配置\"></a>android开发环境配置</h3><ol>\n<li>安装java环境，搜一下有N多教程</li>\n<li>下载<strong>android studio</strong> 没有翻墙的话推荐使用<a href=\"https://pan.baidu.com/s/1jIyKHjK\">网盘下载</a></li>\n<li>安装<strong>android studio</strong> 推荐使用默认安装一直点击<code>next</code>  </li>\n<li>第一次启动会进入下面界面<br><img src=\"/2017/04/22/react-native进入姿势/androids.jpg\" alt=\"androids\"><ul>\n<li>standard 标准配置，推荐第一次安装使用能够</li>\n<li>custom 选择安装， 可以自己定制安装选项<br>由于是第一此安装就直接选用默认的<strong>standard</strong>安装，但是react-native官网推荐custom</li>\n</ul>\n</li>\n<li>记得勾选<strong>Android Virtual Device</strong>，一直<strong>next</strong>，最后点击<strong>finished</strong>等待下载完成<br><img src=\"/2017/04/22/react-native进入姿势/avd.jpg\" alt=\"avd\"></li>\n</ol>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>在电脑环境变量设置里面，点击新建，ANDROID_HOME sdk路径<br><img src=\"/2017/04/22/react-native进入姿势/android_home.jpg\" alt=\"ANDROID_HOME\"><br>然后再到环境变量 <strong>path</strong> 里面添加类似这样<br><code>C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\tools</code><br><code>C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\platform-tools</code><br>一定注意路径的正确性<br><img src=\"/2017/04/22/react-native进入姿势/tools.jpg\" alt=\"tools\"></p>\n<h3 id=\"再次运行\"><a href=\"#再次运行\" class=\"headerlink\" title=\"再次运行\"></a>再次运行</h3><ol>\n<li>运行<code>react-native run-android</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; react-native run-android</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>又提示报错关于 <code>[Android SDK Platform 23, Android SDK Build-Tools 23.0.1].</code>， 这是由于少了build-tools 23.0.1, 在sdk manager里面安装就行了<br><img src=\"/2017/04/22/react-native进入姿势/snap3555.jpg\" alt=\"snap3555\"><br><img src=\"/2017/04/22/react-native进入姿势/snap3556.jpg\" alt=\"snap3556\"><br>点击<strong>finished</strong></p>\n<ol>\n<li>运行<code>react-native run-android</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; react-native run-android</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>提示报错<code>com.android.builder.testing.api.DeviceException: No connected devices!</code>, 由于没连上设备导致的错误</p>\n<h3 id=\"连接设备\"><a href=\"#连接设备\" class=\"headerlink\" title=\"连接设备\"></a>连接设备</h3><p>adb（连接devices的驱动）可以通过模拟器和真机进行，android studio带的模拟器不怎么好用，所以我选择用强大的<strong>genymotion</strong>进行开发</p>\n<h4 id=\"下载genymotion免费版并启动\"><a href=\"#下载genymotion免费版并启动\" class=\"headerlink\" title=\"下载genymotion免费版并启动\"></a>下载genymotion免费版并启动</h4><ol>\n<li>下载并安装<a href=\"https://pan.baidu.com/share/link?shareid=3943454172&amp;uk=3073382768#list/path=%2F\">genymotion免费版</a>,替换安装目录文件就免费了</li>\n<li>由于<strong>genymotion</strong>依赖virtualbox，下载安装<a href=\"https://www.baidu.com/s?ie=utf-8&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=virtualbox&amp;oq=genymotion%25E7%25A0%25B4%25E8%25A7%25A3%25E7%2589%2588&amp;rsv_pq=e656eb5a0011ec27&amp;rsv_t=715efDZI0lJ%2B1tsmUpCuiiAat7RfExGnvVtlkSWbKVbC%2BS9zwTu7ku7rueA&amp;rqlang=cn&amp;rsv_enter=1&amp;inputT=1128&amp;rsv_sug3=8&amp;rsv_sug1=8&amp;rsv_sug7=100&amp;bs=genymotion%E7%A0%B4%E8%A7%A3%E7%89%88\">virtualbox</a>就行了</li>\n<li>以上安装好之后打开<strong>genymotion</strong>，根据提示添加一个设备并运行该安卓模拟器<br><img src=\"/2017/04/22/react-native进入姿势/gen.jpg\" alt=\"gen\"></li>\n<li>安装完毕，选择一个添加好的虚拟机，并启动。 糟糕，不知什么原因报错了。<br><img src=\"/2017/04/22/react-native进入姿势/err.jpg\" alt=\"err\"><br><code>碰到这种报错不用怕，打开virtualBox，直接启动安装好的虚拟机。</code><br><img src=\"/2017/04/22/react-native进入姿势/verr.jpg\" alt=\"verr\"><br><code>可以看出来是virtualBox的配置有错误，那就打开配置信息</code><br><img src=\"/2017/04/22/react-native进入姿势/configerr.jpg\" alt=\"configerr\"><br><code>跟随黄色提示配置好virtualBox,继续启动在genymotion里面添加的设备，完美!</code><br><img src=\"/2017/04/22/react-native进入姿势/success.jpg\" alt=\"success\">  </li>\n<li>在genymotion里面配置sdk路径<br><img src=\"/2017/04/22/react-native进入姿势/sdk.png\" alt=\"sdk\"></li>\n<li>如果还是提示连接不上设备，就用adb连接一下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; adb devices</div><div class=\"line\">&gt; adb connect 127.0.0.1</div><div class=\"line\">&gt; adb devices</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"开始开发\"><a href=\"#开始开发\" class=\"headerlink\" title=\"开始开发\"></a>开始开发</h2><ol>\n<li>各种配置都设置好了，继续运行<code>react-native run-android</code></li>\n<li>尼玛又是error,这次明显的看出提示没有连接上js Service,得手动连接了<br><img src=\"/2017/04/22/react-native进入姿势/netErr.jpg\" alt=\"netErr\"><br><code>点击菜单 -&gt; Dev Setting -&gt; Debug server host</code><br><img src=\"/2017/04/22/react-native进入姿势/dev.jpg\" alt=\"dev\"><br><img src=\"/2017/04/22/react-native进入姿势/host.jpg\" alt=\"host\"><br><code>然后返回，reload一下</code><br><img src=\"/2017/04/22/react-native进入姿势/reload.jpg\" alt=\"reload\"><br><code>出现成功界面，可以愉快的开发了</code><br><img src=\"/2017/04/22/react-native进入姿势/devSuccess.jpg\" alt=\"devSuccess\"><br><strong>注意：在菜单里面点击 Enable Hot Reloading，这样就可以保存后实时刷新了</strong></li>\n</ol>\n<h3 id=\"正式开发，就写一个简单的底部导航路由\"><a href=\"#正式开发，就写一个简单的底部导航路由\" class=\"headerlink\" title=\"正式开发，就写一个简单的底部导航路由\"></a>正式开发，就写一个简单的底部导航路由</h3><p>用到底部导航package <a href=\"https://github.com/expo/react-native-tab-navigator\">react-native-tab-navigator</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; yarn add react-native-tab-navigator</div></pre></td></tr></table></figure></p>\n<p>修改<code>index.android.js</code>,给入口少搁点东西，不然看着恶心<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  AppRegistry</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> RootApp <span class=\"keyword\">from</span> <span class=\"string\">'./app/RootApp'</span></div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent(<span class=\"string\">'rnDemo'</span>, () =&gt; RootApp); <span class=\"comment\">// rnDemo是项目的名称</span></div></pre></td></tr></table></figure></p>\n<p>在根目录新建文件夹app，在app里面新建 RootApp.js、components/Home.js、components/Nice.js  </p>\n<p>app/RootApp.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  View,</div><div class=\"line\">  StyleSheet</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"><span class=\"keyword\">import</span> TabNavigator <span class=\"keyword\">from</span> <span class=\"string\">'react-native-tab-navigator'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'./components/Home'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Nice <span class=\"keyword\">from</span> <span class=\"string\">'./components/Nice'</span></div><div class=\"line\"><span class=\"keyword\">import</span> TabNavigatorItem <span class=\"keyword\">from</span> <span class=\"string\">\"react-native-tab-navigator/TabNavigatorItem\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RootApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props)</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      <span class=\"attr\">selectedTab</span>: <span class=\"string\">'home'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.container&#125;</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TabNavigator</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">TabNavigatorItem</span></span></div><div class=\"line\">            <span class=\"attr\">title</span>=<span class=\"string\">\"Home\"</span></div><div class=\"line\">            <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt; this.setState(&#123;selectedTab: 'home'&#125;)&#125;</div><div class=\"line\">            selected=&#123;this.state.selectedTab === 'home'&#125;&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Home</span>/&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">TabNavigatorItem</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">TabNavigatorItem</span></span></div><div class=\"line\">            <span class=\"attr\">title</span>=<span class=\"string\">\"Nice\"</span></div><div class=\"line\">            <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt; this.setState(&#123;selectedTab: 'nice'&#125;)&#125;</div><div class=\"line\">            selected=&#123;this.state.selectedTab === 'nice'&#125;&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Nice</span>/&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">TabNavigatorItem</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TabNavigator</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> styles = StyleSheet.create(&#123;</div><div class=\"line\">  <span class=\"attr\">container</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#ccc'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>app/components/Home.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  Text</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span></span></div><div class=\"line\">        我是Home</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>app/components/Nice.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  Text</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nice</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span></span></div><div class=\"line\">        我是Nice</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>大功告成<br><img src=\"/2017/04/22/react-native进入姿势/bigSuccess.jpg\" alt=\"bigSuccess\"></p>"},{"title":"java SSM和vue整合","date":"2017-04-25T06:18:45.000Z","_content":"\n# SSM整合流程\n## spring spring-mvc mybatis maven\n * web前端项目的源码[vue-admin](https://github.com/slipkinem/vue-admin)\n * 数据库的sql文件[vue_admin.sql](vue_admin.sql)\n\n### IDE idea\n1. File => new Project => maven => create from archetype => **maven-archetype-webapp**  \n![1](1.png)\n2. 一直点击next直到finished，maven会自动创建一个项目目录  \n![2](2.png)\n  * 最终项目目录结构图  \n<!-- more -->\n```\n│  .gitignore\n│  pom.xml\n│  README.md\n│  tree.txt\n│  \n├─src\n│  └─main\n│      ├─java\n│      │  └─cn\n│      │      └─lvsen\n│      │          └─test\n│      │              ├─controller\n│      │              │      TableController.java\n│      │              │      UserController.java\n│      │              │      \n│      │              ├─dao\n│      │              │      TableDataMapper.java\n│      │              │      UserMapper.java\n│      │              │      \n│      │              ├─interceptor\n│      │              │      AuthInterceptor.java\n│      │              │      \n│      │              ├─mapping\n│      │              │      TableDataMapper.xml\n│      │              │      UserMapper.xml\n│      │              │      \n│      │              ├─model\n│      │              │      TableData.java\n│      │              │      TableDataExample.java\n│      │              │      User.java\n│      │              │      UserExample.java\n│      │              │      \n│      │              └─service\n│      │                  │  TableService.java\n│      │                  │  UserService.java\n│      │                  │  \n│      │                  └─impl\n│      │                          TableServiceImpl.java\n│      │                          UserServiceImpl.java\n│      │                          \n│      ├─resources\n│      │  │  generatorConfig.xml\n│      │  │  jdbc.properties\n│      │  │  logback.xml.bak\n│      │  │  \n│      │  └─spring\n│      │          spring-mvc.xml\n│      │          spring-mybatis.xml\n│      │          \n│      └─webapp\n│          │  index.html\n│          │  index.jsp\n│          │  \n│          ├─static\n│          │  ├─css\n│          │  │      app.f3c8e005c2be0a746136766675898059.css\n│          │  │      app.f3c8e005c2be0a746136766675898059.css.gz\n│          │  │      \n│          │  ├─fonts\n│          │  │      element-icons.b02bdc1.ttf\n│          │  │      \n│          │  └─js\n│          │          0.105cd4667842b0092158.js\n│          │          1.3f78774435db7aa5de2a.js\n│          │          app.3ec6fa4bebfb1bb58a2b.js\n│          │          app.3ec6fa4bebfb1bb58a2b.js.gz\n│          │          manifest.b0bb778337a7d07c6313.js\n│          │          vendor.bbf93d5282d3216eb30e.js\n│          │          vendor.bbf93d5282d3216eb30e.js.gz\n│          │          \n│          └─WEB-INF\n│                  web.xml\n│                  \n└─test\n        TestHello.java\n```\n3. 在创建的POM里面添加依赖  \n    pom.xml\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>article</groupId>\n  <artifactId>article</artifactId>\n  <packaging>war</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>article Maven Webapp</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n    <spring.version>4.2.5.RELEASE</spring.version>\n  </properties>\n\n  <dependencies>\n    <!--测试-->\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n      <scope>test</scope>\n    </dependency>\n    <!--spring-->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-core</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- jdbc连接池 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-jdbc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 事务管理 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-tx</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!--spring测试用-->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-test</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 注解扫描 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- MVC -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-webmvc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 切面，将日志记录，事务等分离开来 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-aop</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- mybatis和spring结合用 -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis-spring</artifactId>\n      <version>1.2.4</version>\n    </dependency>\n    <!-- mysql连接驱动 -->\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>5.1.38</version>\n    </dependency>\n    <!-- 连接数据库 -->\n    <dependency>\n      <groupId>commons-dbcp</groupId>\n      <artifactId>commons-dbcp</artifactId>\n      <version>1.4</version>\n    </dependency>\n  <!-- mybatis -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis</artifactId>\n      <version>3.3.1</version>\n    </dependency>\n    <!-- 转换json用 -->\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>fastjson</artifactId>\n      <version>1.2.7</version>\n    </dependency>\n    <!-- jackson转换json用 @ResponseBody默认调用jackson，将java对象转为json -->\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-core</artifactId>\n      <version>2.8.7</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-annotations</artifactId>\n      <version>2.8.0</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-databind</artifactId>\n      <version>2.8.7</version>\n    </dependency>\n    <!-- 分页插件 -->\n    <dependency>\n      <groupId>com.github.pagehelper</groupId>\n      <artifactId>pagehelper</artifactId>\n      <version>5.0.0</version>\n    </dependency>\n    <!-- javaHttp基础包 -->\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>3.1.0</version>\n    </dependency>\n    <!-- 日志 -->\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-api</artifactId>\n      <version>1.7.24</version>\n    </dependency>\n    <!-- slf4j要配合其他日志包运行，slf4j起个管理的作用 -->\n    <dependency>\n      <groupId>ch.qos.logback</groupId>\n      <artifactId>logback-classic</artifactId>\n      <version>1.1.11</version>\n    </dependency>\n\n  </dependencies>\n\n\n  <build>\n    <finalName>article</finalName>\n    <!-- 防止package打包不到XML-->\n    <resources>\n      <resource>\n        <directory>src/main/java</directory>\n        <includes>\n          <include>**/*.xml</include>\n        </includes>\n        <filtering>true</filtering>\n      </resource>\n    </resources>\n\n    <plugins>\n      <!-- mybatis生成代码插件 -->\n      <plugin>\n        <groupId>org.mybatis.generator</groupId>\n        <artifactId>mybatis-generator-maven-plugin</artifactId>\n        <version>1.3.5</version>\n        <configuration>\n          <!-- 生成文件的配置 -->\n          <configurationFile>src/main/resources/generatorConfig.xml</configurationFile>\n          <verbose>true</verbose>\n          <overwrite>true</overwrite>\n        </configuration>\n      </plugin>\n      <plugin>\n        <!-- maven插件 -->\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <source>1.6</source>\n          <target>1.6</target>\n        </configuration>\n      </plugin>\n    </plugins>\n\n  </build>\n</project>\n```\n4. 配置mybatisGeneratorConfig，需要连接数据库，\n    将准备的sql文件导入数据库中[vue_admin.sql](vue_admin.sql)  \ngeneratorConfig.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n    PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n    \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n\n  <!--<properties resource=\"jdbc.properties\"/>-->\n\n  <!--连接mysql的jar包-->\n  <classPathEntry\n      location=\"C:/Users/**/.m2/repository/mysql/mysql-connector-java/5.1.29/mysql-connector-java-5.1.29.jar\" />\n\n  <context id=\"default\" targetRuntime=\"MyBatis3\">\n    <!-- jdbc连接 -->\n    <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\"\n                    connectionURL=\"jdbc:mysql://localhost:3306/vue_admin\"\n                    userId=\"**\"\n                    password=\"**\"/>\n    <!-- 生成model =》 数据层 -->\n    <javaModelGenerator targetPackage=\"cn.lvsen.test.model\" targetProject=\"src/main/java\">\n    </javaModelGenerator>\n    <!-- 生成mapper 存有mybatis的数据库操作xml -->\n    <sqlMapGenerator targetPackage=\"cn.lvsen.test.mapping\" targetProject=\"src/main/java\">\n    </sqlMapGenerator>\n    <!-- 存有mappper的接口类，mybatis会自动生成实体类，将mapper和dao连接起来 -->\n    <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"cn.lvsen.test.dao\" targetProject=\"src/main/java\">\n    </javaClientGenerator>\n    <!-- 表的名字 -->\n    <table tableName=\"t_table\" domainObjectName=\"TableData\"/>\n    <table tableName=\"t_user\" domainObjectName=\"User\" />\n  </context>\n</generatorConfiguration>\n```\n5. 配置resources/spring/spring-mvc.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n\n  <!--扫描包，查注解-->\n  <context:component-scan base-package=\"cn.lvsen.test\"/>\n\n  <!--映射器与适配器，去掉@ResponseBody就会出问题-->\n  <mvc:annotation-driven/>\n  <!-- 静态资源放置地 -->\n  <mvc:resources mapping=\"/**\" location=\"static\" />\n  <!--<mvc:resources mapping=\"/css/**\" location=\"static\" />-->\n  <mvc:default-servlet-handler />\n  <!-- 拦截器 -->\n  <mvc:interceptors>\n    <mvc:interceptor>\n      <mvc:mapping path=\"/api/**\"/>\n      <bean class=\"cn.lvsen.test.interceptor.AuthInterceptor\"/>\n    </mvc:interceptor>\n  </mvc:interceptors>\n  <!-- 视图 -->\n  <bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"\n        p:prefix=\"/\" p:suffix=\".html\"/>\n</beans>\n```\n6. 配置resources/spring/spring-mybatis.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n  <!--引入jdbc的配置文件-->\n  <bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n    <property name=\"location\" value=\"classpath:jdbc.properties\" />\n  </bean>\n  <!--jdbc连接数据库基本配置-->\n  <bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n    <property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n    <property name=\"url\" value=\"${jdbc.url}\" />\n    <property name=\"username\" value=\"${jdbc.username}\" />\n    <property name=\"password\" value=\"${jdbc.password}\" />\n  </bean>\n  <!--spring和mybatis结合的配置-->\n  <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <property name=\"mapperLocations\" value=\"classpath:cn/lvsen/test/mapping/*Mapper.xml\" />\n    <property name=\"plugins\">\n      <array>\n        <bean class=\"com.github.pagehelper.PageInterceptor\">\n          <!--少了这句话会导致空指针异常-->\n          <property name=\"properties\">\n            <value></value>\n          </property>\n        </bean>\n      </array>\n    </property>\n  </bean>\n\n  <!--dao接口，sping会自动查找其中的类 dao ——> 数据访问层 dao映射的mapper，去掉启动报错-->\n  <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n    <property name=\"basePackage\" value=\"cn.lvsen.test.dao\"/>\n    <!--对应上面id=\"sqlSessionFactory\"-->\n    <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\" />\n  </bean>\n</beans>\n```\n\n7. spring-mybatis.xml配置时用了**jdbc.properties**这是为了方便管理连接  \n    resources/jdbc.properties的配置\n```\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/vue_admin?useUnicode=true&characterEncoding=UTF-8\njdbc.username=**\njdbc.password=**\n```\n8. web.xml配置，web.xml是这个web项目的入口  \n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://java.sun.com/xml/ns/javaee\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n         version=\"3.0\">\n  <display-name>Archetype Created Web Application</display-name>\n  <!--spring和mybatis的配置文件-->\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:spring/spring-mybatis.xml</param-value>\n  </context-param>\n\n  <!--spring监听器-->\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n\n  <!--解决乱码-->\n  <filter>\n    <filter-name>SpringEncodingFilter</filter-name>\n    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n    <init-param>\n      <param-name>encoding</param-name>\n      <param-value>UTF-8</param-value>\n    </init-param>\n    <init-param>\n      <param-name>forceEncoding</param-name>\n      <param-value>true</param-value>\n    </init-param>\n  </filter>\n  <!--映射的路径-->\n  <filter-mapping>\n    <filter-name>SpringEncodingFilter</filter-name>\n    <url-pattern>/</url-pattern>\n  </filter-mapping>\n  <!-- 声明静态资源类型，加入spring扫描 -->\n  <servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>*.html</url-pattern>\n  </servlet-mapping>\n\n  <!--spring MVC 核心分发器-->\n  <servlet>\n    <servlet-name>SpringMvc</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>classpath:spring/spring-mvc.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>SpringMvc</servlet-name>\n    <url-pattern>/</url-pattern>\n  </servlet-mapping>\n  <!-- 首页，可以多个，根据顺来显示-->\n  <welcome-file-list>\n    <welcome-file>index.html</welcome-file>\n  </welcome-file-list>\n</web-app>\n```\n\n9. SSM基本配置完了，其他功能需要的时候再加，现在新建文件夹  \n  * java/cn.xx.xx/controller  // controller层\n  * java/cn.xx.xx/service // service层\n  * java/cn.xx.xx/service/impl // service层接口的实现类\n  * webapp/index.html\n\n10. 在controller里面新建一个UserController类，  \n进行restAPI的书写,api使用url: **api/user/hello**\n```\n@Controller\n@RequestMapping(\"api/user\")\npublic class UserController {\n\n    @RequestMapping(value = \"hello\", method = RequestMethod.GET) \n    @ResponseBody // 要返回json数据\n    public Map login(HttpSession httpSession) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        \n        try {\n          map.put(\"errorCode\", 0);\n          map.put(\"message\", \"hello\");\n        } catch (Exception e) {\n            map.put(\"errorCode\", 1);\n            map.put(\"errorMessage\", \"未知错误\");\n        }\n        return map;\n    }\n```\n\n11. 一个接口写好，然后配置服务器启动项目  \n  1.![3](3.png)  \n  2.![4](4.png)  \n  3.![5](5.png)  \n  然后点击**apply** => **OK**  \n项目启动，打开地址栏，追加输入**api/user/hello**，拿到数据OK，后台走通\n\n### 前端部分\n12. 后台暂时放置，开始写前端**[前端部分代码](https://github.com/slipkinem/vue-admin)**\n#### 前端框架用的VUE，UI框架用的饿了么开源的element_ui\n  * 总概况：vue+vue-router+vue-resource+vuex+element_ui\n13. **用npm下载vue-cli**\n  * 用vue-cli生成webpack项目骨架\n  * npm install 下载所有依赖\n14. ","source":"_posts/2017/04/java-ssm.md","raw":"---\ntitle: java SSM和vue整合\ncategories: 课外学习\ndate: 2017-04-25 14:18:45\ntags:\n  - java\n  - ssm\n  - javascript\n---\n\n# SSM整合流程\n## spring spring-mvc mybatis maven\n * web前端项目的源码[vue-admin](https://github.com/slipkinem/vue-admin)\n * 数据库的sql文件[vue_admin.sql](vue_admin.sql)\n\n### IDE idea\n1. File => new Project => maven => create from archetype => **maven-archetype-webapp**  \n![1](1.png)\n2. 一直点击next直到finished，maven会自动创建一个项目目录  \n![2](2.png)\n  * 最终项目目录结构图  \n<!-- more -->\n```\n│  .gitignore\n│  pom.xml\n│  README.md\n│  tree.txt\n│  \n├─src\n│  └─main\n│      ├─java\n│      │  └─cn\n│      │      └─lvsen\n│      │          └─test\n│      │              ├─controller\n│      │              │      TableController.java\n│      │              │      UserController.java\n│      │              │      \n│      │              ├─dao\n│      │              │      TableDataMapper.java\n│      │              │      UserMapper.java\n│      │              │      \n│      │              ├─interceptor\n│      │              │      AuthInterceptor.java\n│      │              │      \n│      │              ├─mapping\n│      │              │      TableDataMapper.xml\n│      │              │      UserMapper.xml\n│      │              │      \n│      │              ├─model\n│      │              │      TableData.java\n│      │              │      TableDataExample.java\n│      │              │      User.java\n│      │              │      UserExample.java\n│      │              │      \n│      │              └─service\n│      │                  │  TableService.java\n│      │                  │  UserService.java\n│      │                  │  \n│      │                  └─impl\n│      │                          TableServiceImpl.java\n│      │                          UserServiceImpl.java\n│      │                          \n│      ├─resources\n│      │  │  generatorConfig.xml\n│      │  │  jdbc.properties\n│      │  │  logback.xml.bak\n│      │  │  \n│      │  └─spring\n│      │          spring-mvc.xml\n│      │          spring-mybatis.xml\n│      │          \n│      └─webapp\n│          │  index.html\n│          │  index.jsp\n│          │  \n│          ├─static\n│          │  ├─css\n│          │  │      app.f3c8e005c2be0a746136766675898059.css\n│          │  │      app.f3c8e005c2be0a746136766675898059.css.gz\n│          │  │      \n│          │  ├─fonts\n│          │  │      element-icons.b02bdc1.ttf\n│          │  │      \n│          │  └─js\n│          │          0.105cd4667842b0092158.js\n│          │          1.3f78774435db7aa5de2a.js\n│          │          app.3ec6fa4bebfb1bb58a2b.js\n│          │          app.3ec6fa4bebfb1bb58a2b.js.gz\n│          │          manifest.b0bb778337a7d07c6313.js\n│          │          vendor.bbf93d5282d3216eb30e.js\n│          │          vendor.bbf93d5282d3216eb30e.js.gz\n│          │          \n│          └─WEB-INF\n│                  web.xml\n│                  \n└─test\n        TestHello.java\n```\n3. 在创建的POM里面添加依赖  \n    pom.xml\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>article</groupId>\n  <artifactId>article</artifactId>\n  <packaging>war</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>article Maven Webapp</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n    <spring.version>4.2.5.RELEASE</spring.version>\n  </properties>\n\n  <dependencies>\n    <!--测试-->\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n      <scope>test</scope>\n    </dependency>\n    <!--spring-->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-core</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- jdbc连接池 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-jdbc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 事务管理 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-tx</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!--spring测试用-->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-test</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 注解扫描 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- MVC -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-webmvc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 切面，将日志记录，事务等分离开来 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-aop</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- mybatis和spring结合用 -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis-spring</artifactId>\n      <version>1.2.4</version>\n    </dependency>\n    <!-- mysql连接驱动 -->\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>5.1.38</version>\n    </dependency>\n    <!-- 连接数据库 -->\n    <dependency>\n      <groupId>commons-dbcp</groupId>\n      <artifactId>commons-dbcp</artifactId>\n      <version>1.4</version>\n    </dependency>\n  <!-- mybatis -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis</artifactId>\n      <version>3.3.1</version>\n    </dependency>\n    <!-- 转换json用 -->\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>fastjson</artifactId>\n      <version>1.2.7</version>\n    </dependency>\n    <!-- jackson转换json用 @ResponseBody默认调用jackson，将java对象转为json -->\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-core</artifactId>\n      <version>2.8.7</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-annotations</artifactId>\n      <version>2.8.0</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-databind</artifactId>\n      <version>2.8.7</version>\n    </dependency>\n    <!-- 分页插件 -->\n    <dependency>\n      <groupId>com.github.pagehelper</groupId>\n      <artifactId>pagehelper</artifactId>\n      <version>5.0.0</version>\n    </dependency>\n    <!-- javaHttp基础包 -->\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>3.1.0</version>\n    </dependency>\n    <!-- 日志 -->\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-api</artifactId>\n      <version>1.7.24</version>\n    </dependency>\n    <!-- slf4j要配合其他日志包运行，slf4j起个管理的作用 -->\n    <dependency>\n      <groupId>ch.qos.logback</groupId>\n      <artifactId>logback-classic</artifactId>\n      <version>1.1.11</version>\n    </dependency>\n\n  </dependencies>\n\n\n  <build>\n    <finalName>article</finalName>\n    <!-- 防止package打包不到XML-->\n    <resources>\n      <resource>\n        <directory>src/main/java</directory>\n        <includes>\n          <include>**/*.xml</include>\n        </includes>\n        <filtering>true</filtering>\n      </resource>\n    </resources>\n\n    <plugins>\n      <!-- mybatis生成代码插件 -->\n      <plugin>\n        <groupId>org.mybatis.generator</groupId>\n        <artifactId>mybatis-generator-maven-plugin</artifactId>\n        <version>1.3.5</version>\n        <configuration>\n          <!-- 生成文件的配置 -->\n          <configurationFile>src/main/resources/generatorConfig.xml</configurationFile>\n          <verbose>true</verbose>\n          <overwrite>true</overwrite>\n        </configuration>\n      </plugin>\n      <plugin>\n        <!-- maven插件 -->\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <source>1.6</source>\n          <target>1.6</target>\n        </configuration>\n      </plugin>\n    </plugins>\n\n  </build>\n</project>\n```\n4. 配置mybatisGeneratorConfig，需要连接数据库，\n    将准备的sql文件导入数据库中[vue_admin.sql](vue_admin.sql)  \ngeneratorConfig.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n    PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n    \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n\n  <!--<properties resource=\"jdbc.properties\"/>-->\n\n  <!--连接mysql的jar包-->\n  <classPathEntry\n      location=\"C:/Users/**/.m2/repository/mysql/mysql-connector-java/5.1.29/mysql-connector-java-5.1.29.jar\" />\n\n  <context id=\"default\" targetRuntime=\"MyBatis3\">\n    <!-- jdbc连接 -->\n    <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\"\n                    connectionURL=\"jdbc:mysql://localhost:3306/vue_admin\"\n                    userId=\"**\"\n                    password=\"**\"/>\n    <!-- 生成model =》 数据层 -->\n    <javaModelGenerator targetPackage=\"cn.lvsen.test.model\" targetProject=\"src/main/java\">\n    </javaModelGenerator>\n    <!-- 生成mapper 存有mybatis的数据库操作xml -->\n    <sqlMapGenerator targetPackage=\"cn.lvsen.test.mapping\" targetProject=\"src/main/java\">\n    </sqlMapGenerator>\n    <!-- 存有mappper的接口类，mybatis会自动生成实体类，将mapper和dao连接起来 -->\n    <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"cn.lvsen.test.dao\" targetProject=\"src/main/java\">\n    </javaClientGenerator>\n    <!-- 表的名字 -->\n    <table tableName=\"t_table\" domainObjectName=\"TableData\"/>\n    <table tableName=\"t_user\" domainObjectName=\"User\" />\n  </context>\n</generatorConfiguration>\n```\n5. 配置resources/spring/spring-mvc.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n\n  <!--扫描包，查注解-->\n  <context:component-scan base-package=\"cn.lvsen.test\"/>\n\n  <!--映射器与适配器，去掉@ResponseBody就会出问题-->\n  <mvc:annotation-driven/>\n  <!-- 静态资源放置地 -->\n  <mvc:resources mapping=\"/**\" location=\"static\" />\n  <!--<mvc:resources mapping=\"/css/**\" location=\"static\" />-->\n  <mvc:default-servlet-handler />\n  <!-- 拦截器 -->\n  <mvc:interceptors>\n    <mvc:interceptor>\n      <mvc:mapping path=\"/api/**\"/>\n      <bean class=\"cn.lvsen.test.interceptor.AuthInterceptor\"/>\n    </mvc:interceptor>\n  </mvc:interceptors>\n  <!-- 视图 -->\n  <bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"\n        p:prefix=\"/\" p:suffix=\".html\"/>\n</beans>\n```\n6. 配置resources/spring/spring-mybatis.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n  <!--引入jdbc的配置文件-->\n  <bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n    <property name=\"location\" value=\"classpath:jdbc.properties\" />\n  </bean>\n  <!--jdbc连接数据库基本配置-->\n  <bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n    <property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n    <property name=\"url\" value=\"${jdbc.url}\" />\n    <property name=\"username\" value=\"${jdbc.username}\" />\n    <property name=\"password\" value=\"${jdbc.password}\" />\n  </bean>\n  <!--spring和mybatis结合的配置-->\n  <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <property name=\"mapperLocations\" value=\"classpath:cn/lvsen/test/mapping/*Mapper.xml\" />\n    <property name=\"plugins\">\n      <array>\n        <bean class=\"com.github.pagehelper.PageInterceptor\">\n          <!--少了这句话会导致空指针异常-->\n          <property name=\"properties\">\n            <value></value>\n          </property>\n        </bean>\n      </array>\n    </property>\n  </bean>\n\n  <!--dao接口，sping会自动查找其中的类 dao ——> 数据访问层 dao映射的mapper，去掉启动报错-->\n  <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n    <property name=\"basePackage\" value=\"cn.lvsen.test.dao\"/>\n    <!--对应上面id=\"sqlSessionFactory\"-->\n    <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\" />\n  </bean>\n</beans>\n```\n\n7. spring-mybatis.xml配置时用了**jdbc.properties**这是为了方便管理连接  \n    resources/jdbc.properties的配置\n```\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/vue_admin?useUnicode=true&characterEncoding=UTF-8\njdbc.username=**\njdbc.password=**\n```\n8. web.xml配置，web.xml是这个web项目的入口  \n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://java.sun.com/xml/ns/javaee\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n         version=\"3.0\">\n  <display-name>Archetype Created Web Application</display-name>\n  <!--spring和mybatis的配置文件-->\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:spring/spring-mybatis.xml</param-value>\n  </context-param>\n\n  <!--spring监听器-->\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n\n  <!--解决乱码-->\n  <filter>\n    <filter-name>SpringEncodingFilter</filter-name>\n    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n    <init-param>\n      <param-name>encoding</param-name>\n      <param-value>UTF-8</param-value>\n    </init-param>\n    <init-param>\n      <param-name>forceEncoding</param-name>\n      <param-value>true</param-value>\n    </init-param>\n  </filter>\n  <!--映射的路径-->\n  <filter-mapping>\n    <filter-name>SpringEncodingFilter</filter-name>\n    <url-pattern>/</url-pattern>\n  </filter-mapping>\n  <!-- 声明静态资源类型，加入spring扫描 -->\n  <servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>*.html</url-pattern>\n  </servlet-mapping>\n\n  <!--spring MVC 核心分发器-->\n  <servlet>\n    <servlet-name>SpringMvc</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>classpath:spring/spring-mvc.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>SpringMvc</servlet-name>\n    <url-pattern>/</url-pattern>\n  </servlet-mapping>\n  <!-- 首页，可以多个，根据顺来显示-->\n  <welcome-file-list>\n    <welcome-file>index.html</welcome-file>\n  </welcome-file-list>\n</web-app>\n```\n\n9. SSM基本配置完了，其他功能需要的时候再加，现在新建文件夹  \n  * java/cn.xx.xx/controller  // controller层\n  * java/cn.xx.xx/service // service层\n  * java/cn.xx.xx/service/impl // service层接口的实现类\n  * webapp/index.html\n\n10. 在controller里面新建一个UserController类，  \n进行restAPI的书写,api使用url: **api/user/hello**\n```\n@Controller\n@RequestMapping(\"api/user\")\npublic class UserController {\n\n    @RequestMapping(value = \"hello\", method = RequestMethod.GET) \n    @ResponseBody // 要返回json数据\n    public Map login(HttpSession httpSession) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        \n        try {\n          map.put(\"errorCode\", 0);\n          map.put(\"message\", \"hello\");\n        } catch (Exception e) {\n            map.put(\"errorCode\", 1);\n            map.put(\"errorMessage\", \"未知错误\");\n        }\n        return map;\n    }\n```\n\n11. 一个接口写好，然后配置服务器启动项目  \n  1.![3](3.png)  \n  2.![4](4.png)  \n  3.![5](5.png)  \n  然后点击**apply** => **OK**  \n项目启动，打开地址栏，追加输入**api/user/hello**，拿到数据OK，后台走通\n\n### 前端部分\n12. 后台暂时放置，开始写前端**[前端部分代码](https://github.com/slipkinem/vue-admin)**\n#### 前端框架用的VUE，UI框架用的饿了么开源的element_ui\n  * 总概况：vue+vue-router+vue-resource+vuex+element_ui\n13. **用npm下载vue-cli**\n  * 用vue-cli生成webpack项目骨架\n  * npm install 下载所有依赖\n14. ","slug":"java-ssm","published":1,"updated":"2017-08-22T06:41:58.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqqr000br4v3173qxjy4","content":"<h1 id=\"SSM整合流程\"><a href=\"#SSM整合流程\" class=\"headerlink\" title=\"SSM整合流程\"></a>SSM整合流程</h1><h2 id=\"spring-spring-mvc-mybatis-maven\"><a href=\"#spring-spring-mvc-mybatis-maven\" class=\"headerlink\" title=\"spring spring-mvc mybatis maven\"></a>spring spring-mvc mybatis maven</h2><ul>\n<li>web前端项目的源码<a href=\"https://github.com/slipkinem/vue-admin\" target=\"_blank\" rel=\"external\">vue-admin</a></li>\n<li>数据库的sql文件<a href=\"vue_admin.sql\">vue_admin.sql</a></li>\n</ul>\n<h3 id=\"IDE-idea\"><a href=\"#IDE-idea\" class=\"headerlink\" title=\"IDE idea\"></a>IDE idea</h3><ol>\n<li>File =&gt; new Project =&gt; maven =&gt; create from archetype =&gt; <strong>maven-archetype-webapp</strong><br><img src=\"/2017/04/25/java-ssm/1.png\" alt=\"1\"></li>\n<li><p>一直点击next直到finished，maven会自动创建一个项目目录<br><img src=\"/2017/04/25/java-ssm/2.png\" alt=\"2\"></p>\n<ul>\n<li>最终项目目录结构图  <a id=\"more\"></a>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\">│  <span class=\"selector-class\">.gitignore</span></div><div class=\"line\">│  pom<span class=\"selector-class\">.xml</span></div><div class=\"line\">│  README<span class=\"selector-class\">.md</span></div><div class=\"line\">│  tree<span class=\"selector-class\">.txt</span></div><div class=\"line\">│  </div><div class=\"line\">├─src</div><div class=\"line\">│  └─main</div><div class=\"line\">│      ├─java</div><div class=\"line\">│      │  └─cn</div><div class=\"line\">│      │      └─lvsen</div><div class=\"line\">│      │          └─test</div><div class=\"line\">│      │              ├─controller</div><div class=\"line\">│      │              │      TableController<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      UserController<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─dao</div><div class=\"line\">│      │              │      TableDataMapper<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      UserMapper<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─interceptor</div><div class=\"line\">│      │              │      AuthInterceptor<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─mapping</div><div class=\"line\">│      │              │      TableDataMapper<span class=\"selector-class\">.xml</span></div><div class=\"line\">│      │              │      UserMapper<span class=\"selector-class\">.xml</span></div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─model</div><div class=\"line\">│      │              │      TableData<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      TableDataExample<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      User<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      UserExample<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              └─service</div><div class=\"line\">│      │                  │  TableService<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │                  │  UserService<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │                  │  </div><div class=\"line\">│      │                  └─impl</div><div class=\"line\">│      │                          TableServiceImpl<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │                          UserServiceImpl<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │                          </div><div class=\"line\">│      ├─resources</div><div class=\"line\">│      │  │  generatorConfig<span class=\"selector-class\">.xml</span></div><div class=\"line\">│      │  │  jdbc<span class=\"selector-class\">.properties</span></div><div class=\"line\">│      │  │  logback<span class=\"selector-class\">.xml</span><span class=\"selector-class\">.bak</span></div><div class=\"line\">│      │  │  </div><div class=\"line\">│      │  └─spring</div><div class=\"line\">│      │          spring-mvc<span class=\"selector-class\">.xml</span></div><div class=\"line\">│      │          spring-mybatis<span class=\"selector-class\">.xml</span></div><div class=\"line\">│      │          </div><div class=\"line\">│      └─webapp</div><div class=\"line\">│          │  index<span class=\"selector-class\">.html</span></div><div class=\"line\">│          │  index<span class=\"selector-class\">.jsp</span></div><div class=\"line\">│          │  </div><div class=\"line\">│          ├─static</div><div class=\"line\">│          │  ├─css</div><div class=\"line\">│          │  │      app<span class=\"selector-class\">.f3c8e005c2be0a746136766675898059</span><span class=\"selector-class\">.css</span></div><div class=\"line\">│          │  │      app<span class=\"selector-class\">.f3c8e005c2be0a746136766675898059</span><span class=\"selector-class\">.css</span><span class=\"selector-class\">.gz</span></div><div class=\"line\">│          │  │      </div><div class=\"line\">│          │  ├─fonts</div><div class=\"line\">│          │  │      element-icons<span class=\"selector-class\">.b02bdc1</span><span class=\"selector-class\">.ttf</span></div><div class=\"line\">│          │  │      </div><div class=\"line\">│          │  └─js</div><div class=\"line\">│          │          <span class=\"number\">0.105</span>cd4667842b0092158<span class=\"selector-class\">.js</span></div><div class=\"line\">│          │          <span class=\"number\">1.3</span>f78774435db7aa5de2a<span class=\"selector-class\">.js</span></div><div class=\"line\">│          │          app.<span class=\"number\">3</span>ec6fa4bebfb1bb58a2b<span class=\"selector-class\">.js</span></div><div class=\"line\">│          │          app.<span class=\"number\">3</span>ec6fa4bebfb1bb58a2b<span class=\"selector-class\">.js</span><span class=\"selector-class\">.gz</span></div><div class=\"line\">│          │          manifest<span class=\"selector-class\">.b0bb778337a7d07c6313</span><span class=\"selector-class\">.js</span></div><div class=\"line\">│          │          vendor<span class=\"selector-class\">.bbf93d5282d3216eb30e</span><span class=\"selector-class\">.js</span></div><div class=\"line\">│          │          vendor<span class=\"selector-class\">.bbf93d5282d3216eb30e</span><span class=\"selector-class\">.js</span><span class=\"selector-class\">.gz</span></div><div class=\"line\">│          │          </div><div class=\"line\">│          └─WEB-INF</div><div class=\"line\">│                  web<span class=\"selector-class\">.xml</span></div><div class=\"line\">│                  </div><div class=\"line\">└─test</div><div class=\"line\">        TestHello.java</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>在创建的POM里面添加依赖<br> pom.xml</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span></div><div class=\"line\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>article Maven Webapp<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>4.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--测试--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--spring--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jdbc连接池 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 事务管理 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--spring测试用--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 注解扫描 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- MVC --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 切面，将日志记录，事务等分离开来 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- mybatis和spring结合用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- mysql连接驱动 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.38<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 连接数据库 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- mybatis --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 转换json用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jackson转换json用 @ResponseBody默认调用jackson，将java对象转为json --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 分页插件 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- javaHttp基础包 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 日志 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.24<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j要配合其他日志包运行，slf4j起个管理的作用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 防止package打包不到XML--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!-- mybatis生成代码插件 --&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!-- 生成文件的配置 --&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class=\"tag\">&lt;/<span class=\"name\">configurationFile</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">verbose</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">verbose</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">overwrite</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">overwrite</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- maven插件 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置mybatisGeneratorConfig，需要连接数据库，<br> 将准备的sql文件导入数据库中<a href=\"vue_admin.sql\">vue_admin.sql</a><br>generatorConfig.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration</span></div><div class=\"line\">    PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</div><div class=\"line\">    \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--&lt;properties resource=\"jdbc.properties\"/&gt;--&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--连接mysql的jar包--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">classPathEntry</span></span></div><div class=\"line\">      <span class=\"attr\">location</span>=<span class=\"string\">\"C:/Users/**/.m2/repository/mysql/mysql-connector-java/5.1.29/mysql-connector-java-5.1.29.jar\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jdbc连接 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span></span></div><div class=\"line\">                    <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"jdbc:mysql://localhost:3306/vue_admin\"</span></div><div class=\"line\">                    <span class=\"attr\">userId</span>=<span class=\"string\">\"**\"</span></div><div class=\"line\">                    <span class=\"attr\">password</span>=<span class=\"string\">\"**\"</span>/&gt;</div><div class=\"line\">    <span class=\"comment\">&lt;!-- 生成model =》 数据层 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.model\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 生成mapper 存有mybatis的数据库操作xml --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.mapping\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 存有mappper的接口类，mybatis会自动生成实体类，将mapper和dao连接起来 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.dao\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 表的名字 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_table\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"TableData\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_user\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"User\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置resources/spring/spring-mvc.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></div><div class=\"line\">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--扫描包，查注解--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"cn.lvsen.test\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--映射器与适配器，去掉@ResponseBody就会出问题--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 静态资源放置地 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/**\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"static\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--&lt;mvc:resources mapping=\"/css/**\" location=\"static\" /&gt;--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span> /&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 拦截器 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/api/**\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.lvsen.test.interceptor.AuthInterceptor\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 视图 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"viewResolver\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span></span></div><div class=\"line\">        <span class=\"attr\">p:prefix</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">p:suffix</span>=<span class=\"string\">\".html\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置resources/spring/spring-mybatis.xml</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</div><div class=\"line\">  <span class=\"comment\">&lt;!--引入jdbc的配置文件--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"propertyConfigurer\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"location\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:jdbc.properties\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--jdbc连接数据库基本配置--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.driver&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.url&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.username&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.password&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring和mybatis结合的配置--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:cn/lvsen/test/mapping/*Mapper.xml\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"plugins\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.github.pagehelper.PageInterceptor\"</span>&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!--少了这句话会导致空指针异常--&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"properties\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--dao接口，sping会自动查找其中的类 dao ——&gt; 数据访问层 dao映射的mapper，去掉启动报错--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"cn.lvsen.test.dao\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--对应上面id=\"sqlSessionFactory\"--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>spring-mybatis.xml配置时用了<strong>jdbc.properties</strong>这是为了方便管理连接<br> resources/jdbc.properties的配置</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">jdbc.<span class=\"attr\">driver=com.mysql.jdbc.Driver</span></div><div class=\"line\">jdbc.<span class=\"attr\">url=jdbc:mysql://localhost:3306/vue_admin?useUnicode=true&amp;characterEncoding=UTF-8</span></div><div class=\"line\">jdbc.<span class=\"attr\">username=**</span></div><div class=\"line\">jdbc.<span class=\"attr\">password=**</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>web.xml配置，web.xml是这个web项目的入口  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span> <span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span></div><div class=\"line\">         <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>Archetype Created Web Application<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring和mybatis的配置文件--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-mybatis.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring监听器--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--解决乱码--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>SpringEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>forceEncoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--映射的路径--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>SpringEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 声明静态资源类型，加入spring扫描 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.html<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring MVC 核心分发器--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>SpringMvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>SpringMvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 首页，可以多个，根据顺来显示--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.html<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>SSM基本配置完了，其他功能需要的时候再加，现在新建文件夹  </p>\n<ul>\n<li>java/cn.xx.xx/controller  // controller层</li>\n<li>java/cn.xx.xx/service // service层</li>\n<li>java/cn.xx.xx/service/impl // service层接口的实现类</li>\n<li>webapp/index.html</li>\n</ul>\n</li>\n<li><p>在controller里面新建一个UserController类，<br>进行restAPI的书写,api使用url: <strong>api/user/hello</strong></p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Controller</div><div class=\"line\">@RequestMapping(<span class=\"string\">\"api/user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> class UserController &#123;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(value = <span class=\"string\">\"hello\"</span>, method = RequestMethod.GET) </div><div class=\"line\">    @ResponseBody <span class=\"comment\">// 要返回json数据</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Map login(HttpSession httpSession) &#123;</div><div class=\"line\">        Map&lt;<span class=\"keyword\">String</span>, Object&gt; <span class=\"built_in\">map</span> = <span class=\"keyword\">new</span> HashMap&lt;<span class=\"keyword\">String</span>, Object&gt;();</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">try</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">map</span>.<span class=\"built_in\">put</span>(<span class=\"string\">\"errorCode\"</span>, <span class=\"number\">0</span>);</div><div class=\"line\">          <span class=\"built_in\">map</span>.<span class=\"built_in\">put</span>(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"hello\"</span>);</div><div class=\"line\">        &#125; <span class=\"built_in\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"built_in\">map</span>.<span class=\"built_in\">put</span>(<span class=\"string\">\"errorCode\"</span>, <span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"built_in\">map</span>.<span class=\"built_in\">put</span>(<span class=\"string\">\"errorMessage\"</span>, <span class=\"string\">\"未知错误\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">return</span> <span class=\"built_in\">map</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>一个接口写好，然后配置服务器启动项目<br>1.<img src=\"/2017/04/25/java-ssm/3.png\" alt=\"3\"><br>2.<img src=\"/2017/04/25/java-ssm/4.png\" alt=\"4\"><br>3.<img src=\"/2017/04/25/java-ssm/5.png\" alt=\"5\"><br>然后点击<strong>apply</strong> =&gt; <strong>OK</strong><br>项目启动，打开地址栏，追加输入<strong>api/user/hello</strong>，拿到数据OK，后台走通</p>\n</li>\n</ol>\n<h3 id=\"前端部分\"><a href=\"#前端部分\" class=\"headerlink\" title=\"前端部分\"></a>前端部分</h3><ol>\n<li>后台暂时放置，开始写前端<strong><a href=\"https://github.com/slipkinem/vue-admin\" target=\"_blank\" rel=\"external\">前端部分代码</a></strong><h4 id=\"前端框架用的VUE，UI框架用的饿了么开源的element-ui\"><a href=\"#前端框架用的VUE，UI框架用的饿了么开源的element-ui\" class=\"headerlink\" title=\"前端框架用的VUE，UI框架用的饿了么开源的element_ui\"></a>前端框架用的VUE，UI框架用的饿了么开源的element_ui</h4><ul>\n<li>总概况：vue+vue-router+vue-resource+vuex+element_ui</li>\n</ul>\n</li>\n<li><strong>用npm下载vue-cli</strong><ul>\n<li>用vue-cli生成webpack项目骨架</li>\n<li>npm install 下载所有依赖</li>\n</ul>\n</li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"SSM整合流程\"><a href=\"#SSM整合流程\" class=\"headerlink\" title=\"SSM整合流程\"></a>SSM整合流程</h1><h2 id=\"spring-spring-mvc-mybatis-maven\"><a href=\"#spring-spring-mvc-mybatis-maven\" class=\"headerlink\" title=\"spring spring-mvc mybatis maven\"></a>spring spring-mvc mybatis maven</h2><ul>\n<li>web前端项目的源码<a href=\"https://github.com/slipkinem/vue-admin\">vue-admin</a></li>\n<li>数据库的sql文件<a href=\"vue_admin.sql\">vue_admin.sql</a></li>\n</ul>\n<h3 id=\"IDE-idea\"><a href=\"#IDE-idea\" class=\"headerlink\" title=\"IDE idea\"></a>IDE idea</h3><ol>\n<li>File =&gt; new Project =&gt; maven =&gt; create from archetype =&gt; <strong>maven-archetype-webapp</strong><br><img src=\"/2017/04/25/java-ssm/1.png\" alt=\"1\"></li>\n<li><p>一直点击next直到finished，maven会自动创建一个项目目录<br><img src=\"/2017/04/25/java-ssm/2.png\" alt=\"2\"></p>\n<ul>\n<li>最终项目目录结构图</li></ul></li></ol>","more":"<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\">│  <span class=\"selector-class\">.gitignore</span></div><div class=\"line\">│  pom<span class=\"selector-class\">.xml</span></div><div class=\"line\">│  README<span class=\"selector-class\">.md</span></div><div class=\"line\">│  tree<span class=\"selector-class\">.txt</span></div><div class=\"line\">│  </div><div class=\"line\">├─src</div><div class=\"line\">│  └─main</div><div class=\"line\">│      ├─java</div><div class=\"line\">│      │  └─cn</div><div class=\"line\">│      │      └─lvsen</div><div class=\"line\">│      │          └─test</div><div class=\"line\">│      │              ├─controller</div><div class=\"line\">│      │              │      TableController<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      UserController<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─dao</div><div class=\"line\">│      │              │      TableDataMapper<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      UserMapper<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─interceptor</div><div class=\"line\">│      │              │      AuthInterceptor<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─mapping</div><div class=\"line\">│      │              │      TableDataMapper<span class=\"selector-class\">.xml</span></div><div class=\"line\">│      │              │      UserMapper<span class=\"selector-class\">.xml</span></div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─model</div><div class=\"line\">│      │              │      TableData<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      TableDataExample<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      User<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      UserExample<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              └─service</div><div class=\"line\">│      │                  │  TableService<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │                  │  UserService<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │                  │  </div><div class=\"line\">│      │                  └─impl</div><div class=\"line\">│      │                          TableServiceImpl<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │                          UserServiceImpl<span class=\"selector-class\">.java</span></div><div class=\"line\">│      │                          </div><div class=\"line\">│      ├─resources</div><div class=\"line\">│      │  │  generatorConfig<span class=\"selector-class\">.xml</span></div><div class=\"line\">│      │  │  jdbc<span class=\"selector-class\">.properties</span></div><div class=\"line\">│      │  │  logback<span class=\"selector-class\">.xml</span><span class=\"selector-class\">.bak</span></div><div class=\"line\">│      │  │  </div><div class=\"line\">│      │  └─spring</div><div class=\"line\">│      │          spring-mvc<span class=\"selector-class\">.xml</span></div><div class=\"line\">│      │          spring-mybatis<span class=\"selector-class\">.xml</span></div><div class=\"line\">│      │          </div><div class=\"line\">│      └─webapp</div><div class=\"line\">│          │  index<span class=\"selector-class\">.html</span></div><div class=\"line\">│          │  index<span class=\"selector-class\">.jsp</span></div><div class=\"line\">│          │  </div><div class=\"line\">│          ├─static</div><div class=\"line\">│          │  ├─css</div><div class=\"line\">│          │  │      app<span class=\"selector-class\">.f3c8e005c2be0a746136766675898059</span><span class=\"selector-class\">.css</span></div><div class=\"line\">│          │  │      app<span class=\"selector-class\">.f3c8e005c2be0a746136766675898059</span><span class=\"selector-class\">.css</span><span class=\"selector-class\">.gz</span></div><div class=\"line\">│          │  │      </div><div class=\"line\">│          │  ├─fonts</div><div class=\"line\">│          │  │      element-icons<span class=\"selector-class\">.b02bdc1</span><span class=\"selector-class\">.ttf</span></div><div class=\"line\">│          │  │      </div><div class=\"line\">│          │  └─js</div><div class=\"line\">│          │          <span class=\"number\">0.105</span>cd4667842b0092158<span class=\"selector-class\">.js</span></div><div class=\"line\">│          │          <span class=\"number\">1.3</span>f78774435db7aa5de2a<span class=\"selector-class\">.js</span></div><div class=\"line\">│          │          app.<span class=\"number\">3</span>ec6fa4bebfb1bb58a2b<span class=\"selector-class\">.js</span></div><div class=\"line\">│          │          app.<span class=\"number\">3</span>ec6fa4bebfb1bb58a2b<span class=\"selector-class\">.js</span><span class=\"selector-class\">.gz</span></div><div class=\"line\">│          │          manifest<span class=\"selector-class\">.b0bb778337a7d07c6313</span><span class=\"selector-class\">.js</span></div><div class=\"line\">│          │          vendor<span class=\"selector-class\">.bbf93d5282d3216eb30e</span><span class=\"selector-class\">.js</span></div><div class=\"line\">│          │          vendor<span class=\"selector-class\">.bbf93d5282d3216eb30e</span><span class=\"selector-class\">.js</span><span class=\"selector-class\">.gz</span></div><div class=\"line\">│          │          </div><div class=\"line\">│          └─WEB-INF</div><div class=\"line\">│                  web<span class=\"selector-class\">.xml</span></div><div class=\"line\">│                  </div><div class=\"line\">└─test</div><div class=\"line\">        TestHello.java</div></pre></td></tr></table></figure>\n\n\n\n<li><p>在创建的POM里面添加依赖<br> pom.xml</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span></div><div class=\"line\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>article Maven Webapp<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>4.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--测试--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--spring--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jdbc连接池 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 事务管理 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--spring测试用--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 注解扫描 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- MVC --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 切面，将日志记录，事务等分离开来 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- mybatis和spring结合用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- mysql连接驱动 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.38<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 连接数据库 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- mybatis --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 转换json用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jackson转换json用 @ResponseBody默认调用jackson，将java对象转为json --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 分页插件 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- javaHttp基础包 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 日志 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.24<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j要配合其他日志包运行，slf4j起个管理的作用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 防止package打包不到XML--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!-- mybatis生成代码插件 --&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!-- 生成文件的配置 --&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class=\"tag\">&lt;/<span class=\"name\">configurationFile</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">verbose</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">verbose</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">overwrite</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">overwrite</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- maven插件 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置mybatisGeneratorConfig，需要连接数据库，<br> 将准备的sql文件导入数据库中<a href=\"vue_admin.sql\">vue_admin.sql</a><br>generatorConfig.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration</span></div><div class=\"line\">    PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</div><div class=\"line\">    \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--&lt;properties resource=\"jdbc.properties\"/&gt;--&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--连接mysql的jar包--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">classPathEntry</span></span></div><div class=\"line\">      <span class=\"attr\">location</span>=<span class=\"string\">\"C:/Users/**/.m2/repository/mysql/mysql-connector-java/5.1.29/mysql-connector-java-5.1.29.jar\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jdbc连接 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span></span></div><div class=\"line\">                    <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"jdbc:mysql://localhost:3306/vue_admin\"</span></div><div class=\"line\">                    <span class=\"attr\">userId</span>=<span class=\"string\">\"**\"</span></div><div class=\"line\">                    <span class=\"attr\">password</span>=<span class=\"string\">\"**\"</span>/&gt;</div><div class=\"line\">    <span class=\"comment\">&lt;!-- 生成model =》 数据层 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.model\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 生成mapper 存有mybatis的数据库操作xml --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.mapping\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 存有mappper的接口类，mybatis会自动生成实体类，将mapper和dao连接起来 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.dao\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 表的名字 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_table\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"TableData\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_user\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"User\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置resources/spring/spring-mvc.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></div><div class=\"line\">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--扫描包，查注解--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"cn.lvsen.test\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--映射器与适配器，去掉@ResponseBody就会出问题--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 静态资源放置地 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/**\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"static\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--&lt;mvc:resources mapping=\"/css/**\" location=\"static\" /&gt;--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span> /&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 拦截器 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/api/**\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.lvsen.test.interceptor.AuthInterceptor\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 视图 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"viewResolver\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span></span></div><div class=\"line\">        <span class=\"attr\">p:prefix</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">p:suffix</span>=<span class=\"string\">\".html\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置resources/spring/spring-mybatis.xml</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</div><div class=\"line\">  <span class=\"comment\">&lt;!--引入jdbc的配置文件--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"propertyConfigurer\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"location\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:jdbc.properties\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--jdbc连接数据库基本配置--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.driver&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.url&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.username&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.password&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring和mybatis结合的配置--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:cn/lvsen/test/mapping/*Mapper.xml\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"plugins\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.github.pagehelper.PageInterceptor\"</span>&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!--少了这句话会导致空指针异常--&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"properties\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--dao接口，sping会自动查找其中的类 dao ——&gt; 数据访问层 dao映射的mapper，去掉启动报错--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"cn.lvsen.test.dao\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--对应上面id=\"sqlSessionFactory\"--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>spring-mybatis.xml配置时用了<strong>jdbc.properties</strong>这是为了方便管理连接<br> resources/jdbc.properties的配置</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">jdbc.<span class=\"attr\">driver=com.mysql.jdbc.Driver</span></div><div class=\"line\">jdbc.<span class=\"attr\">url=jdbc:mysql://localhost:3306/vue_admin?useUnicode=true&amp;characterEncoding=UTF-8</span></div><div class=\"line\">jdbc.<span class=\"attr\">username=**</span></div><div class=\"line\">jdbc.<span class=\"attr\">password=**</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>web.xml配置，web.xml是这个web项目的入口  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span> <span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span></div><div class=\"line\">         <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>Archetype Created Web Application<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring和mybatis的配置文件--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-mybatis.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring监听器--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--解决乱码--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>SpringEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>forceEncoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--映射的路径--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>SpringEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 声明静态资源类型，加入spring扫描 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.html<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring MVC 核心分发器--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>SpringMvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>SpringMvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 首页，可以多个，根据顺来显示--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.html<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>SSM基本配置完了，其他功能需要的时候再加，现在新建文件夹  </p>\n<ul>\n<li>java/cn.xx.xx/controller  // controller层</li>\n<li>java/cn.xx.xx/service // service层</li>\n<li>java/cn.xx.xx/service/impl // service层接口的实现类</li>\n<li>webapp/index.html</li>\n</ul>\n</li>\n<li><p>在controller里面新建一个UserController类，<br>进行restAPI的书写,api使用url: <strong>api/user/hello</strong></p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Controller</div><div class=\"line\">@RequestMapping(<span class=\"string\">\"api/user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> class UserController &#123;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(value = <span class=\"string\">\"hello\"</span>, method = RequestMethod.GET) </div><div class=\"line\">    @ResponseBody <span class=\"comment\">// 要返回json数据</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Map login(HttpSession httpSession) &#123;</div><div class=\"line\">        Map&lt;<span class=\"keyword\">String</span>, Object&gt; <span class=\"built_in\">map</span> = <span class=\"keyword\">new</span> HashMap&lt;<span class=\"keyword\">String</span>, Object&gt;();</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">try</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">map</span>.<span class=\"built_in\">put</span>(<span class=\"string\">\"errorCode\"</span>, <span class=\"number\">0</span>);</div><div class=\"line\">          <span class=\"built_in\">map</span>.<span class=\"built_in\">put</span>(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"hello\"</span>);</div><div class=\"line\">        &#125; <span class=\"built_in\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"built_in\">map</span>.<span class=\"built_in\">put</span>(<span class=\"string\">\"errorCode\"</span>, <span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"built_in\">map</span>.<span class=\"built_in\">put</span>(<span class=\"string\">\"errorMessage\"</span>, <span class=\"string\">\"未知错误\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">return</span> <span class=\"built_in\">map</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>一个接口写好，然后配置服务器启动项目<br>1.<img src=\"/2017/04/25/java-ssm/3.png\" alt=\"3\"><br>2.<img src=\"/2017/04/25/java-ssm/4.png\" alt=\"4\"><br>3.<img src=\"/2017/04/25/java-ssm/5.png\" alt=\"5\"><br>然后点击<strong>apply</strong> =&gt; <strong>OK</strong><br>项目启动，打开地址栏，追加输入<strong>api/user/hello</strong>，拿到数据OK，后台走通</p>\n</li>\n\n<h3 id=\"前端部分\"><a href=\"#前端部分\" class=\"headerlink\" title=\"前端部分\"></a>前端部分</h3><ol>\n<li>后台暂时放置，开始写前端<strong><a href=\"https://github.com/slipkinem/vue-admin\">前端部分代码</a></strong><h4 id=\"前端框架用的VUE，UI框架用的饿了么开源的element-ui\"><a href=\"#前端框架用的VUE，UI框架用的饿了么开源的element-ui\" class=\"headerlink\" title=\"前端框架用的VUE，UI框架用的饿了么开源的element_ui\"></a>前端框架用的VUE，UI框架用的饿了么开源的element_ui</h4><ul>\n<li>总概况：vue+vue-router+vue-resource+vuex+element_ui</li>\n</ul>\n</li>\n<li><strong>用npm下载vue-cli</strong><ul>\n<li>用vue-cli生成webpack项目骨架</li>\n<li>npm install 下载所有依赖</li>\n</ul>\n</li>\n<li></li>\n</ol>"},{"title":"所谓publish-subscribe","date":"2017-04-22T12:14:58.000Z","_content":"## 所谓观察者模式 publish/subscribe\n1. subscribe事件订阅/事件监听 就是将事件和事件的callback，  \n添加到一个需要监听执行事件队列里面\n    {\n      eventName: [callback1, callback1],\n      eventName: [callback]\n    }\n2. 接收到publish发布事件就是将subscribe的事件从队列拿出来执行\n3. 在外看来就像是一直在监测这个事件，然后接收到publish发布的，  \n执行监测的事件callback","source":"_posts/2017/04/所谓publish-subscribe.md","raw":"---\ntitle: 所谓publish-subscribe\ncategories: 课外学习\ndate: 2017-04-22 20:14:58\ntags: \n  - 设计模式\n  - javascript\n---\n## 所谓观察者模式 publish/subscribe\n1. subscribe事件订阅/事件监听 就是将事件和事件的callback，  \n添加到一个需要监听执行事件队列里面\n    {\n      eventName: [callback1, callback1],\n      eventName: [callback]\n    }\n2. 接收到publish发布事件就是将subscribe的事件从队列拿出来执行\n3. 在外看来就像是一直在监测这个事件，然后接收到publish发布的，  \n执行监测的事件callback","slug":"所谓publish-subscribe","published":1,"updated":"2017-05-15T09:47:12.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqr1000er4v3qlobpt3c","content":"<h2 id=\"所谓观察者模式-publish-subscribe\"><a href=\"#所谓观察者模式-publish-subscribe\" class=\"headerlink\" title=\"所谓观察者模式 publish/subscribe\"></a>所谓观察者模式 publish/subscribe</h2><ol>\n<li>subscribe事件订阅/事件监听 就是将事件和事件的callback，<br>添加到一个需要监听执行事件队列里面<br> {<br>   eventName: [callback1, callback1],<br>   eventName: [callback]<br> }</li>\n<li>接收到publish发布事件就是将subscribe的事件从队列拿出来执行</li>\n<li>在外看来就像是一直在监测这个事件，然后接收到publish发布的，<br>执行监测的事件callback</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"所谓观察者模式-publish-subscribe\"><a href=\"#所谓观察者模式-publish-subscribe\" class=\"headerlink\" title=\"所谓观察者模式 publish/subscribe\"></a>所谓观察者模式 publish/subscribe</h2><ol>\n<li>subscribe事件订阅/事件监听 就是将事件和事件的callback，<br>添加到一个需要监听执行事件队列里面<br> {<br>   eventName: [callback1, callback1],<br>   eventName: [callback]<br> }</li>\n<li>接收到publish发布事件就是将subscribe的事件从队列拿出来执行</li>\n<li>在外看来就像是一直在监测这个事件，然后接收到publish发布的，<br>执行监测的事件callback</li>\n</ol>\n"},{"title":"vue-cli创建的任务和后台交互cookie及restAPI处理","date":"2017-04-14T03:34:51.000Z","_content":"# 在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie\n\n## session简述\n### 什么是session？\n  * session是服务器储存信息的一种方式，一般称之为会话，  \n    以java为例``request.getSession().setAttribute(key, value)``在创建session实例时会生成一个唯一的ID，浏览器发送请求时，  \n    会将set-cookie返回给浏览器，浏览器自动存储在cookie中，  \n    在tomcat中，此Cookie叫做JSESSIONID\n  * session关键在于sessionID所以不用cookie存也是可以的，比如可以放在request param里面，只要需要时前台发过来就行\n<!-- more -->\n### 什么是cookie？\n  * cookie是客户端（浏览器端）存储信息的一种方式，服务器可以设置浏览器set-cookie标头  \n    浏览器收到标头与数值，会以文件的形式存在与计算机中。浏览器发送请求时会自动将cookie发给服务端 \n     \n#### cookie的属性 domain和path\n  * domain：domain表示的是cookie所在的域，默认为请求的地址，如网址为www.jb51.net/test/test.aspx，  \n    那么domain默认为www.jb51.net。而跨域访问，如域A为t1.test.com，域B为t2.test.com，  \n    那么在域A生产一个令域A和域B都能访问的cookie就要将该cookie的domain设置为.test.com；  \n    如果要在域A生产一个令域A不能访问而域B能访问的cookie就要将该cookie的domain设置为t2.test.com。\n    \n  * path: path表示cookie所在的目录，如baidu.com，cookie默认为根目录'/'。baidu.com/wenku/，则path=/wenku/；  \n    如果在biadu.com/wenku/下面设置set-cookie，则在baidu.com下面浏览器会因为path不对应，导致在baidu.com下set-cookie失败  \n  ![chrome下cookie](chrome下cookie.png)  \n\n### session的流程\n  1. request.getSession().setAttribute(\"username\", \"listen\")\n  2. 在http response header里面设置set-cookie返回头 set-cookie: JSESSIONID=xxxxxxxx;path=/;\n  3. 浏览器看到set-cookie信息，并且设置的domain和path与浏览器当前一致，否则等待匹配的path和domain，存储以后会自动清除掉set-cookie\n  4. 浏览器向服务端发送请求，将存储的cookie以key=value的形式放到请求头里面\n  5. 服务端获取session request.getSession().getAttribute(\"username\")\n      * 从request请求头里面获取JSESSIONID，并找到与之对称的session实例，从此实例里面获取username\n      * 一个请求session对应一个实例，sessionId是区分实例的关键\n\n### 回到问题\n  * 现在代理服务器的URI是 localhost:8080, api服务器URI是localhost:8084/articlepr/\n  * api服务器设置session时，set-cookie是这样set-cookie:JSESSIONID=xxxx;path=/articlepr/;\n  * 现set-cookie的domain和浏览器URI（代理服务器）都为localhost，而path不一样，所以会导致set-cookie浏览器存储cookie失败，后台也就拿不到JSESSIONID了\n\n### 解决问题\n既然是path不一样就修改path\n  1. 方案 后台修改path，还得让后台搞，麻烦\n  2. 方案 给代理服务器加上path后缀，使其和api服务器一样，但是这样对proxyTable有一点副作用\n```$xslt\nmodule.exports = app.listen(port, function (err) {\n  if (err) {\n    console.log(err)\n    return\n  }\n  var uri = `http://localhost:${port}/articlepr/`\n  console.log('Listening at ' + uri + '\\n')\n\n  // when env is testing, don't need open it\n  if (process.env.NODE_ENV !== 'testing') {\n    opn(uri)\n  }\n})\n```\n  3. 方案 代理服务器重写path, 现使用的方式，不麻烦后台，不修改其他东西\n```\n let options = proxyTable[ctx]\n\n  if (typeof options === 'string') {\n    options = {\n      target: options,\n      changeOrigin: true,\n\n      onProxyRes(proxyRes, req, res) {\n      proxyRes.headers['set-cookie'] = \n        [].slice.call(proxyRes.headers['set-cookie'] || '')  \n        .map(item => {\n          return item.replace(/Path=\\/.*?;/, 'Path=/;')\n        })\n      }\n\n    }\n  }\n```\n\n这段代码就是将proxyRes.headers['set-cookie']的path=/xx 转变成 path=/\n\n\n### 有时候在做代理请求的时候，需要拦截处理req的设置，  \n查看**http-proxy-middleware**的文档，可以用filter做拦截，代码：\n```\napp.use(proxyMiddleware((pathName, req) => {\n    pathName = req.originalUrl = req.url = `${rootAPI}${req.url}`\n\n    return pathName.match(ctx)\n  }, options))\n```\n\n#### 最后vue proxy这块的总代码：\n```\nObject.keys(proxyTable).forEach(ctx => {\n  let options = proxyTable[ctx]\n\n  if (typeof options === 'string') {\n    options = {\n      target: options,\n      changeOrigin: true,\n      onProxyRes(proxyRes, req, res) {\n        proxyRes.headers['set-cookie'] = \n          [].slice.call(proxyRes.headers['set-cookie'] || '')  \n            .map(item => {\n              return item.replace(/Path=\\/.*?;/, 'Path=/;')\n            })\n          }\n      }\n    }\n  }\n\n  app.use(proxyMiddleware((pathName, req) => {\n    pathName = req.originalUrl = req.url = `${rootAPI}${req.url}`    \n    // 可以在此处进行处理request请求\n\n    return pathName.match(ctx)\n  }, options))\n\n})\n```\n","source":"_posts/2017/04/vue-cli创建的任务和后台交互cookie及restAPI处理.md","raw":"---\ntitle: vue-cli创建的任务和后台交互cookie及restAPI处理\ncategories: 课外学习\ndate: 2017-04-14 11:34:51\ntags:\n  - vue\n  - cookie\n  - node.js\n  - javascript\n---\n# 在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie\n\n## session简述\n### 什么是session？\n  * session是服务器储存信息的一种方式，一般称之为会话，  \n    以java为例``request.getSession().setAttribute(key, value)``在创建session实例时会生成一个唯一的ID，浏览器发送请求时，  \n    会将set-cookie返回给浏览器，浏览器自动存储在cookie中，  \n    在tomcat中，此Cookie叫做JSESSIONID\n  * session关键在于sessionID所以不用cookie存也是可以的，比如可以放在request param里面，只要需要时前台发过来就行\n<!-- more -->\n### 什么是cookie？\n  * cookie是客户端（浏览器端）存储信息的一种方式，服务器可以设置浏览器set-cookie标头  \n    浏览器收到标头与数值，会以文件的形式存在与计算机中。浏览器发送请求时会自动将cookie发给服务端 \n     \n#### cookie的属性 domain和path\n  * domain：domain表示的是cookie所在的域，默认为请求的地址，如网址为www.jb51.net/test/test.aspx，  \n    那么domain默认为www.jb51.net。而跨域访问，如域A为t1.test.com，域B为t2.test.com，  \n    那么在域A生产一个令域A和域B都能访问的cookie就要将该cookie的domain设置为.test.com；  \n    如果要在域A生产一个令域A不能访问而域B能访问的cookie就要将该cookie的domain设置为t2.test.com。\n    \n  * path: path表示cookie所在的目录，如baidu.com，cookie默认为根目录'/'。baidu.com/wenku/，则path=/wenku/；  \n    如果在biadu.com/wenku/下面设置set-cookie，则在baidu.com下面浏览器会因为path不对应，导致在baidu.com下set-cookie失败  \n  ![chrome下cookie](chrome下cookie.png)  \n\n### session的流程\n  1. request.getSession().setAttribute(\"username\", \"listen\")\n  2. 在http response header里面设置set-cookie返回头 set-cookie: JSESSIONID=xxxxxxxx;path=/;\n  3. 浏览器看到set-cookie信息，并且设置的domain和path与浏览器当前一致，否则等待匹配的path和domain，存储以后会自动清除掉set-cookie\n  4. 浏览器向服务端发送请求，将存储的cookie以key=value的形式放到请求头里面\n  5. 服务端获取session request.getSession().getAttribute(\"username\")\n      * 从request请求头里面获取JSESSIONID，并找到与之对称的session实例，从此实例里面获取username\n      * 一个请求session对应一个实例，sessionId是区分实例的关键\n\n### 回到问题\n  * 现在代理服务器的URI是 localhost:8080, api服务器URI是localhost:8084/articlepr/\n  * api服务器设置session时，set-cookie是这样set-cookie:JSESSIONID=xxxx;path=/articlepr/;\n  * 现set-cookie的domain和浏览器URI（代理服务器）都为localhost，而path不一样，所以会导致set-cookie浏览器存储cookie失败，后台也就拿不到JSESSIONID了\n\n### 解决问题\n既然是path不一样就修改path\n  1. 方案 后台修改path，还得让后台搞，麻烦\n  2. 方案 给代理服务器加上path后缀，使其和api服务器一样，但是这样对proxyTable有一点副作用\n```$xslt\nmodule.exports = app.listen(port, function (err) {\n  if (err) {\n    console.log(err)\n    return\n  }\n  var uri = `http://localhost:${port}/articlepr/`\n  console.log('Listening at ' + uri + '\\n')\n\n  // when env is testing, don't need open it\n  if (process.env.NODE_ENV !== 'testing') {\n    opn(uri)\n  }\n})\n```\n  3. 方案 代理服务器重写path, 现使用的方式，不麻烦后台，不修改其他东西\n```\n let options = proxyTable[ctx]\n\n  if (typeof options === 'string') {\n    options = {\n      target: options,\n      changeOrigin: true,\n\n      onProxyRes(proxyRes, req, res) {\n      proxyRes.headers['set-cookie'] = \n        [].slice.call(proxyRes.headers['set-cookie'] || '')  \n        .map(item => {\n          return item.replace(/Path=\\/.*?;/, 'Path=/;')\n        })\n      }\n\n    }\n  }\n```\n\n这段代码就是将proxyRes.headers['set-cookie']的path=/xx 转变成 path=/\n\n\n### 有时候在做代理请求的时候，需要拦截处理req的设置，  \n查看**http-proxy-middleware**的文档，可以用filter做拦截，代码：\n```\napp.use(proxyMiddleware((pathName, req) => {\n    pathName = req.originalUrl = req.url = `${rootAPI}${req.url}`\n\n    return pathName.match(ctx)\n  }, options))\n```\n\n#### 最后vue proxy这块的总代码：\n```\nObject.keys(proxyTable).forEach(ctx => {\n  let options = proxyTable[ctx]\n\n  if (typeof options === 'string') {\n    options = {\n      target: options,\n      changeOrigin: true,\n      onProxyRes(proxyRes, req, res) {\n        proxyRes.headers['set-cookie'] = \n          [].slice.call(proxyRes.headers['set-cookie'] || '')  \n            .map(item => {\n              return item.replace(/Path=\\/.*?;/, 'Path=/;')\n            })\n          }\n      }\n    }\n  }\n\n  app.use(proxyMiddleware((pathName, req) => {\n    pathName = req.originalUrl = req.url = `${rootAPI}${req.url}`    \n    // 可以在此处进行处理request请求\n\n    return pathName.match(ctx)\n  }, options))\n\n})\n```\n","slug":"vue-cli创建的任务和后台交互cookie及restAPI处理","published":1,"updated":"2017-05-15T09:47:12.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqr5000hr4v3fl9ar8l2","content":"<h1 id=\"在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie\"><a href=\"#在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie\" class=\"headerlink\" title=\"在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie\"></a>在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie</h1><h2 id=\"session简述\"><a href=\"#session简述\" class=\"headerlink\" title=\"session简述\"></a>session简述</h2><h3 id=\"什么是session？\"><a href=\"#什么是session？\" class=\"headerlink\" title=\"什么是session？\"></a>什么是session？</h3><ul>\n<li>session是服务器储存信息的一种方式，一般称之为会话，<br>以java为例<code>request.getSession().setAttribute(key, value)</code>在创建session实例时会生成一个唯一的ID，浏览器发送请求时，<br>会将set-cookie返回给浏览器，浏览器自动存储在cookie中，<br>在tomcat中，此Cookie叫做JSESSIONID</li>\n<li>session关键在于sessionID所以不用cookie存也是可以的，比如可以放在request param里面，只要需要时前台发过来就行<a id=\"more\"></a>\n<h3 id=\"什么是cookie？\"><a href=\"#什么是cookie？\" class=\"headerlink\" title=\"什么是cookie？\"></a>什么是cookie？</h3></li>\n<li>cookie是客户端（浏览器端）存储信息的一种方式，服务器可以设置浏览器set-cookie标头<br>浏览器收到标头与数值，会以文件的形式存在与计算机中。浏览器发送请求时会自动将cookie发给服务端 </li>\n</ul>\n<h4 id=\"cookie的属性-domain和path\"><a href=\"#cookie的属性-domain和path\" class=\"headerlink\" title=\"cookie的属性 domain和path\"></a>cookie的属性 domain和path</h4><ul>\n<li><p>domain：domain表示的是cookie所在的域，默认为请求的地址，如网址为www.jb51.net/test/test.aspx，<br>那么domain默认为www.jb51.net。而跨域访问，如域A为t1.test.com，域B为t2.test.com，<br>那么在域A生产一个令域A和域B都能访问的cookie就要将该cookie的domain设置为.test.com；<br>如果要在域A生产一个令域A不能访问而域B能访问的cookie就要将该cookie的domain设置为t2.test.com。</p>\n</li>\n<li><p>path: path表示cookie所在的目录，如baidu.com，cookie默认为根目录’/‘。baidu.com/wenku/，则path=/wenku/；<br>如果在biadu.com/wenku/下面设置set-cookie，则在baidu.com下面浏览器会因为path不对应，导致在baidu.com下set-cookie失败<br><img src=\"/2017/04/14/vue-cli创建的任务和后台交互cookie及restAPI处理/chrome下cookie.png\" alt=\"chrome下cookie\">  </p>\n</li>\n</ul>\n<h3 id=\"session的流程\"><a href=\"#session的流程\" class=\"headerlink\" title=\"session的流程\"></a>session的流程</h3><ol>\n<li>request.getSession().setAttribute(“username”, “listen”)</li>\n<li>在http response header里面设置set-cookie返回头 set-cookie: JSESSIONID=xxxxxxxx;path=/;</li>\n<li>浏览器看到set-cookie信息，并且设置的domain和path与浏览器当前一致，否则等待匹配的path和domain，存储以后会自动清除掉set-cookie</li>\n<li>浏览器向服务端发送请求，将存储的cookie以key=value的形式放到请求头里面</li>\n<li>服务端获取session request.getSession().getAttribute(“username”)<ul>\n<li>从request请求头里面获取JSESSIONID，并找到与之对称的session实例，从此实例里面获取username</li>\n<li>一个请求session对应一个实例，sessionId是区分实例的关键</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"回到问题\"><a href=\"#回到问题\" class=\"headerlink\" title=\"回到问题\"></a>回到问题</h3><ul>\n<li>现在代理服务器的URI是 localhost:8080, api服务器URI是localhost:8084/articlepr/</li>\n<li>api服务器设置session时，set-cookie是这样set-cookie:JSESSIONID=xxxx;path=/articlepr/;</li>\n<li>现set-cookie的domain和浏览器URI（代理服务器）都为localhost，而path不一样，所以会导致set-cookie浏览器存储cookie失败，后台也就拿不到JSESSIONID了</li>\n</ul>\n<h3 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h3><p>既然是path不一样就修改path</p>\n<ol>\n<li>方案 后台修改path，还得让后台搞，麻烦</li>\n<li><p>方案 给代理服务器加上path后缀，使其和api服务器一样，但是这样对proxyTable有一点副作用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = app.listen(port, function (err) &#123;</div><div class=\"line\">  if (err) &#123;</div><div class=\"line\">    console.log(err)</div><div class=\"line\">    return</div><div class=\"line\">  &#125;</div><div class=\"line\">  var uri = `http://localhost:$&#123;port&#125;/articlepr/`</div><div class=\"line\">  console.log(&apos;Listening at &apos; + uri + &apos;\\n&apos;)</div><div class=\"line\"></div><div class=\"line\">  // when env is testing, don&apos;t need open it</div><div class=\"line\">  if (process.env.NODE_ENV !== &apos;testing&apos;) &#123;</div><div class=\"line\">    opn(uri)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>方案 代理服务器重写path, 现使用的方式，不麻烦后台，不修改其他东西</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">let <span class=\"keyword\">options</span> = proxyTable[ctx]</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">if</span> (typeof <span class=\"keyword\">options</span> === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">options</span> = &#123;</div><div class=\"line\">     target: <span class=\"keyword\">options</span>,</div><div class=\"line\">     changeOrigin: <span class=\"keyword\">true</span>,</div><div class=\"line\"></div><div class=\"line\">     onProxyRes(proxyRes, req, res) &#123;</div><div class=\"line\">     proxyRes.headers[<span class=\"string\">'set-cookie'</span>] = </div><div class=\"line\">       [].slice.<span class=\"keyword\">call</span>(proxyRes.headers[<span class=\"string\">'set-cookie'</span>] || <span class=\"string\">''</span>)  </div><div class=\"line\">       .map(item =&gt; &#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> item.replace(<span class=\"regexp\">/Path=\\/.*?;/</span>, <span class=\"string\">'Path=/;'</span>)</div><div class=\"line\">       &#125;)</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这段代码就是将proxyRes.headers[‘set-cookie’]的path=/xx 转变成 path=/</p>\n<h3 id=\"有时候在做代理请求的时候，需要拦截处理req的设置，\"><a href=\"#有时候在做代理请求的时候，需要拦截处理req的设置，\" class=\"headerlink\" title=\"有时候在做代理请求的时候，需要拦截处理req的设置，\"></a>有时候在做代理请求的时候，需要拦截处理req的设置，</h3><p>查看<strong>http-proxy-middleware</strong>的文档，可以用filter做拦截，代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(proxyMiddleware(<span class=\"function\">(<span class=\"params\">pathName, req</span>) =&gt;</span> &#123;</div><div class=\"line\">    pathName = req.originalUrl = req.url = <span class=\"string\">`<span class=\"subst\">$&#123;rootAPI&#125;</span><span class=\"subst\">$&#123;req.url&#125;</span>`</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pathName.match(ctx)</div><div class=\"line\">  &#125;, options))</div></pre></td></tr></table></figure></p>\n<h4 id=\"最后vue-proxy这块的总代码：\"><a href=\"#最后vue-proxy这块的总代码：\" class=\"headerlink\" title=\"最后vue proxy这块的总代码：\"></a>最后vue proxy这块的总代码：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.keys(proxyTable).forEach(<span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> options = proxyTable[ctx]</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">    options = &#123;</div><div class=\"line\">      <span class=\"attr\">target</span>: options,</div><div class=\"line\">      <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      onProxyRes(proxyRes, req, res) &#123;</div><div class=\"line\">        proxyRes.headers[<span class=\"string\">'set-cookie'</span>] = </div><div class=\"line\">          [].slice.call(proxyRes.headers[<span class=\"string\">'set-cookie'</span>] || <span class=\"string\">''</span>)  </div><div class=\"line\">            .map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</div><div class=\"line\">              <span class=\"keyword\">return</span> item.replace(<span class=\"regexp\">/Path=\\/.*?;/</span>, <span class=\"string\">'Path=/;'</span>)</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  app.use(proxyMiddleware(<span class=\"function\">(<span class=\"params\">pathName, req</span>) =&gt;</span> &#123;</div><div class=\"line\">    pathName = req.originalUrl = req.url = <span class=\"string\">`<span class=\"subst\">$&#123;rootAPI&#125;</span><span class=\"subst\">$&#123;req.url&#125;</span>`</span>    </div><div class=\"line\">    <span class=\"comment\">// 可以在此处进行处理request请求</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pathName.match(ctx)</div><div class=\"line\">  &#125;, options))</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie\"><a href=\"#在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie\" class=\"headerlink\" title=\"在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie\"></a>在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie</h1><h2 id=\"session简述\"><a href=\"#session简述\" class=\"headerlink\" title=\"session简述\"></a>session简述</h2><h3 id=\"什么是session？\"><a href=\"#什么是session？\" class=\"headerlink\" title=\"什么是session？\"></a>什么是session？</h3><ul>\n<li>session是服务器储存信息的一种方式，一般称之为会话，<br>以java为例<code>request.getSession().setAttribute(key, value)</code>在创建session实例时会生成一个唯一的ID，浏览器发送请求时，<br>会将set-cookie返回给浏览器，浏览器自动存储在cookie中，<br>在tomcat中，此Cookie叫做JSESSIONID</li>\n<li>session关键在于sessionID所以不用cookie存也是可以的，比如可以放在request param里面，只要需要时前台发过来就行</li></ul>","more":"<h3 id=\"什么是cookie？\"><a href=\"#什么是cookie？\" class=\"headerlink\" title=\"什么是cookie？\"></a>什么是cookie？</h3>\n<li>cookie是客户端（浏览器端）存储信息的一种方式，服务器可以设置浏览器set-cookie标头<br>浏览器收到标头与数值，会以文件的形式存在与计算机中。浏览器发送请求时会自动将cookie发给服务端 </li>\n\n<h4 id=\"cookie的属性-domain和path\"><a href=\"#cookie的属性-domain和path\" class=\"headerlink\" title=\"cookie的属性 domain和path\"></a>cookie的属性 domain和path</h4><ul>\n<li><p>domain：domain表示的是cookie所在的域，默认为请求的地址，如网址为www.jb51.net/test/test.aspx，<br>那么domain默认为www.jb51.net。而跨域访问，如域A为t1.test.com，域B为t2.test.com，<br>那么在域A生产一个令域A和域B都能访问的cookie就要将该cookie的domain设置为.test.com；<br>如果要在域A生产一个令域A不能访问而域B能访问的cookie就要将该cookie的domain设置为t2.test.com。</p>\n</li>\n<li><p>path: path表示cookie所在的目录，如baidu.com，cookie默认为根目录’/‘。baidu.com/wenku/，则path=/wenku/；<br>如果在biadu.com/wenku/下面设置set-cookie，则在baidu.com下面浏览器会因为path不对应，导致在baidu.com下set-cookie失败<br><img src=\"/2017/04/14/vue-cli创建的任务和后台交互cookie及restAPI处理/chrome下cookie.png\" alt=\"chrome下cookie\">  </p>\n</li>\n</ul>\n<h3 id=\"session的流程\"><a href=\"#session的流程\" class=\"headerlink\" title=\"session的流程\"></a>session的流程</h3><ol>\n<li>request.getSession().setAttribute(“username”, “listen”)</li>\n<li>在http response header里面设置set-cookie返回头 set-cookie: JSESSIONID=xxxxxxxx;path=/;</li>\n<li>浏览器看到set-cookie信息，并且设置的domain和path与浏览器当前一致，否则等待匹配的path和domain，存储以后会自动清除掉set-cookie</li>\n<li>浏览器向服务端发送请求，将存储的cookie以key=value的形式放到请求头里面</li>\n<li>服务端获取session request.getSession().getAttribute(“username”)<ul>\n<li>从request请求头里面获取JSESSIONID，并找到与之对称的session实例，从此实例里面获取username</li>\n<li>一个请求session对应一个实例，sessionId是区分实例的关键</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"回到问题\"><a href=\"#回到问题\" class=\"headerlink\" title=\"回到问题\"></a>回到问题</h3><ul>\n<li>现在代理服务器的URI是 localhost:8080, api服务器URI是localhost:8084/articlepr/</li>\n<li>api服务器设置session时，set-cookie是这样set-cookie:JSESSIONID=xxxx;path=/articlepr/;</li>\n<li>现set-cookie的domain和浏览器URI（代理服务器）都为localhost，而path不一样，所以会导致set-cookie浏览器存储cookie失败，后台也就拿不到JSESSIONID了</li>\n</ul>\n<h3 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h3><p>既然是path不一样就修改path</p>\n<ol>\n<li>方案 后台修改path，还得让后台搞，麻烦</li>\n<li><p>方案 给代理服务器加上path后缀，使其和api服务器一样，但是这样对proxyTable有一点副作用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = app.listen(port, function (err) &#123;</div><div class=\"line\">  if (err) &#123;</div><div class=\"line\">    console.log(err)</div><div class=\"line\">    return</div><div class=\"line\">  &#125;</div><div class=\"line\">  var uri = `http://localhost:$&#123;port&#125;/articlepr/`</div><div class=\"line\">  console.log(&apos;Listening at &apos; + uri + &apos;\\n&apos;)</div><div class=\"line\"></div><div class=\"line\">  // when env is testing, don&apos;t need open it</div><div class=\"line\">  if (process.env.NODE_ENV !== &apos;testing&apos;) &#123;</div><div class=\"line\">    opn(uri)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>方案 代理服务器重写path, 现使用的方式，不麻烦后台，不修改其他东西</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">let <span class=\"keyword\">options</span> = proxyTable[ctx]</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">if</span> (typeof <span class=\"keyword\">options</span> === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">options</span> = &#123;</div><div class=\"line\">     target: <span class=\"keyword\">options</span>,</div><div class=\"line\">     changeOrigin: <span class=\"keyword\">true</span>,</div><div class=\"line\"></div><div class=\"line\">     onProxyRes(proxyRes, req, res) &#123;</div><div class=\"line\">     proxyRes.headers[<span class=\"string\">'set-cookie'</span>] = </div><div class=\"line\">       [].slice.<span class=\"keyword\">call</span>(proxyRes.headers[<span class=\"string\">'set-cookie'</span>] || <span class=\"string\">''</span>)  </div><div class=\"line\">       .map(item =&gt; &#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> item.replace(<span class=\"regexp\">/Path=\\/.*?;/</span>, <span class=\"string\">'Path=/;'</span>)</div><div class=\"line\">       &#125;)</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这段代码就是将proxyRes.headers[‘set-cookie’]的path=/xx 转变成 path=/</p>\n<h3 id=\"有时候在做代理请求的时候，需要拦截处理req的设置，\"><a href=\"#有时候在做代理请求的时候，需要拦截处理req的设置，\" class=\"headerlink\" title=\"有时候在做代理请求的时候，需要拦截处理req的设置，\"></a>有时候在做代理请求的时候，需要拦截处理req的设置，</h3><p>查看<strong>http-proxy-middleware</strong>的文档，可以用filter做拦截，代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(proxyMiddleware(<span class=\"function\">(<span class=\"params\">pathName, req</span>) =&gt;</span> &#123;</div><div class=\"line\">    pathName = req.originalUrl = req.url = <span class=\"string\">`<span class=\"subst\">$&#123;rootAPI&#125;</span><span class=\"subst\">$&#123;req.url&#125;</span>`</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pathName.match(ctx)</div><div class=\"line\">  &#125;, options))</div></pre></td></tr></table></figure></p>\n<h4 id=\"最后vue-proxy这块的总代码：\"><a href=\"#最后vue-proxy这块的总代码：\" class=\"headerlink\" title=\"最后vue proxy这块的总代码：\"></a>最后vue proxy这块的总代码：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.keys(proxyTable).forEach(<span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> options = proxyTable[ctx]</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">    options = &#123;</div><div class=\"line\">      <span class=\"attr\">target</span>: options,</div><div class=\"line\">      <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      onProxyRes(proxyRes, req, res) &#123;</div><div class=\"line\">        proxyRes.headers[<span class=\"string\">'set-cookie'</span>] = </div><div class=\"line\">          [].slice.call(proxyRes.headers[<span class=\"string\">'set-cookie'</span>] || <span class=\"string\">''</span>)  </div><div class=\"line\">            .map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</div><div class=\"line\">              <span class=\"keyword\">return</span> item.replace(<span class=\"regexp\">/Path=\\/.*?;/</span>, <span class=\"string\">'Path=/;'</span>)</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  app.use(proxyMiddleware(<span class=\"function\">(<span class=\"params\">pathName, req</span>) =&gt;</span> &#123;</div><div class=\"line\">    pathName = req.originalUrl = req.url = <span class=\"string\">`<span class=\"subst\">$&#123;rootAPI&#125;</span><span class=\"subst\">$&#123;req.url&#125;</span>`</span>    </div><div class=\"line\">    <span class=\"comment\">// 可以在此处进行处理request请求</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pathName.match(ctx)</div><div class=\"line\">  &#125;, options))</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>"},{"title":"学习计划","date":"2017-04-19T08:23:55.000Z","_content":"## 学习计划清单\n**要强制按照计划来，不然总是盲目的不知道要做什么，感觉茫茫然的**  \n### 前端部分\n1. react react之前只是粗略的过了一遍，大概知道是什么原理，但没有真正做项目\n\n2. vue-admin项目的继续扩展\n\n3. 研究bootstrap.js里面插件的实现，争取动手写一套UI插件\n\n### 后端部分\n1. 前端项目的后台全部由java来做，之前node.js写的后台也由java重构，使用java的spring\n","source":"_posts/2017/04/学习计划.md","raw":"---\ntitle: 学习计划\ndate: 2017-04-19 16:23:55\ntags:\n  - 课外学习\n---\n## 学习计划清单\n**要强制按照计划来，不然总是盲目的不知道要做什么，感觉茫茫然的**  \n### 前端部分\n1. react react之前只是粗略的过了一遍，大概知道是什么原理，但没有真正做项目\n\n2. vue-admin项目的继续扩展\n\n3. 研究bootstrap.js里面插件的实现，争取动手写一套UI插件\n\n### 后端部分\n1. 前端项目的后台全部由java来做，之前node.js写的后台也由java重构，使用java的spring\n","slug":"学习计划","published":1,"updated":"2017-04-19T08:34:08.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqra000mr4v3dmajyw2m","content":"<h2 id=\"学习计划清单\"><a href=\"#学习计划清单\" class=\"headerlink\" title=\"学习计划清单\"></a>学习计划清单</h2><p><strong>要强制按照计划来，不然总是盲目的不知道要做什么，感觉茫茫然的</strong>  </p>\n<h3 id=\"前端部分\"><a href=\"#前端部分\" class=\"headerlink\" title=\"前端部分\"></a>前端部分</h3><ol>\n<li><p>react react之前只是粗略的过了一遍，大概知道是什么原理，但没有真正做项目</p>\n</li>\n<li><p>vue-admin项目的继续扩展</p>\n</li>\n<li><p>研究bootstrap.js里面插件的实现，争取动手写一套UI插件</p>\n</li>\n</ol>\n<h3 id=\"后端部分\"><a href=\"#后端部分\" class=\"headerlink\" title=\"后端部分\"></a>后端部分</h3><ol>\n<li>前端项目的后台全部由java来做，之前node.js写的后台也由java重构，使用java的spring</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"学习计划清单\"><a href=\"#学习计划清单\" class=\"headerlink\" title=\"学习计划清单\"></a>学习计划清单</h2><p><strong>要强制按照计划来，不然总是盲目的不知道要做什么，感觉茫茫然的</strong>  </p>\n<h3 id=\"前端部分\"><a href=\"#前端部分\" class=\"headerlink\" title=\"前端部分\"></a>前端部分</h3><ol>\n<li><p>react react之前只是粗略的过了一遍，大概知道是什么原理，但没有真正做项目</p>\n</li>\n<li><p>vue-admin项目的继续扩展</p>\n</li>\n<li><p>研究bootstrap.js里面插件的实现，争取动手写一套UI插件</p>\n</li>\n</ol>\n<h3 id=\"后端部分\"><a href=\"#后端部分\" class=\"headerlink\" title=\"后端部分\"></a>后端部分</h3><ol>\n<li>前端项目的后台全部由java来做，之前node.js写的后台也由java重构，使用java的spring</li>\n</ol>\n"},{"title":"jsDemo","date":"2017-07-08T07:13:51.000Z","_content":"\n##Demo [Demo就在这里](http://faceplus.top/jsTest/)\n","source":"_posts/2017/07/jsDemo.md","raw":"---\ntitle: jsDemo\ndate: 2017-07-08 15:13:51\ntags:\n  - demo\n  - javascript\n---\n\n##Demo [Demo就在这里](http://faceplus.top/jsTest/)\n","slug":"jsDemo","published":1,"updated":"2017-08-17T08:04:56.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqrd000or4v301gfzxtr","content":"<p>##Demo <a href=\"http://faceplus.top/jsTest/\">Demo就在这里</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>##Demo <a href=\"http://faceplus.top/jsTest/\">Demo就在这里</a></p>\n"},{"title":"angular2-约定优于配置","date":"2017-05-15T09:46:33.000Z","_content":"\n## angular2可以明显感觉到一个法则：约定优于配置\n\n<!-- more -->\n\n","source":"_posts/2017/05/angular2-约定优于配置.md","raw":"---\ntitle: angular2-约定优于配置\ndate: 2017-05-15 17:46:33\ntags: \n  - angular\n  - typescript\n---\n\n## angular2可以明显感觉到一个法则：约定优于配置\n\n<!-- more -->\n\n","slug":"angular2-约定优于配置","published":1,"updated":"2017-05-15T09:53:43.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqrh000sr4v3ozf40uv1","content":"<h2 id=\"angular2可以明显感觉到一个法则：约定优于配置\"><a href=\"#angular2可以明显感觉到一个法则：约定优于配置\" class=\"headerlink\" title=\"angular2可以明显感觉到一个法则：约定优于配置\"></a>angular2可以明显感觉到一个法则：约定优于配置</h2><a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<h2 id=\"angular2可以明显感觉到一个法则：约定优于配置\"><a href=\"#angular2可以明显感觉到一个法则：约定优于配置\" class=\"headerlink\" title=\"angular2可以明显感觉到一个法则：约定优于配置\"></a>angular2可以明显感觉到一个法则：约定优于配置</h2>","more":""},{"title":"简单的代码，读懂观察者模式和Promise","date":"2017-06-10T12:10:35.000Z","_content":"\n## 观察者模式\n### 观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。\n-- 基于观察者模式，可以做数据的绑定，代码的解耦。\n<!-- more -->\n\n##### 一个简单的观察者模式代码示例：\n```javascript\nfunction Observer() {\n    // 容器，存放subscribe订阅的内容\n    this.subscribes = {\n    }\n}\n\nObserver.prototype = {\n    constructor: 'Observer',\n    // 往容器放东西\n    subscribe: function (eventName, callback) {\n        this.subscribes[eventName] = callback\n    },\n    // 取函数，执行\n    publish: function (eventName, stuff) {\n        // 把订阅的东西取出来\n        // 执行\n        this.subscribes[eventName](stuff)\n    }\n}\n```\n##### 使用此代码\n```javascript\nvar observer = new Observer()\n\nobserver.subscribe('吃饭', function (stuff) {\n    console.log(stuff) // 成功打印面条\n})\n\nsetTimeout(function () {\n    observer.publish('吃饭', '面条')\n}, 2000)\n```\n\n##### 代码的逻辑很简单\n 1. **subscribe**的时候将要执行的函数放入存放函数的容器\n 2. **publish**的时候根据事件的名称取出函数，并传入数据，执行\n \n## Promise\n### Promise是js异步的解决方案，通常用于ajax请求\n#### 继续编写简单的代码\n```javascript\nfunction Promise(executor) {\n    // 容器，存放then订阅的东西\n    this._deferreds = []\n    var _this = this\n    // 承诺被执行\n    function resolve(stuff) {\n        // 取出存的东西\n        _this._deferreds.forEach(function (deferred) {\n            // 执行\n            deferred(stuff)\n        })\n    }\n    // Promise传入的函数，执行时将resolve传进去\n    executor(resolve)\n}\n\nPromise.prototype.then = function (onFulfilled) {\n    // 往里面放东西\n    this._deferreds.push(onFulfilled)\n}\n```\n##### 使用此代码\n```javascript\nnew Promise(function (resolve) {\n    setTimeout(function () {\n        resolve('apple')\n    }, 2000)\n})\n    .then(function (stuff) {\n        console.log(stuff) // apple\n    })\n```\n##### Promise的关键点在于\n1. **.then**是给存放回调的容器里面添加回调函数\n2. **resolve**是**then**注册回调的执行者，所以当异步的时候，then要后于resolve执行。同样PubSub也可以用于异步\n3. Promise也是观察者模式的一种实现\n```javascript\n// 使用事件发布订阅处理异步\nvar observer = new Observer()\n\nobserver.subscribe('吃饭', function (stuff) {\n    console.log(stuff) // 面条\n})\n\n$.ajax({\n   url: '饭堂'\n})\n.success(function(data) {\n  observer.publish('吃饭', data['面条'])\n})\n```\n##### 都可以轻松的实现异步的解耦\n\n### 以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise\n[es6Promise](http://faceplus.top/2017/04/18/es6%E7%89%88promise/)\n","source":"_posts/2017/06/简单的代码，了解观察者模式和Promise.md","raw":"---\ntitle: 简单的代码，读懂观察者模式和Promise\ndate: 2017-06-10 20:10:35\ntags:\n  - javascript\n  - 基础知识\n---\n\n## 观察者模式\n### 观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。\n-- 基于观察者模式，可以做数据的绑定，代码的解耦。\n<!-- more -->\n\n##### 一个简单的观察者模式代码示例：\n```javascript\nfunction Observer() {\n    // 容器，存放subscribe订阅的内容\n    this.subscribes = {\n    }\n}\n\nObserver.prototype = {\n    constructor: 'Observer',\n    // 往容器放东西\n    subscribe: function (eventName, callback) {\n        this.subscribes[eventName] = callback\n    },\n    // 取函数，执行\n    publish: function (eventName, stuff) {\n        // 把订阅的东西取出来\n        // 执行\n        this.subscribes[eventName](stuff)\n    }\n}\n```\n##### 使用此代码\n```javascript\nvar observer = new Observer()\n\nobserver.subscribe('吃饭', function (stuff) {\n    console.log(stuff) // 成功打印面条\n})\n\nsetTimeout(function () {\n    observer.publish('吃饭', '面条')\n}, 2000)\n```\n\n##### 代码的逻辑很简单\n 1. **subscribe**的时候将要执行的函数放入存放函数的容器\n 2. **publish**的时候根据事件的名称取出函数，并传入数据，执行\n \n## Promise\n### Promise是js异步的解决方案，通常用于ajax请求\n#### 继续编写简单的代码\n```javascript\nfunction Promise(executor) {\n    // 容器，存放then订阅的东西\n    this._deferreds = []\n    var _this = this\n    // 承诺被执行\n    function resolve(stuff) {\n        // 取出存的东西\n        _this._deferreds.forEach(function (deferred) {\n            // 执行\n            deferred(stuff)\n        })\n    }\n    // Promise传入的函数，执行时将resolve传进去\n    executor(resolve)\n}\n\nPromise.prototype.then = function (onFulfilled) {\n    // 往里面放东西\n    this._deferreds.push(onFulfilled)\n}\n```\n##### 使用此代码\n```javascript\nnew Promise(function (resolve) {\n    setTimeout(function () {\n        resolve('apple')\n    }, 2000)\n})\n    .then(function (stuff) {\n        console.log(stuff) // apple\n    })\n```\n##### Promise的关键点在于\n1. **.then**是给存放回调的容器里面添加回调函数\n2. **resolve**是**then**注册回调的执行者，所以当异步的时候，then要后于resolve执行。同样PubSub也可以用于异步\n3. Promise也是观察者模式的一种实现\n```javascript\n// 使用事件发布订阅处理异步\nvar observer = new Observer()\n\nobserver.subscribe('吃饭', function (stuff) {\n    console.log(stuff) // 面条\n})\n\n$.ajax({\n   url: '饭堂'\n})\n.success(function(data) {\n  observer.publish('吃饭', data['面条'])\n})\n```\n##### 都可以轻松的实现异步的解耦\n\n### 以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise\n[es6Promise](http://faceplus.top/2017/04/18/es6%E7%89%88promise/)\n","slug":"简单的代码，了解观察者模式和Promise","published":1,"updated":"2017-08-17T08:04:56.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqrj000vr4v3vasi4hj2","content":"<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><h3 id=\"观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。\"><a href=\"#观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。\" class=\"headerlink\" title=\"观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。\"></a>观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。</h3><p>– 基于观察者模式，可以做数据的绑定，代码的解耦。<br><a id=\"more\"></a></p>\n<h5 id=\"一个简单的观察者模式代码示例：\"><a href=\"#一个简单的观察者模式代码示例：\" class=\"headerlink\" title=\"一个简单的观察者模式代码示例：\"></a>一个简单的观察者模式代码示例：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 容器，存放subscribe订阅的内容</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.subscribes = &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Observer.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"string\">'Observer'</span>,</div><div class=\"line\">    <span class=\"comment\">// 往容器放东西</span></div><div class=\"line\">    subscribe: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventName, callback</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subscribes[eventName] = callback</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 取函数，执行</span></div><div class=\"line\">    publish: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventName, stuff</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 把订阅的东西取出来</span></div><div class=\"line\">        <span class=\"comment\">// 执行</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.subscribes[eventName](stuff)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"使用此代码\"><a href=\"#使用此代码\" class=\"headerlink\" title=\"使用此代码\"></a>使用此代码</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> Observer()</div><div class=\"line\"></div><div class=\"line\">observer.subscribe(<span class=\"string\">'吃饭'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stuff</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(stuff) <span class=\"comment\">// 成功打印面条</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    observer.publish(<span class=\"string\">'吃饭'</span>, <span class=\"string\">'面条'</span>)</div><div class=\"line\">&#125;, <span class=\"number\">2000</span>)</div></pre></td></tr></table></figure>\n<h5 id=\"代码的逻辑很简单\"><a href=\"#代码的逻辑很简单\" class=\"headerlink\" title=\"代码的逻辑很简单\"></a>代码的逻辑很简单</h5><ol>\n<li><strong>subscribe</strong>的时候将要执行的函数放入存放函数的容器</li>\n<li><strong>publish</strong>的时候根据事件的名称取出函数，并传入数据，执行</li>\n</ol>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><h3 id=\"Promise是js异步的解决方案，通常用于ajax请求\"><a href=\"#Promise是js异步的解决方案，通常用于ajax请求\" class=\"headerlink\" title=\"Promise是js异步的解决方案，通常用于ajax请求\"></a>Promise是js异步的解决方案，通常用于ajax请求</h3><h4 id=\"继续编写简单的代码\"><a href=\"#继续编写简单的代码\" class=\"headerlink\" title=\"继续编写简单的代码\"></a>继续编写简单的代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 容器，存放then订阅的东西</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._deferreds = []</div><div class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"comment\">// 承诺被执行</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">stuff</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 取出存的东西</span></div><div class=\"line\">        _this._deferreds.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">deferred</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 执行</span></div><div class=\"line\">            deferred(stuff)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Promise传入的函数，执行时将resolve传进去</span></div><div class=\"line\">    executor(resolve)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 往里面放东西</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._deferreds.push(onFulfilled)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"使用此代码-1\"><a href=\"#使用此代码-1\" class=\"headerlink\" title=\"使用此代码\"></a>使用此代码</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        resolve(<span class=\"string\">'apple'</span>)</div><div class=\"line\">    &#125;, <span class=\"number\">2000</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stuff</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(stuff) <span class=\"comment\">// apple</span></div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<h5 id=\"Promise的关键点在于\"><a href=\"#Promise的关键点在于\" class=\"headerlink\" title=\"Promise的关键点在于\"></a>Promise的关键点在于</h5><ol>\n<li><strong>.then</strong>是给存放回调的容器里面添加回调函数</li>\n<li><strong>resolve</strong>是<strong>then</strong>注册回调的执行者，所以当异步的时候，then要后于resolve执行。同样PubSub也可以用于异步</li>\n<li>Promise也是观察者模式的一种实现<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用事件发布订阅处理异步</span></div><div class=\"line\"><span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> Observer()</div><div class=\"line\"></div><div class=\"line\">observer.subscribe(<span class=\"string\">'吃饭'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stuff</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(stuff) <span class=\"comment\">// 面条</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">   <span class=\"attr\">url</span>: <span class=\"string\">'饭堂'</span></div><div class=\"line\">&#125;)</div><div class=\"line\">.success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">  observer.publish(<span class=\"string\">'吃饭'</span>, data[<span class=\"string\">'面条'</span>])</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"都可以轻松的实现异步的解耦\"><a href=\"#都可以轻松的实现异步的解耦\" class=\"headerlink\" title=\"都可以轻松的实现异步的解耦\"></a>都可以轻松的实现异步的解耦</h5><h3 id=\"以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise\"><a href=\"#以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise\" class=\"headerlink\" title=\"以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise\"></a>以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise</h3><p><a href=\"http://faceplus.top/2017/04/18/es6%E7%89%88promise/\">es6Promise</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><h3 id=\"观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。\"><a href=\"#观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。\" class=\"headerlink\" title=\"观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。\"></a>观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。</h3><p>– 基于观察者模式，可以做数据的绑定，代码的解耦。<br></p>","more":"<p></p>\n<h5 id=\"一个简单的观察者模式代码示例：\"><a href=\"#一个简单的观察者模式代码示例：\" class=\"headerlink\" title=\"一个简单的观察者模式代码示例：\"></a>一个简单的观察者模式代码示例：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 容器，存放subscribe订阅的内容</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.subscribes = &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Observer.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"string\">'Observer'</span>,</div><div class=\"line\">    <span class=\"comment\">// 往容器放东西</span></div><div class=\"line\">    subscribe: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventName, callback</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subscribes[eventName] = callback</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 取函数，执行</span></div><div class=\"line\">    publish: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventName, stuff</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 把订阅的东西取出来</span></div><div class=\"line\">        <span class=\"comment\">// 执行</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.subscribes[eventName](stuff)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"使用此代码\"><a href=\"#使用此代码\" class=\"headerlink\" title=\"使用此代码\"></a>使用此代码</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> Observer()</div><div class=\"line\"></div><div class=\"line\">observer.subscribe(<span class=\"string\">'吃饭'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stuff</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(stuff) <span class=\"comment\">// 成功打印面条</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    observer.publish(<span class=\"string\">'吃饭'</span>, <span class=\"string\">'面条'</span>)</div><div class=\"line\">&#125;, <span class=\"number\">2000</span>)</div></pre></td></tr></table></figure>\n<h5 id=\"代码的逻辑很简单\"><a href=\"#代码的逻辑很简单\" class=\"headerlink\" title=\"代码的逻辑很简单\"></a>代码的逻辑很简单</h5><ol>\n<li><strong>subscribe</strong>的时候将要执行的函数放入存放函数的容器</li>\n<li><strong>publish</strong>的时候根据事件的名称取出函数，并传入数据，执行</li>\n</ol>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><h3 id=\"Promise是js异步的解决方案，通常用于ajax请求\"><a href=\"#Promise是js异步的解决方案，通常用于ajax请求\" class=\"headerlink\" title=\"Promise是js异步的解决方案，通常用于ajax请求\"></a>Promise是js异步的解决方案，通常用于ajax请求</h3><h4 id=\"继续编写简单的代码\"><a href=\"#继续编写简单的代码\" class=\"headerlink\" title=\"继续编写简单的代码\"></a>继续编写简单的代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 容器，存放then订阅的东西</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._deferreds = []</div><div class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"comment\">// 承诺被执行</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">stuff</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 取出存的东西</span></div><div class=\"line\">        _this._deferreds.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">deferred</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 执行</span></div><div class=\"line\">            deferred(stuff)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Promise传入的函数，执行时将resolve传进去</span></div><div class=\"line\">    executor(resolve)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 往里面放东西</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._deferreds.push(onFulfilled)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"使用此代码-1\"><a href=\"#使用此代码-1\" class=\"headerlink\" title=\"使用此代码\"></a>使用此代码</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        resolve(<span class=\"string\">'apple'</span>)</div><div class=\"line\">    &#125;, <span class=\"number\">2000</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stuff</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(stuff) <span class=\"comment\">// apple</span></div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<h5 id=\"Promise的关键点在于\"><a href=\"#Promise的关键点在于\" class=\"headerlink\" title=\"Promise的关键点在于\"></a>Promise的关键点在于</h5><ol>\n<li><strong>.then</strong>是给存放回调的容器里面添加回调函数</li>\n<li><strong>resolve</strong>是<strong>then</strong>注册回调的执行者，所以当异步的时候，then要后于resolve执行。同样PubSub也可以用于异步</li>\n<li>Promise也是观察者模式的一种实现<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用事件发布订阅处理异步</span></div><div class=\"line\"><span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> Observer()</div><div class=\"line\"></div><div class=\"line\">observer.subscribe(<span class=\"string\">'吃饭'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stuff</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(stuff) <span class=\"comment\">// 面条</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">   <span class=\"attr\">url</span>: <span class=\"string\">'饭堂'</span></div><div class=\"line\">&#125;)</div><div class=\"line\">.success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">  observer.publish(<span class=\"string\">'吃饭'</span>, data[<span class=\"string\">'面条'</span>])</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"都可以轻松的实现异步的解耦\"><a href=\"#都可以轻松的实现异步的解耦\" class=\"headerlink\" title=\"都可以轻松的实现异步的解耦\"></a>都可以轻松的实现异步的解耦</h5><h3 id=\"以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise\"><a href=\"#以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise\" class=\"headerlink\" title=\"以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise\"></a>以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise</h3><p><a href=\"http://faceplus.top/2017/04/18/es6%E7%89%88promise/\">es6Promise</a></p>"},{"title":"js设计模式笔记--享元模式","date":"2017-08-22T05:23:16.000Z","_content":"\n## 享元模式\n1. 运用共享技术有效的支持最大量的细粒度的对象，避免对象间拥有相同的内容造成多余的开销\n2. 主要对数据和方法共享分离，将数据和方法分为外部和内部，内部就是共享的，所以提出来这一部分能提高性能\n3. barrat李靖的解释\n  * “享”是共享的意思，“元”指的是元件，也就是小颗粒的东西，\n     享元顾名思义便是共享小部件，很多系统或者程序包含大量对象，但是这些对象\n     绝大多数都是差不多的，除了一些极个别的属性外。\n     在享元模式中有两个比较重要的关键词，内部变量和外部变量；内部变量是可以\n     共享的属性集，而外部变量是对象之间的差异部分，通过相同+不同的方式组合诸\n     多对象，可以有效地节省系统空间，降低内存大小。\n\n<!-- more -->\n\n```\n~function () {\n  'use strict'\n  var Flywight = function () {\n    var created = []\n\n    function create () {\n      var dom = document.createElement('div')\n      document.getElementById('container').appendChild(dom)\n      created.push(dom)\n      return dom\n    }\n\n    return {\n      getDiv: function () {\n        if (created.length < 5) {\n          return create()\n        } else {\n          var div = created.shift()\n          created.push(div)\n          return div\n        }\n      }\n    }\n\n  }\n\n  var paper = 0,\n    article = ['fsdfsdafsadf', 'fsdfsdfsdfdsa', 'fdsfsdfsdfasdf', 'fsdfsdfsdafsdafsdaf', 'ffsdfsdfsdafsdafasdfasdf'],\n    num = 5,\n    len = article.length\n\n  for (var i = 0; i < 5; i++) {\n    if (article[i]) {\n      Flywight.getDiv().innerHTML = article[i]\n    }\n  }\n\n  document.getElementById('next_page').onclick = function () {\n    if (article.length < 5) {\n      return\n    }\n\n    var n = ++paper * num % len,\n      j = 0\n\n    for (; i < 5; i++) {\n      if (article[n + j]) {\n        Flywight.getDiv().innerHTML = article[n + j]\n      } else if (article[n + j - len]) {\n        Flywight.getDiv().innerHTML = article[n + j - len]\n      } else {\n        Flywight.getDiv().innerHTML = \"\"\n      }\n    }\n  }\n\n}()\n\n~function () {\n  // 享元方法，其实也就是共享方法\n  'use strict'\n  var FlyWeight = {\n    moveX: function (x) {\n      this.x = x\n    },\n    moveY: function (y) {\n      this.y = y\n    }\n  }\n\n  var Player = function (x, y, c) {\n    this.x = x\n    this.y = y\n    this.color = c\n  }\n\n  Player.prototype = FlyWeight\n  Player.prototype.changeC = function (c) {\n    this.color = c\n  }\n\n}()\n```","source":"_posts/2017/08/js设计模式笔记-享元模式.md","raw":"---\ntitle: js设计模式笔记--享元模式\ndate: 2017-08-22 13:23:16\ntags:\n  - 设计模式\n  - js基础\n---\n\n## 享元模式\n1. 运用共享技术有效的支持最大量的细粒度的对象，避免对象间拥有相同的内容造成多余的开销\n2. 主要对数据和方法共享分离，将数据和方法分为外部和内部，内部就是共享的，所以提出来这一部分能提高性能\n3. barrat李靖的解释\n  * “享”是共享的意思，“元”指的是元件，也就是小颗粒的东西，\n     享元顾名思义便是共享小部件，很多系统或者程序包含大量对象，但是这些对象\n     绝大多数都是差不多的，除了一些极个别的属性外。\n     在享元模式中有两个比较重要的关键词，内部变量和外部变量；内部变量是可以\n     共享的属性集，而外部变量是对象之间的差异部分，通过相同+不同的方式组合诸\n     多对象，可以有效地节省系统空间，降低内存大小。\n\n<!-- more -->\n\n```\n~function () {\n  'use strict'\n  var Flywight = function () {\n    var created = []\n\n    function create () {\n      var dom = document.createElement('div')\n      document.getElementById('container').appendChild(dom)\n      created.push(dom)\n      return dom\n    }\n\n    return {\n      getDiv: function () {\n        if (created.length < 5) {\n          return create()\n        } else {\n          var div = created.shift()\n          created.push(div)\n          return div\n        }\n      }\n    }\n\n  }\n\n  var paper = 0,\n    article = ['fsdfsdafsadf', 'fsdfsdfsdfdsa', 'fdsfsdfsdfasdf', 'fsdfsdfsdafsdafsdaf', 'ffsdfsdfsdafsdafasdfasdf'],\n    num = 5,\n    len = article.length\n\n  for (var i = 0; i < 5; i++) {\n    if (article[i]) {\n      Flywight.getDiv().innerHTML = article[i]\n    }\n  }\n\n  document.getElementById('next_page').onclick = function () {\n    if (article.length < 5) {\n      return\n    }\n\n    var n = ++paper * num % len,\n      j = 0\n\n    for (; i < 5; i++) {\n      if (article[n + j]) {\n        Flywight.getDiv().innerHTML = article[n + j]\n      } else if (article[n + j - len]) {\n        Flywight.getDiv().innerHTML = article[n + j - len]\n      } else {\n        Flywight.getDiv().innerHTML = \"\"\n      }\n    }\n  }\n\n}()\n\n~function () {\n  // 享元方法，其实也就是共享方法\n  'use strict'\n  var FlyWeight = {\n    moveX: function (x) {\n      this.x = x\n    },\n    moveY: function (y) {\n      this.y = y\n    }\n  }\n\n  var Player = function (x, y, c) {\n    this.x = x\n    this.y = y\n    this.color = c\n  }\n\n  Player.prototype = FlyWeight\n  Player.prototype.changeC = function (c) {\n    this.color = c\n  }\n\n}()\n```","slug":"js设计模式笔记-享元模式","published":1,"updated":"2017-08-22T05:45:39.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqrl000zr4v3rlbi808c","content":"<h2 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h2><ol>\n<li>运用共享技术有效的支持最大量的细粒度的对象，避免对象间拥有相同的内容造成多余的开销</li>\n<li>主要对数据和方法共享分离，将数据和方法分为外部和内部，内部就是共享的，所以提出来这一部分能提高性能</li>\n<li>barrat李靖的解释<ul>\n<li>“享”是共享的意思，“元”指的是元件，也就是小颗粒的东西，<br>享元顾名思义便是共享小部件，很多系统或者程序包含大量对象，但是这些对象<br>绝大多数都是差不多的，除了一些极个别的属性外。<br>在享元模式中有两个比较重要的关键词，内部变量和外部变量；内部变量是可以<br>共享的属性集，而外部变量是对象之间的差异部分，通过相同+不同的方式组合诸<br>多对象，可以有效地节省系统空间，降低内存大小。</li>\n</ul>\n</li>\n</ol>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  'use strict'</span></div><div class=\"line\">  <span class=\"keyword\">var</span> Flywight = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> created = []</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>)</div><div class=\"line\">      <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>).appendChild(dom)</div><div class=\"line\">      created.push(dom)</div><div class=\"line\">      <span class=\"keyword\">return</span> dom</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">getDiv</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (created.length &lt; <span class=\"number\">5</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> create()</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> div = created.shift()</div><div class=\"line\">          created.push(div)</div><div class=\"line\">          <span class=\"keyword\">return</span> div</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> paper = <span class=\"number\">0</span>,</div><div class=\"line\">    article = [<span class=\"string\">'fsdfsdafsadf'</span>, <span class=\"string\">'fsdfsdfsdfdsa'</span>, <span class=\"string\">'fdsfsdfsdfasdf'</span>, <span class=\"string\">'fsdfsdfsdafsdafsdaf'</span>, <span class=\"string\">'ffsdfsdfsdafsdafasdfasdf'</span>],</div><div class=\"line\">    num = <span class=\"number\">5</span>,</div><div class=\"line\">    len = article.length</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (article[i]) &#123;</div><div class=\"line\">      Flywight.getDiv().innerHTML = article[i]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'next_page'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (article.length &lt; <span class=\"number\">5</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> n = ++paper * num % len,</div><div class=\"line\">      j = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (article[n + j]) &#123;</div><div class=\"line\">        Flywight.getDiv().innerHTML = article[n + j]</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (article[n + j - len]) &#123;</div><div class=\"line\">        Flywight.getDiv().innerHTML = article[n + j - len]</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        Flywight.getDiv().innerHTML = <span class=\"string\">\"\"</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 享元方法，其实也就是共享方法</span></div><div class=\"line\"><span class=\"meta\">  'use strict'</span></div><div class=\"line\">  <span class=\"keyword\">var</span> FlyWeight = &#123;</div><div class=\"line\">    <span class=\"attr\">moveX</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.x = x</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">moveY</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.y = y</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> Player = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y, c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = x</div><div class=\"line\">    <span class=\"keyword\">this</span>.y = y</div><div class=\"line\">    <span class=\"keyword\">this</span>.color = c</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Player.prototype = FlyWeight</div><div class=\"line\">  Player.prototype.changeC = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.color = c</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h2><ol>\n<li>运用共享技术有效的支持最大量的细粒度的对象，避免对象间拥有相同的内容造成多余的开销</li>\n<li>主要对数据和方法共享分离，将数据和方法分为外部和内部，内部就是共享的，所以提出来这一部分能提高性能</li>\n<li>barrat李靖的解释<ul>\n<li>“享”是共享的意思，“元”指的是元件，也就是小颗粒的东西，<br>享元顾名思义便是共享小部件，很多系统或者程序包含大量对象，但是这些对象<br>绝大多数都是差不多的，除了一些极个别的属性外。<br>在享元模式中有两个比较重要的关键词，内部变量和外部变量；内部变量是可以<br>共享的属性集，而外部变量是对象之间的差异部分，通过相同+不同的方式组合诸<br>多对象，可以有效地节省系统空间，降低内存大小。</li>\n</ul>\n</li>\n</ol>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  'use strict'</span></div><div class=\"line\">  <span class=\"keyword\">var</span> Flywight = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> created = []</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>)</div><div class=\"line\">      <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>).appendChild(dom)</div><div class=\"line\">      created.push(dom)</div><div class=\"line\">      <span class=\"keyword\">return</span> dom</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">getDiv</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (created.length &lt; <span class=\"number\">5</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> create()</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> div = created.shift()</div><div class=\"line\">          created.push(div)</div><div class=\"line\">          <span class=\"keyword\">return</span> div</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> paper = <span class=\"number\">0</span>,</div><div class=\"line\">    article = [<span class=\"string\">'fsdfsdafsadf'</span>, <span class=\"string\">'fsdfsdfsdfdsa'</span>, <span class=\"string\">'fdsfsdfsdfasdf'</span>, <span class=\"string\">'fsdfsdfsdafsdafsdaf'</span>, <span class=\"string\">'ffsdfsdfsdafsdafasdfasdf'</span>],</div><div class=\"line\">    num = <span class=\"number\">5</span>,</div><div class=\"line\">    len = article.length</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (article[i]) &#123;</div><div class=\"line\">      Flywight.getDiv().innerHTML = article[i]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'next_page'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (article.length &lt; <span class=\"number\">5</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> n = ++paper * num % len,</div><div class=\"line\">      j = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (article[n + j]) &#123;</div><div class=\"line\">        Flywight.getDiv().innerHTML = article[n + j]</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (article[n + j - len]) &#123;</div><div class=\"line\">        Flywight.getDiv().innerHTML = article[n + j - len]</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        Flywight.getDiv().innerHTML = <span class=\"string\">\"\"</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 享元方法，其实也就是共享方法</span></div><div class=\"line\"><span class=\"meta\">  'use strict'</span></div><div class=\"line\">  <span class=\"keyword\">var</span> FlyWeight = &#123;</div><div class=\"line\">    <span class=\"attr\">moveX</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.x = x</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">moveY</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.y = y</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> Player = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y, c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = x</div><div class=\"line\">    <span class=\"keyword\">this</span>.y = y</div><div class=\"line\">    <span class=\"keyword\">this</span>.color = c</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Player.prototype = FlyWeight</div><div class=\"line\">  Player.prototype.changeC = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.color = c</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>"},{"title":"js设计模式笔记--代理模式","date":"2017-08-18T07:43:09.000Z","_content":"## 代理模式\n1. 对于一个对象不能直接引用另一个对象，所以通过代理起个中介作用\n2. 没想到这一章讲的是跨域，我的妈呀，这怎么成了设计模式了\n3. 跨域解决方案：\n * jsonp 创建script标签获取数据，不能post\n * iframe 通过iframe拿数据，写起来麻烦，还很弱\n * nginx或者其他服务器进行跨域，或者设置http cors\n * ... 其他","source":"_posts/2017/08/js设计模式笔记-代理模式.md","raw":"---\ntitle: js设计模式笔记--代理模式\ndate: 2017-08-18 15:43:09\ntags:\n  - 设计模式\n  - js基础\n---\n## 代理模式\n1. 对于一个对象不能直接引用另一个对象，所以通过代理起个中介作用\n2. 没想到这一章讲的是跨域，我的妈呀，这怎么成了设计模式了\n3. 跨域解决方案：\n * jsonp 创建script标签获取数据，不能post\n * iframe 通过iframe拿数据，写起来麻烦，还很弱\n * nginx或者其他服务器进行跨域，或者设置http cors\n * ... 其他","slug":"js设计模式笔记-代理模式","published":1,"updated":"2017-08-22T06:27:06.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqrn0010r4v390jjyel8","content":"<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><ol>\n<li>对于一个对象不能直接引用另一个对象，所以通过代理起个中介作用</li>\n<li>没想到这一章讲的是跨域，我的妈呀，这怎么成了设计模式了</li>\n<li>跨域解决方案：<ul>\n<li>jsonp 创建script标签获取数据，不能post</li>\n<li>iframe 通过iframe拿数据，写起来麻烦，还很弱</li>\n<li>nginx或者其他服务器进行跨域，或者设置http cors</li>\n<li>… 其他</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><ol>\n<li>对于一个对象不能直接引用另一个对象，所以通过代理起个中介作用</li>\n<li>没想到这一章讲的是跨域，我的妈呀，这怎么成了设计模式了</li>\n<li>跨域解决方案：<ul>\n<li>jsonp 创建script标签获取数据，不能post</li>\n<li>iframe 通过iframe拿数据，写起来麻烦，还很弱</li>\n<li>nginx或者其他服务器进行跨域，或者设置http cors</li>\n<li>… 其他</li>\n</ul>\n</li>\n</ol>\n"},{"title":"js设计模式笔记--单例模式","date":"2017-08-18T07:38:50.000Z","_content":"\n## 单例模式\n* 只能实例化一次，第二次实例化将之前实例化好的对象返回，就可以共享实例的内存，可用于modal弹框\n\n```\n'use strict'\nvar single = (function () {\n  var instance = null\n\n  function Fuck (bitch) {\n    this.bitch = bitch\n  }\n\n  Fuck.prototype.start = function () {\n    return this.bitch\n  }\n\n  return {\n    getInstance: function (bitch) {\n      if (!instance) {\n        instance = new Fuck(bitch)\n      }\n      return instance\n    }\n  }\n})()\n\n// 共享一个实例\nvar s = single.getInstance('fucker')\nconsole.log(s)\nvar y = single.getInstance('dsfsd')\nconsole.log(y)\nconsole.log(y.start())\n```","source":"_posts/2017/08/js设计模式笔记-单例模式.md","raw":"---\ntitle: js设计模式笔记--单例模式\ndate: 2017-08-18 15:38:50\ntags:\n  - 设计模式\n  - js基础\n---\n\n## 单例模式\n* 只能实例化一次，第二次实例化将之前实例化好的对象返回，就可以共享实例的内存，可用于modal弹框\n\n```\n'use strict'\nvar single = (function () {\n  var instance = null\n\n  function Fuck (bitch) {\n    this.bitch = bitch\n  }\n\n  Fuck.prototype.start = function () {\n    return this.bitch\n  }\n\n  return {\n    getInstance: function (bitch) {\n      if (!instance) {\n        instance = new Fuck(bitch)\n      }\n      return instance\n    }\n  }\n})()\n\n// 共享一个实例\nvar s = single.getInstance('fucker')\nconsole.log(s)\nvar y = single.getInstance('dsfsd')\nconsole.log(y)\nconsole.log(y.start())\n```","slug":"js设计模式笔记-单例模式","published":1,"updated":"2017-08-22T05:45:45.640Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqs20013r4v3enewpops","content":"<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><ul>\n<li>只能实例化一次，第二次实例化将之前实例化好的对象返回，就可以共享实例的内存，可用于modal弹框</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"keyword\">var</span> single = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> instance = <span class=\"literal\">null</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fuck</span> (<span class=\"params\">bitch</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.bitch = bitch</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Fuck.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.bitch</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">getInstance</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">bitch</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!instance) &#123;</div><div class=\"line\">        instance = <span class=\"keyword\">new</span> Fuck(bitch)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> instance</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 共享一个实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> s = single.getInstance(<span class=\"string\">'fucker'</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(s)</div><div class=\"line\"><span class=\"keyword\">var</span> y = single.getInstance(<span class=\"string\">'dsfsd'</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(y)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(y.start())</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><ul>\n<li>只能实例化一次，第二次实例化将之前实例化好的对象返回，就可以共享实例的内存，可用于modal弹框</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"keyword\">var</span> single = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> instance = <span class=\"literal\">null</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fuck</span> (<span class=\"params\">bitch</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.bitch = bitch</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Fuck.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.bitch</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">getInstance</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">bitch</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!instance) &#123;</div><div class=\"line\">        instance = <span class=\"keyword\">new</span> Fuck(bitch)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> instance</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 共享一个实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> s = single.getInstance(<span class=\"string\">'fucker'</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(s)</div><div class=\"line\"><span class=\"keyword\">var</span> y = single.getInstance(<span class=\"string\">'dsfsd'</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(y)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(y.start())</div></pre></td></tr></table></figure>"},{"title":"js设计模式笔记--外观模式","date":"2017-08-18T07:40:23.000Z","_content":"## 外观模式\n*  这章坑爹，就是说了下兼容性的封装，在写个小小型代码库\n\n```\n'use strict'\nvar A = (function () {\n  var o = {\n    g: function (id) {\n      return document.getElementById(id)\n    }\n  }\n  // todo: 其余不想写了，就是获取元素，添加事件的封装\n  return o\n}())\n```","source":"_posts/2017/08/js设计模式笔记-外观模式.md","raw":"---\ntitle: js设计模式笔记--外观模式\ndate: 2017-08-18 15:40:23\ntags:\n  - 设计模式\n  - js基础\n---\n## 外观模式\n*  这章坑爹，就是说了下兼容性的封装，在写个小小型代码库\n\n```\n'use strict'\nvar A = (function () {\n  var o = {\n    g: function (id) {\n      return document.getElementById(id)\n    }\n  }\n  // todo: 其余不想写了，就是获取元素，添加事件的封装\n  return o\n}())\n```","slug":"js设计模式笔记-外观模式","published":1,"updated":"2017-08-22T05:46:13.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqs40015r4v3d0pvaaf5","content":"<h2 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h2><ul>\n<li>这章坑爹，就是说了下兼容性的封装，在写个小小型代码库</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"keyword\">var</span> A = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"attr\">g</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(id)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">todo:</span> 其余不想写了，就是获取元素，添加事件的封装</span></div><div class=\"line\">  <span class=\"keyword\">return</span> o</div><div class=\"line\">&#125;())</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h2><ul>\n<li>这章坑爹，就是说了下兼容性的封装，在写个小小型代码库</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"keyword\">var</span> A = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"attr\">g</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(id)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">todo:</span> 其余不想写了，就是获取元素，添加事件的封装</span></div><div class=\"line\">  <span class=\"keyword\">return</span> o</div><div class=\"line\">&#125;())</div></pre></td></tr></table></figure>"},{"title":"js设计模式笔记--原型模式","date":"2017-08-18T07:38:01.000Z","_content":"* 受不了了，什么都是设计模式，一个JS的原型链继承都能当做设计模式，也是醉了\n* 整篇我看最有用的就是那个继承函数\n* 说白了这个模式就像将原型的属性和方法进行共享","source":"_posts/2017/08/js设计模式笔记-原型模式.md","raw":"---\ntitle: js设计模式笔记--原型模式\ndate: 2017-08-18 15:38:01\ntags:\n  - 设计模式\n  - js基础\n---\n* 受不了了，什么都是设计模式，一个JS的原型链继承都能当做设计模式，也是醉了\n* 整篇我看最有用的就是那个继承函数\n* 说白了这个模式就像将原型的属性和方法进行共享","slug":"js设计模式笔记-原型模式","published":1,"updated":"2017-08-18T07:38:38.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqs60018r4v366mqe667","content":"<ul>\n<li>受不了了，什么都是设计模式，一个JS的原型链继承都能当做设计模式，也是醉了</li>\n<li>整篇我看最有用的就是那个继承函数</li>\n<li>说白了这个模式就像将原型的属性和方法进行共享</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>受不了了，什么都是设计模式，一个JS的原型链继承都能当做设计模式，也是醉了</li>\n<li>整篇我看最有用的就是那个继承函数</li>\n<li>说白了这个模式就像将原型的属性和方法进行共享</li>\n</ul>\n"},{"title":"js设计模式笔记--工厂模式","date":"2017-08-18T07:33:04.000Z","_content":"## 工厂模式\n1. 工厂模式顾名思义就是一个工厂，里面可以创建各种类型的产品\n2. 工厂模式和类\n  * 工厂模式可以根据所需产生不同的类\n  * 类是一个厂内一个小型的团体\n  \n3. 抽象工程模式\n  * 父类不提供实体方法，只提供接口，通过子类去实现覆盖\n\n```\n'use strict'\nconst log = console.log.bind(console)\n\nlog('--------简单工厂，就是一个简单的封装--------')\n\n~function () {\n  function Button (type, placeholder) {\n    let o = Object.create(null)\n    o.content = placeholder\n    o.click = function () {\n      log(placeholder)\n    }\n\n    if (type === 'error') {\n      o.color = 'red'\n    } else {\n      o.color = 'blue'\n    }\n\n    return o\n  }\n\n  var errorBtn = Button('error', 'heheheheh')\n  var primaryBtn = Button('df', 'dfsdfsdfsdfd')\n  log(errorBtn.content)\n  log(primaryBtn.content)\n}()\n\nlog('-------工厂方法模式---------')\n\n~function () {\n  function Button (type, content) {\n    if (this instanceof Button) {\n      var o = new this[type](content)\n      return o\n    } else {\n      return new Button(type, content)\n    }\n  }\n\n  Button.click = function (content) {\n    log(content)\n  }\n\n  Button.prototype = {\n    constructor: 'Button',\n    error: function (content) {\n      this.color = 'red'\n      Button.click(content)\n    },\n    primary: function (content) {\n      this.color = 'blue'\n      Button.click(content)\n    }\n  }\n\n  var a = Button('error', 'content')\n  log(a.color)\n\n}()\n```","source":"_posts/2017/08/js设计模式笔记-工厂模式.md","raw":"---\ntitle: js设计模式笔记--工厂模式\ndate: 2017-08-18 15:33:04\ntags:\n  - 设计模式\n  - js基础\n---\n## 工厂模式\n1. 工厂模式顾名思义就是一个工厂，里面可以创建各种类型的产品\n2. 工厂模式和类\n  * 工厂模式可以根据所需产生不同的类\n  * 类是一个厂内一个小型的团体\n  \n3. 抽象工程模式\n  * 父类不提供实体方法，只提供接口，通过子类去实现覆盖\n\n```\n'use strict'\nconst log = console.log.bind(console)\n\nlog('--------简单工厂，就是一个简单的封装--------')\n\n~function () {\n  function Button (type, placeholder) {\n    let o = Object.create(null)\n    o.content = placeholder\n    o.click = function () {\n      log(placeholder)\n    }\n\n    if (type === 'error') {\n      o.color = 'red'\n    } else {\n      o.color = 'blue'\n    }\n\n    return o\n  }\n\n  var errorBtn = Button('error', 'heheheheh')\n  var primaryBtn = Button('df', 'dfsdfsdfsdfd')\n  log(errorBtn.content)\n  log(primaryBtn.content)\n}()\n\nlog('-------工厂方法模式---------')\n\n~function () {\n  function Button (type, content) {\n    if (this instanceof Button) {\n      var o = new this[type](content)\n      return o\n    } else {\n      return new Button(type, content)\n    }\n  }\n\n  Button.click = function (content) {\n    log(content)\n  }\n\n  Button.prototype = {\n    constructor: 'Button',\n    error: function (content) {\n      this.color = 'red'\n      Button.click(content)\n    },\n    primary: function (content) {\n      this.color = 'blue'\n      Button.click(content)\n    }\n  }\n\n  var a = Button('error', 'content')\n  log(a.color)\n\n}()\n```","slug":"js设计模式笔记-工厂模式","published":1,"updated":"2017-08-22T05:46:13.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqs80019r4v301pib9ig","content":"<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><ol>\n<li>工厂模式顾名思义就是一个工厂，里面可以创建各种类型的产品</li>\n<li><p>工厂模式和类</p>\n<ul>\n<li>工厂模式可以根据所需产生不同的类</li>\n<li>类是一个厂内一个小型的团体</li>\n</ul>\n</li>\n<li><p>抽象工程模式</p>\n<ul>\n<li>父类不提供实体方法，只提供接口，通过子类去实现覆盖</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"keyword\">const</span> log = <span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>)</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'--------简单工厂，就是一个简单的封装--------'</span>)</div><div class=\"line\"></div><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Button</span> (<span class=\"params\">type, placeholder</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> o = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">    o.content = placeholder</div><div class=\"line\">    o.click = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      log(placeholder)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">'error'</span>) &#123;</div><div class=\"line\">      o.color = <span class=\"string\">'red'</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      o.color = <span class=\"string\">'blue'</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> o</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> errorBtn = Button(<span class=\"string\">'error'</span>, <span class=\"string\">'heheheheh'</span>)</div><div class=\"line\">  <span class=\"keyword\">var</span> primaryBtn = Button(<span class=\"string\">'df'</span>, <span class=\"string\">'dfsdfsdfsdfd'</span>)</div><div class=\"line\">  log(errorBtn.content)</div><div class=\"line\">  log(primaryBtn.content)</div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'-------工厂方法模式---------'</span>)</div><div class=\"line\"></div><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Button</span> (<span class=\"params\">type, content</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> Button) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>[type](content)</div><div class=\"line\">      <span class=\"keyword\">return</span> o</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Button(type, content)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Button.click = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</div><div class=\"line\">    log(content)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Button.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"string\">'Button'</span>,</div><div class=\"line\">    <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.color = <span class=\"string\">'red'</span></div><div class=\"line\">      Button.click(content)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">primary</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.color = <span class=\"string\">'blue'</span></div><div class=\"line\">      Button.click(content)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> a = Button(<span class=\"string\">'error'</span>, <span class=\"string\">'content'</span>)</div><div class=\"line\">  log(a.color)</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><ol>\n<li>工厂模式顾名思义就是一个工厂，里面可以创建各种类型的产品</li>\n<li><p>工厂模式和类</p>\n<ul>\n<li>工厂模式可以根据所需产生不同的类</li>\n<li>类是一个厂内一个小型的团体</li>\n</ul>\n</li>\n<li><p>抽象工程模式</p>\n<ul>\n<li>父类不提供实体方法，只提供接口，通过子类去实现覆盖</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"keyword\">const</span> log = <span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>)</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'--------简单工厂，就是一个简单的封装--------'</span>)</div><div class=\"line\"></div><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Button</span> (<span class=\"params\">type, placeholder</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> o = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</div><div class=\"line\">    o.content = placeholder</div><div class=\"line\">    o.click = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      log(placeholder)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">'error'</span>) &#123;</div><div class=\"line\">      o.color = <span class=\"string\">'red'</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      o.color = <span class=\"string\">'blue'</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> o</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> errorBtn = Button(<span class=\"string\">'error'</span>, <span class=\"string\">'heheheheh'</span>)</div><div class=\"line\">  <span class=\"keyword\">var</span> primaryBtn = Button(<span class=\"string\">'df'</span>, <span class=\"string\">'dfsdfsdfsdfd'</span>)</div><div class=\"line\">  log(errorBtn.content)</div><div class=\"line\">  log(primaryBtn.content)</div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'-------工厂方法模式---------'</span>)</div><div class=\"line\"></div><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Button</span> (<span class=\"params\">type, content</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> Button) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>[type](content)</div><div class=\"line\">      <span class=\"keyword\">return</span> o</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Button(type, content)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Button.click = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</div><div class=\"line\">    log(content)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Button.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"string\">'Button'</span>,</div><div class=\"line\">    <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.color = <span class=\"string\">'red'</span></div><div class=\"line\">      Button.click(content)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">primary</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.color = <span class=\"string\">'blue'</span></div><div class=\"line\">      Button.click(content)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> a = Button(<span class=\"string\">'error'</span>, <span class=\"string\">'content'</span>)</div><div class=\"line\">  log(a.color)</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>"},{"title":"js设计模式笔记--建造者模式","date":"2017-08-18T07:36:51.000Z","_content":"\n## 建造者模式\n* 创建出来的对象直接具有已实现的某些属性方法\n* 此模式参与对象的创建过程，干涉了对象的创建细节\n* 场景：已有内部给定的方法和属性，只需要选择需要的属性，就可以产生一个完整的对象\n\n```\n~function () {\n  'use strict'\n\n  var Human = function (param) {\n    this.skill = param && param.skill || '保密'\n    this.hobby = param && param.hobby || '保密'\n  }\n\n  Human.prototype = {\n    getSkill: function () {\n      return this.skill\n    },\n    getHobby: function () {\n      return this.hobby\n    }\n  }\n\n  var Named = function (name) {\n    var _this = this\n    // 构造\n    ~function (name, _this) {\n      _this.wholeName = name\n      if (name.indexOf(' ') > -1) {\n        _this.firstName = name.slice(0, name.indexOf(' '))\n        _this.secondName = name.slice(name.indexOf(' '))\n      }\n    }(name, _this)\n\n  }\n\n  var Work = function (work) {\n    var _this = this\n    ~function (work, _this) {\n      switch (work) {\n        case 'code':\n          _this.work = '工程师'\n          _this.workDescript = '每天沉醉于编程'\n          break\n        case 'UI':\n        case 'UE':\n          _this.work = '设计师'\n          _this.workDescript = '设计更似一种艺术'\n          break\n        case 'teach':\n          _this.work = '教师'\n          _this.workDescript = '分享也是一种快乐'\n          break\n        default:\n          _this.work = work\n          _this.workDescript = '不清楚你的职业'\n      }\n    }(work, _this)\n  }\n\n  Work.prototype.changeWork = function (work) {\n    this.work = work\n  }\n\n  Work.prototype.changeDescript = function (descript) {\n    this.workDescript = descript\n  }\n\n  var Person = function (name, work) {\n    var _person = new Human()\n    _person.name = new Named(name)\n    _person.work = new Work(work)\n\n    return _person\n  }\n\n  var person = new Person('s b', 'UI')\n\n  console.log(person.skill)\n  console.log(person.name.firstName)\n\n}()\n\n```","source":"_posts/2017/08/js设计模式笔记-建造者模式.md","raw":"---\ntitle: js设计模式笔记--建造者模式\ndate: 2017-08-18 15:36:51\ntags:\n  - 设计模式\n  - js基础\n---\n\n## 建造者模式\n* 创建出来的对象直接具有已实现的某些属性方法\n* 此模式参与对象的创建过程，干涉了对象的创建细节\n* 场景：已有内部给定的方法和属性，只需要选择需要的属性，就可以产生一个完整的对象\n\n```\n~function () {\n  'use strict'\n\n  var Human = function (param) {\n    this.skill = param && param.skill || '保密'\n    this.hobby = param && param.hobby || '保密'\n  }\n\n  Human.prototype = {\n    getSkill: function () {\n      return this.skill\n    },\n    getHobby: function () {\n      return this.hobby\n    }\n  }\n\n  var Named = function (name) {\n    var _this = this\n    // 构造\n    ~function (name, _this) {\n      _this.wholeName = name\n      if (name.indexOf(' ') > -1) {\n        _this.firstName = name.slice(0, name.indexOf(' '))\n        _this.secondName = name.slice(name.indexOf(' '))\n      }\n    }(name, _this)\n\n  }\n\n  var Work = function (work) {\n    var _this = this\n    ~function (work, _this) {\n      switch (work) {\n        case 'code':\n          _this.work = '工程师'\n          _this.workDescript = '每天沉醉于编程'\n          break\n        case 'UI':\n        case 'UE':\n          _this.work = '设计师'\n          _this.workDescript = '设计更似一种艺术'\n          break\n        case 'teach':\n          _this.work = '教师'\n          _this.workDescript = '分享也是一种快乐'\n          break\n        default:\n          _this.work = work\n          _this.workDescript = '不清楚你的职业'\n      }\n    }(work, _this)\n  }\n\n  Work.prototype.changeWork = function (work) {\n    this.work = work\n  }\n\n  Work.prototype.changeDescript = function (descript) {\n    this.workDescript = descript\n  }\n\n  var Person = function (name, work) {\n    var _person = new Human()\n    _person.name = new Named(name)\n    _person.work = new Work(work)\n\n    return _person\n  }\n\n  var person = new Person('s b', 'UI')\n\n  console.log(person.skill)\n  console.log(person.name.firstName)\n\n}()\n\n```","slug":"js设计模式笔记-建造者模式","published":1,"updated":"2017-08-22T05:46:13.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqsd001br4v3jm3zqfvc","content":"<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><ul>\n<li>创建出来的对象直接具有已实现的某些属性方法</li>\n<li>此模式参与对象的创建过程，干涉了对象的创建细节</li>\n<li>场景：已有内部给定的方法和属性，只需要选择需要的属性，就可以产生一个完整的对象</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  'use strict'</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> Human = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">param</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.skill = param &amp;&amp; param.skill || <span class=\"string\">'保密'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.hobby = param &amp;&amp; param.hobby || <span class=\"string\">'保密'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Human.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">getSkill</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.skill</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getHobby</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.hobby</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> Named = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"comment\">// 构造</span></div><div class=\"line\">    ~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, _this</span>) </span>&#123;</div><div class=\"line\">      _this.wholeName = name</div><div class=\"line\">      <span class=\"keyword\">if</span> (name.indexOf(<span class=\"string\">' '</span>) &gt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        _this.firstName = name.slice(<span class=\"number\">0</span>, name.indexOf(<span class=\"string\">' '</span>))</div><div class=\"line\">        _this.secondName = name.slice(name.indexOf(<span class=\"string\">' '</span>))</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;(name, _this)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> Work = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">work</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\">    ~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">work, _this</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (work) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'code'</span>:</div><div class=\"line\">          _this.work = <span class=\"string\">'工程师'</span></div><div class=\"line\">          _this.workDescript = <span class=\"string\">'每天沉醉于编程'</span></div><div class=\"line\">          <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'UI'</span>:</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'UE'</span>:</div><div class=\"line\">          _this.work = <span class=\"string\">'设计师'</span></div><div class=\"line\">          _this.workDescript = <span class=\"string\">'设计更似一种艺术'</span></div><div class=\"line\">          <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'teach'</span>:</div><div class=\"line\">          _this.work = <span class=\"string\">'教师'</span></div><div class=\"line\">          _this.workDescript = <span class=\"string\">'分享也是一种快乐'</span></div><div class=\"line\">          <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">          _this.work = work</div><div class=\"line\">          _this.workDescript = <span class=\"string\">'不清楚你的职业'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;(work, _this)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Work.prototype.changeWork = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">work</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.work = work</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Work.prototype.changeDescript = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">descript</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.workDescript = descript</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, work</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _person = <span class=\"keyword\">new</span> Human()</div><div class=\"line\">    _person.name = <span class=\"keyword\">new</span> Named(name)</div><div class=\"line\">    _person.work = <span class=\"keyword\">new</span> Work(work)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> _person</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">'s b'</span>, <span class=\"string\">'UI'</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(person.skill)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(person.name.firstName)</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><ul>\n<li>创建出来的对象直接具有已实现的某些属性方法</li>\n<li>此模式参与对象的创建过程，干涉了对象的创建细节</li>\n<li>场景：已有内部给定的方法和属性，只需要选择需要的属性，就可以产生一个完整的对象</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  'use strict'</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> Human = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">param</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.skill = param &amp;&amp; param.skill || <span class=\"string\">'保密'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.hobby = param &amp;&amp; param.hobby || <span class=\"string\">'保密'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Human.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">getSkill</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.skill</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getHobby</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.hobby</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> Named = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"comment\">// 构造</span></div><div class=\"line\">    ~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, _this</span>) </span>&#123;</div><div class=\"line\">      _this.wholeName = name</div><div class=\"line\">      <span class=\"keyword\">if</span> (name.indexOf(<span class=\"string\">' '</span>) &gt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        _this.firstName = name.slice(<span class=\"number\">0</span>, name.indexOf(<span class=\"string\">' '</span>))</div><div class=\"line\">        _this.secondName = name.slice(name.indexOf(<span class=\"string\">' '</span>))</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;(name, _this)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> Work = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">work</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\">    ~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">work, _this</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (work) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'code'</span>:</div><div class=\"line\">          _this.work = <span class=\"string\">'工程师'</span></div><div class=\"line\">          _this.workDescript = <span class=\"string\">'每天沉醉于编程'</span></div><div class=\"line\">          <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'UI'</span>:</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'UE'</span>:</div><div class=\"line\">          _this.work = <span class=\"string\">'设计师'</span></div><div class=\"line\">          _this.workDescript = <span class=\"string\">'设计更似一种艺术'</span></div><div class=\"line\">          <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'teach'</span>:</div><div class=\"line\">          _this.work = <span class=\"string\">'教师'</span></div><div class=\"line\">          _this.workDescript = <span class=\"string\">'分享也是一种快乐'</span></div><div class=\"line\">          <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">          _this.work = work</div><div class=\"line\">          _this.workDescript = <span class=\"string\">'不清楚你的职业'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;(work, _this)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Work.prototype.changeWork = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">work</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.work = work</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Work.prototype.changeDescript = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">descript</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.workDescript = descript</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, work</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _person = <span class=\"keyword\">new</span> Human()</div><div class=\"line\">    _person.name = <span class=\"keyword\">new</span> Named(name)</div><div class=\"line\">    _person.work = <span class=\"keyword\">new</span> Work(work)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> _person</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">'s b'</span>, <span class=\"string\">'UI'</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(person.skill)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(person.name.firstName)</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>"},{"title":"js设计模式笔记--抽象工厂模式","date":"2017-08-18T07:35:43.000Z","_content":"\n## 抽象工厂模式\n1. 抽象类：声明但是不能使用的类\n2. 创造一个通用的大类，通过这个类去创建一系列抽象类，让子类去继承父类定义的但不能使用的方法,子类然后去实现这个抽象的方法\n```\n~function (global) {\n  'use strict'\n  var Car = function () {\n  }\n  Car.prototype = {\n    getPrice: function () {\n      return new Error('抽象方法不能调用')\n    },\n    getSpeed: function () {\n      return new Error('抽象方法不能调用')\n    }\n  }\n\n  // 抽象工厂方法\n  var VehicleFactory = function (subType, superType) {\n    if (typeof VehicleFactory[superType] === 'function') {\n      // noinspection JSAnnotator\n      function F () {\n      }\n\n      F.prototype = new VehicleFactory[superType]()\n      subType.constructor = subType\n      // 子类原型继承父类\n      subType.prototype = new F()\n    } else {\n      throw new Error('未创建该抽象对象')\n    }\n  }\n\n  VehicleFactory.Car = function () {\n    this.type = 'car'\n  }\n\n  VehicleFactory.Car.prototype = {\n    getPrice: function () {\n      return new Error('抽象方法不能调用')\n    },\n    getSpeed: function () {\n      return new Error('抽象方法不能调用')\n    }\n  }\n\n  VehicleFactory.Bus = function () {\n    this.type = 'bus'\n  }\n\n  VehicleFactory.Bus.prototype = {\n    getPrice: function () {\n      return new Error('抽象方法不能调用')\n    },\n    getSpeed: function () {\n      return new Error('抽象方法不能调用')\n    }\n  }\n\n  VehicleFactory.Truck = function () {\n    this.type = 'truck'\n  }\n\n  VehicleFactory.Truck.prototype = {\n    getPrice: function () {\n      return new Error('抽象方法不能调用')\n    },\n    getSpeed: function () {\n      return new Error('抽象方法不能调用')\n    }\n  }\n\n  var BMW = function (price, speed) {\n    this.price = price\n    this.speed = speed\n  }\n\n  VehicleFactory(BMW, 'car')\n\n  BMW.prototype.getPrice = function () {\n    return this.price\n  }\n\n  BMW.prototype.getSpeed = function () {\n    return this.speed\n  }\n\n}(this)\n```","source":"_posts/2017/08/js设计模式笔记-抽象工厂模式.md","raw":"---\ntitle: js设计模式笔记--抽象工厂模式\ndate: 2017-08-18 15:35:43\ntags:\n  - 设计模式\n  - js基础\n---\n\n## 抽象工厂模式\n1. 抽象类：声明但是不能使用的类\n2. 创造一个通用的大类，通过这个类去创建一系列抽象类，让子类去继承父类定义的但不能使用的方法,子类然后去实现这个抽象的方法\n```\n~function (global) {\n  'use strict'\n  var Car = function () {\n  }\n  Car.prototype = {\n    getPrice: function () {\n      return new Error('抽象方法不能调用')\n    },\n    getSpeed: function () {\n      return new Error('抽象方法不能调用')\n    }\n  }\n\n  // 抽象工厂方法\n  var VehicleFactory = function (subType, superType) {\n    if (typeof VehicleFactory[superType] === 'function') {\n      // noinspection JSAnnotator\n      function F () {\n      }\n\n      F.prototype = new VehicleFactory[superType]()\n      subType.constructor = subType\n      // 子类原型继承父类\n      subType.prototype = new F()\n    } else {\n      throw new Error('未创建该抽象对象')\n    }\n  }\n\n  VehicleFactory.Car = function () {\n    this.type = 'car'\n  }\n\n  VehicleFactory.Car.prototype = {\n    getPrice: function () {\n      return new Error('抽象方法不能调用')\n    },\n    getSpeed: function () {\n      return new Error('抽象方法不能调用')\n    }\n  }\n\n  VehicleFactory.Bus = function () {\n    this.type = 'bus'\n  }\n\n  VehicleFactory.Bus.prototype = {\n    getPrice: function () {\n      return new Error('抽象方法不能调用')\n    },\n    getSpeed: function () {\n      return new Error('抽象方法不能调用')\n    }\n  }\n\n  VehicleFactory.Truck = function () {\n    this.type = 'truck'\n  }\n\n  VehicleFactory.Truck.prototype = {\n    getPrice: function () {\n      return new Error('抽象方法不能调用')\n    },\n    getSpeed: function () {\n      return new Error('抽象方法不能调用')\n    }\n  }\n\n  var BMW = function (price, speed) {\n    this.price = price\n    this.speed = speed\n  }\n\n  VehicleFactory(BMW, 'car')\n\n  BMW.prototype.getPrice = function () {\n    return this.price\n  }\n\n  BMW.prototype.getSpeed = function () {\n    return this.speed\n  }\n\n}(this)\n```","slug":"js设计模式笔记-抽象工厂模式","published":1,"updated":"2017-08-22T05:46:13.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqse001cr4v3r7l19f4i","content":"<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><ol>\n<li>抽象类：声明但是不能使用的类</li>\n<li>创造一个通用的大类，通过这个类去创建一系列抽象类，让子类去继承父类定义的但不能使用的方法,子类然后去实现这个抽象的方法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">global</span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  'use strict'</span></div><div class=\"line\">  <span class=\"keyword\">var</span> Car = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">  Car.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">getPrice</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getSpeed</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 抽象工厂方法</span></div><div class=\"line\">  <span class=\"keyword\">var</span> VehicleFactory = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">subType, superType</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> VehicleFactory[superType] === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// noinspection JSAnnotator</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      F.prototype = <span class=\"keyword\">new</span> VehicleFactory[superType]()</div><div class=\"line\">      subType.constructor = subType</div><div class=\"line\">      <span class=\"comment\">// 子类原型继承父类</span></div><div class=\"line\">      subType.prototype = <span class=\"keyword\">new</span> F()</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'未创建该抽象对象'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Car = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'car'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Car.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">getPrice</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getSpeed</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Bus = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'bus'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Bus.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">getPrice</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getSpeed</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Truck = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'truck'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Truck.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">getPrice</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getSpeed</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> BMW = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">price, speed</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.price = price</div><div class=\"line\">    <span class=\"keyword\">this</span>.speed = speed</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory(BMW, <span class=\"string\">'car'</span>)</div><div class=\"line\"></div><div class=\"line\">  BMW.prototype.getPrice = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.price</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  BMW.prototype.getSpeed = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.speed</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;(<span class=\"keyword\">this</span>)</div></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><ol>\n<li>抽象类：声明但是不能使用的类</li>\n<li>创造一个通用的大类，通过这个类去创建一系列抽象类，让子类去继承父类定义的但不能使用的方法,子类然后去实现这个抽象的方法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">global</span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  'use strict'</span></div><div class=\"line\">  <span class=\"keyword\">var</span> Car = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">  Car.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">getPrice</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getSpeed</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 抽象工厂方法</span></div><div class=\"line\">  <span class=\"keyword\">var</span> VehicleFactory = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">subType, superType</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> VehicleFactory[superType] === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// noinspection JSAnnotator</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      F.prototype = <span class=\"keyword\">new</span> VehicleFactory[superType]()</div><div class=\"line\">      subType.constructor = subType</div><div class=\"line\">      <span class=\"comment\">// 子类原型继承父类</span></div><div class=\"line\">      subType.prototype = <span class=\"keyword\">new</span> F()</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'未创建该抽象对象'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Car = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'car'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Car.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">getPrice</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getSpeed</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Bus = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'bus'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Bus.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">getPrice</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getSpeed</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Truck = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'truck'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Truck.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">getPrice</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getSpeed</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'抽象方法不能调用'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> BMW = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">price, speed</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.price = price</div><div class=\"line\">    <span class=\"keyword\">this</span>.speed = speed</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory(BMW, <span class=\"string\">'car'</span>)</div><div class=\"line\"></div><div class=\"line\">  BMW.prototype.getPrice = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.price</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  BMW.prototype.getSpeed = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.speed</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;(<span class=\"keyword\">this</span>)</div></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"js设计模式笔记-桥接模式","date":"2017-08-21T10:30:40.000Z","_content":"\n## 桥接模式\n1. 某些类型由于自身的逻辑，会向多个维度变化，使其不增加复杂度并达到解耦的目的\n  * 将一个函数或者类当做一个桥梁，提取公共部分，将实现和抽象通过桥接的方法链接在一起\n  * 针对多维度变化，可以创建许多个桥梁\n  \n```\n'use strict'\nlet log = console.log.bind(console)\nfunction Speed (x, y) {\n  this.x  = x\n  this.y = y\n}\n\nSpeed.prototype.run = function () {\n  log('run')\n}\n\nfunction Color (cl) {\n  this.cl = cl\n}\n\nColor.prototype.draw = function () {\n  log('draw')\n}\n\nfunction Shape (sp) {\n  this.shape = sp\n}\n\nShape.prototype.change = function () {\n  log('改变形状')\n}\n\nfunction Speek (word) {\n  this.word = word\n}\n\nSpeek.prototype.say = function () {\n  log('fuck')\n}\n\n// 创建一座桥梁，在生成 Ball的时候直接 new Ball\nfunction Ball (x, y, c) {\n  this.speed = new Speed(x, y)\n  this.color = new Color(c)\n}\n\nBall.prototype.init = function () {\n  this.speed.run()\n  this.color.draw()\n}\n\nfunction People (x, y, f) {\n  this.speed = new Speed(x, y)\n  this.speek = new Speek(f)\n}\nPeople.prototype.init = function () {\n  this.speed.run()\n  this.speek.say()\n}\n\n// 通过桥梁生成实体\nvar ball = new Ball(1, 2, '#ccc')\nball.init()\n```\n","source":"_posts/2017/08/js设计模式笔记-桥接模式.md","raw":"---\ntitle: js设计模式笔记-桥接模式\ndate: 2017-08-21 18:30:40\ntags:\n  - 设计模式\n  - js基础\n---\n\n## 桥接模式\n1. 某些类型由于自身的逻辑，会向多个维度变化，使其不增加复杂度并达到解耦的目的\n  * 将一个函数或者类当做一个桥梁，提取公共部分，将实现和抽象通过桥接的方法链接在一起\n  * 针对多维度变化，可以创建许多个桥梁\n  \n```\n'use strict'\nlet log = console.log.bind(console)\nfunction Speed (x, y) {\n  this.x  = x\n  this.y = y\n}\n\nSpeed.prototype.run = function () {\n  log('run')\n}\n\nfunction Color (cl) {\n  this.cl = cl\n}\n\nColor.prototype.draw = function () {\n  log('draw')\n}\n\nfunction Shape (sp) {\n  this.shape = sp\n}\n\nShape.prototype.change = function () {\n  log('改变形状')\n}\n\nfunction Speek (word) {\n  this.word = word\n}\n\nSpeek.prototype.say = function () {\n  log('fuck')\n}\n\n// 创建一座桥梁，在生成 Ball的时候直接 new Ball\nfunction Ball (x, y, c) {\n  this.speed = new Speed(x, y)\n  this.color = new Color(c)\n}\n\nBall.prototype.init = function () {\n  this.speed.run()\n  this.color.draw()\n}\n\nfunction People (x, y, f) {\n  this.speed = new Speed(x, y)\n  this.speek = new Speek(f)\n}\nPeople.prototype.init = function () {\n  this.speed.run()\n  this.speek.say()\n}\n\n// 通过桥梁生成实体\nvar ball = new Ball(1, 2, '#ccc')\nball.init()\n```\n","slug":"js设计模式笔记-桥接模式","published":1,"updated":"2017-08-22T05:46:13.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqsf001dr4v36s366uip","content":"<h2 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h2><ol>\n<li>某些类型由于自身的逻辑，会向多个维度变化，使其不增加复杂度并达到解耦的目的<ul>\n<li>将一个函数或者类当做一个桥梁，提取公共部分，将实现和抽象通过桥接的方法链接在一起</li>\n<li>针对多维度变化，可以创建许多个桥梁</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"keyword\">let</span> log = <span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Speed</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.x  = x</div><div class=\"line\">  <span class=\"keyword\">this</span>.y = y</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Speed.prototype.run = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  log(<span class=\"string\">'run'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Color</span> (<span class=\"params\">cl</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.cl = cl</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Color.prototype.draw = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  log(<span class=\"string\">'draw'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Shape</span> (<span class=\"params\">sp</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.shape = sp</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Shape.prototype.change = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  log(<span class=\"string\">'改变形状'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Speek</span> (<span class=\"params\">word</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.word = word</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Speek.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  log(<span class=\"string\">'fuck'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建一座桥梁，在生成 Ball的时候直接 new Ball</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ball</span> (<span class=\"params\">x, y, c</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.speed = <span class=\"keyword\">new</span> Speed(x, y)</div><div class=\"line\">  <span class=\"keyword\">this</span>.color = <span class=\"keyword\">new</span> Color(c)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Ball.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.speed.run()</div><div class=\"line\">  <span class=\"keyword\">this</span>.color.draw()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">People</span> (<span class=\"params\">x, y, f</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.speed = <span class=\"keyword\">new</span> Speed(x, y)</div><div class=\"line\">  <span class=\"keyword\">this</span>.speek = <span class=\"keyword\">new</span> Speek(f)</div><div class=\"line\">&#125;</div><div class=\"line\">People.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.speed.run()</div><div class=\"line\">  <span class=\"keyword\">this</span>.speek.say()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过桥梁生成实体</span></div><div class=\"line\"><span class=\"keyword\">var</span> ball = <span class=\"keyword\">new</span> Ball(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">'#ccc'</span>)</div><div class=\"line\">ball.init()</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h2><ol>\n<li>某些类型由于自身的逻辑，会向多个维度变化，使其不增加复杂度并达到解耦的目的<ul>\n<li>将一个函数或者类当做一个桥梁，提取公共部分，将实现和抽象通过桥接的方法链接在一起</li>\n<li>针对多维度变化，可以创建许多个桥梁</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"keyword\">let</span> log = <span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Speed</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.x  = x</div><div class=\"line\">  <span class=\"keyword\">this</span>.y = y</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Speed.prototype.run = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  log(<span class=\"string\">'run'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Color</span> (<span class=\"params\">cl</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.cl = cl</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Color.prototype.draw = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  log(<span class=\"string\">'draw'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Shape</span> (<span class=\"params\">sp</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.shape = sp</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Shape.prototype.change = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  log(<span class=\"string\">'改变形状'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Speek</span> (<span class=\"params\">word</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.word = word</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Speek.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  log(<span class=\"string\">'fuck'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建一座桥梁，在生成 Ball的时候直接 new Ball</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ball</span> (<span class=\"params\">x, y, c</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.speed = <span class=\"keyword\">new</span> Speed(x, y)</div><div class=\"line\">  <span class=\"keyword\">this</span>.color = <span class=\"keyword\">new</span> Color(c)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Ball.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.speed.run()</div><div class=\"line\">  <span class=\"keyword\">this</span>.color.draw()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">People</span> (<span class=\"params\">x, y, f</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.speed = <span class=\"keyword\">new</span> Speed(x, y)</div><div class=\"line\">  <span class=\"keyword\">this</span>.speek = <span class=\"keyword\">new</span> Speek(f)</div><div class=\"line\">&#125;</div><div class=\"line\">People.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.speed.run()</div><div class=\"line\">  <span class=\"keyword\">this</span>.speek.say()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过桥梁生成实体</span></div><div class=\"line\"><span class=\"keyword\">var</span> ball = <span class=\"keyword\">new</span> Ball(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">'#ccc'</span>)</div><div class=\"line\">ball.init()</div></pre></td></tr></table></figure>\n"},{"title":"js设计模式笔记--模板方法模式","date":"2017-08-22T10:08:50.000Z","_content":"\n## 模板方法模式\n1. 父类定义一组操作骨架，将一些具体的步骤放在子类中，使得子类不改变父类的情况下，实现多元化展现\n  * 提供一个基础的弹框，外壳一样，但是里面的内容不一样，这就是模板方法的一种实现\n\n<!-- more -->\n```javascript\n~function () {\n  'use strict'\n  function noop () {\n  }\n  /**\n   * alert底层框架\n   * @param data\n   * @constructor\n   */\n  var Alert = function (data) {\n    if (!data) return\n\n    this.content = data.content\n    this.panel = document.createElement('div')\n    this.contentNode = document.createElement('p')\n    this.confirmButton = document.createElement('span')\n    this.closeBtn = document.createElement('b')\n    this.panel.className = 'alert'\n    this.closeBtn.className = 'a-close'\n    this.confirmButton.className = 'a-confirm'\n    this.confirmButton.innerHTML = data.confirm || '确认'\n    this.contentNode.innerHTML = this.content\n    this.success = data.success || noop\n    this.fail = data.fail || noop\n  }\n\n  Alert.prototype = {\n    init: function () {\n      // 生成提示框\n      this.panel.appendChild(this.closeBtn)\n      this.panel.appendChild(this.contentNode)\n      this.panel.appendChild(this.confirmButton)\n      document.body.appendChild(this.panel)\n      this.bindEvent()\n      this.show()\n    },\n    bindEvent: function () {\n      var _this = this\n      this.closeBtn.onclick = function () {\n        _this.fail()\n        _this.hide()\n      }\n      this.confirmButton.onclick = function () {\n        _this.success()\n        _this.hide()\n      }\n    },\n    hide: function () {\n      this.panel.style.display = 'node'\n    },\n    show: function () {\n      this.panel.style.display = 'block'\n    }\n  }\n\n  // 右侧提示框实现\n  var RightAlert = function (data) {\n    Alert.call(this, data)\n    this.confirmButton.className += ' right'\n  }\n\n  RightAlert.prototype = new Alert()\n\n  // 标题提示框\n  var TitleAlert = function (data) {\n    Alert.call(this, data)\n    this.title = data.title\n    this.titleNode = document.createElement('h3')\n    this.titleNode.innerHTML = this.title\n  }\n\n  TitleAlert.prototype = new Alert()\n\n  TitleAlert.prototype.init = function () {\n    this.panel.insertBefore(this.titleNode, this.panel.firstChild)\n    Alert.prototype.init.call(this)\n  }\n\n  // 以基类的封装继续封装\n  var CancelAlert = function (data) {\n    TitleAlert.call(this, data)\n    this.cancel = data.cancel\n    this.cancelBtn = document.createElement('span')\n    this.cancelBtn.className = 'cancel'\n    this.cancelBtn.innerHTML = this.cancel || '取消'\n  }\n\n  // 这里方法重写基础行为，所有继承最基础的类\n  CancelAlert.prototype = new Alert()\n\n  CancelAlert.prototype.init = function () {\n    TitleAlert.prototype.init.call(this)\n    this.panel.appendChild(this.cancelBtn)\n  }\n\n  CancelAlert.prototype.bindEvent = function () {\n    var _this = this\n    TitleAlert.prototype.bindEvent.call(_this)\n    this.cancelBtn.onclick = function () {\n      _this.fail()\n      _this.hide()\n    }\n  }\n\n  // 使用\n  new CancelAlert({\n    title: 'dfasdfsdf',\n    content: 'dsfsdfsdafs',\n    success: function () {\n      log('success')\n    },\n    fail: function () {\n      log('fail')\n    }\n  }).init()\n\n}()\n```","source":"_posts/2017/08/js设计模式笔记-模板方法模式.md","raw":"---\ntitle: js设计模式笔记--模板方法模式\ndate: 2017-08-22 18:08:50\ntags:\n  - 设计模式\n  - js基础\n---\n\n## 模板方法模式\n1. 父类定义一组操作骨架，将一些具体的步骤放在子类中，使得子类不改变父类的情况下，实现多元化展现\n  * 提供一个基础的弹框，外壳一样，但是里面的内容不一样，这就是模板方法的一种实现\n\n<!-- more -->\n```javascript\n~function () {\n  'use strict'\n  function noop () {\n  }\n  /**\n   * alert底层框架\n   * @param data\n   * @constructor\n   */\n  var Alert = function (data) {\n    if (!data) return\n\n    this.content = data.content\n    this.panel = document.createElement('div')\n    this.contentNode = document.createElement('p')\n    this.confirmButton = document.createElement('span')\n    this.closeBtn = document.createElement('b')\n    this.panel.className = 'alert'\n    this.closeBtn.className = 'a-close'\n    this.confirmButton.className = 'a-confirm'\n    this.confirmButton.innerHTML = data.confirm || '确认'\n    this.contentNode.innerHTML = this.content\n    this.success = data.success || noop\n    this.fail = data.fail || noop\n  }\n\n  Alert.prototype = {\n    init: function () {\n      // 生成提示框\n      this.panel.appendChild(this.closeBtn)\n      this.panel.appendChild(this.contentNode)\n      this.panel.appendChild(this.confirmButton)\n      document.body.appendChild(this.panel)\n      this.bindEvent()\n      this.show()\n    },\n    bindEvent: function () {\n      var _this = this\n      this.closeBtn.onclick = function () {\n        _this.fail()\n        _this.hide()\n      }\n      this.confirmButton.onclick = function () {\n        _this.success()\n        _this.hide()\n      }\n    },\n    hide: function () {\n      this.panel.style.display = 'node'\n    },\n    show: function () {\n      this.panel.style.display = 'block'\n    }\n  }\n\n  // 右侧提示框实现\n  var RightAlert = function (data) {\n    Alert.call(this, data)\n    this.confirmButton.className += ' right'\n  }\n\n  RightAlert.prototype = new Alert()\n\n  // 标题提示框\n  var TitleAlert = function (data) {\n    Alert.call(this, data)\n    this.title = data.title\n    this.titleNode = document.createElement('h3')\n    this.titleNode.innerHTML = this.title\n  }\n\n  TitleAlert.prototype = new Alert()\n\n  TitleAlert.prototype.init = function () {\n    this.panel.insertBefore(this.titleNode, this.panel.firstChild)\n    Alert.prototype.init.call(this)\n  }\n\n  // 以基类的封装继续封装\n  var CancelAlert = function (data) {\n    TitleAlert.call(this, data)\n    this.cancel = data.cancel\n    this.cancelBtn = document.createElement('span')\n    this.cancelBtn.className = 'cancel'\n    this.cancelBtn.innerHTML = this.cancel || '取消'\n  }\n\n  // 这里方法重写基础行为，所有继承最基础的类\n  CancelAlert.prototype = new Alert()\n\n  CancelAlert.prototype.init = function () {\n    TitleAlert.prototype.init.call(this)\n    this.panel.appendChild(this.cancelBtn)\n  }\n\n  CancelAlert.prototype.bindEvent = function () {\n    var _this = this\n    TitleAlert.prototype.bindEvent.call(_this)\n    this.cancelBtn.onclick = function () {\n      _this.fail()\n      _this.hide()\n    }\n  }\n\n  // 使用\n  new CancelAlert({\n    title: 'dfasdfsdf',\n    content: 'dsfsdfsdafs',\n    success: function () {\n      log('success')\n    },\n    fail: function () {\n      log('fail')\n    }\n  }).init()\n\n}()\n```","slug":"js设计模式笔记-模板方法模式","published":1,"updated":"2017-08-22T10:10:07.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqsh001gr4v33tt8l73x","content":"<h2 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h2><ol>\n<li>父类定义一组操作骨架，将一些具体的步骤放在子类中，使得子类不改变父类的情况下，实现多元化展现<ul>\n<li>提供一个基础的弹框，外壳一样，但是里面的内容不一样，这就是模板方法的一种实现</li>\n</ul>\n</li>\n</ol>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  'use strict'</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">noop</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * alert底层框架</div><div class=\"line\">   * @param data</div><div class=\"line\">   * @constructor</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">var</span> Alert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!data) <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.content = data.content</div><div class=\"line\">    <span class=\"keyword\">this</span>.panel = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.contentNode = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.confirmButton = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'span'</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.closeBtn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'b'</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.panel.className = <span class=\"string\">'alert'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.closeBtn.className = <span class=\"string\">'a-close'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.confirmButton.className = <span class=\"string\">'a-confirm'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.confirmButton.innerHTML = data.confirm || <span class=\"string\">'确认'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.contentNode.innerHTML = <span class=\"keyword\">this</span>.content</div><div class=\"line\">    <span class=\"keyword\">this</span>.success = data.success || noop</div><div class=\"line\">    <span class=\"keyword\">this</span>.fail = data.fail || noop</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Alert.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 生成提示框</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.panel.appendChild(<span class=\"keyword\">this</span>.closeBtn)</div><div class=\"line\">      <span class=\"keyword\">this</span>.panel.appendChild(<span class=\"keyword\">this</span>.contentNode)</div><div class=\"line\">      <span class=\"keyword\">this</span>.panel.appendChild(<span class=\"keyword\">this</span>.confirmButton)</div><div class=\"line\">      <span class=\"built_in\">document</span>.body.appendChild(<span class=\"keyword\">this</span>.panel)</div><div class=\"line\">      <span class=\"keyword\">this</span>.bindEvent()</div><div class=\"line\">      <span class=\"keyword\">this</span>.show()</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">bindEvent</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.closeBtn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _this.fail()</div><div class=\"line\">        _this.hide()</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">this</span>.confirmButton.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _this.success()</div><div class=\"line\">        _this.hide()</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">hide</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.panel.style.display = <span class=\"string\">'node'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.panel.style.display = <span class=\"string\">'block'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 右侧提示框实现</span></div><div class=\"line\">  <span class=\"keyword\">var</span> RightAlert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    Alert.call(<span class=\"keyword\">this</span>, data)</div><div class=\"line\">    <span class=\"keyword\">this</span>.confirmButton.className += <span class=\"string\">' right'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  RightAlert.prototype = <span class=\"keyword\">new</span> Alert()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 标题提示框</span></div><div class=\"line\">  <span class=\"keyword\">var</span> TitleAlert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    Alert.call(<span class=\"keyword\">this</span>, data)</div><div class=\"line\">    <span class=\"keyword\">this</span>.title = data.title</div><div class=\"line\">    <span class=\"keyword\">this</span>.titleNode = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'h3'</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.titleNode.innerHTML = <span class=\"keyword\">this</span>.title</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  TitleAlert.prototype = <span class=\"keyword\">new</span> Alert()</div><div class=\"line\"></div><div class=\"line\">  TitleAlert.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.panel.insertBefore(<span class=\"keyword\">this</span>.titleNode, <span class=\"keyword\">this</span>.panel.firstChild)</div><div class=\"line\">    Alert.prototype.init.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 以基类的封装继续封装</span></div><div class=\"line\">  <span class=\"keyword\">var</span> CancelAlert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    TitleAlert.call(<span class=\"keyword\">this</span>, data)</div><div class=\"line\">    <span class=\"keyword\">this</span>.cancel = data.cancel</div><div class=\"line\">    <span class=\"keyword\">this</span>.cancelBtn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'span'</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.cancelBtn.className = <span class=\"string\">'cancel'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.cancelBtn.innerHTML = <span class=\"keyword\">this</span>.cancel || <span class=\"string\">'取消'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 这里方法重写基础行为，所有继承最基础的类</span></div><div class=\"line\">  CancelAlert.prototype = <span class=\"keyword\">new</span> Alert()</div><div class=\"line\"></div><div class=\"line\">  CancelAlert.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    TitleAlert.prototype.init.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.panel.appendChild(<span class=\"keyword\">this</span>.cancelBtn)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  CancelAlert.prototype.bindEvent = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\">    TitleAlert.prototype.bindEvent.call(_this)</div><div class=\"line\">    <span class=\"keyword\">this</span>.cancelBtn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      _this.fail()</div><div class=\"line\">      _this.hide()</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 使用</span></div><div class=\"line\">  <span class=\"keyword\">new</span> CancelAlert(&#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">'dfasdfsdf'</span>,</div><div class=\"line\">    <span class=\"attr\">content</span>: <span class=\"string\">'dsfsdfsdafs'</span>,</div><div class=\"line\">    <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      log(<span class=\"string\">'success'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">fail</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      log(<span class=\"string\">'fail'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;).init()</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h2><ol>\n<li>父类定义一组操作骨架，将一些具体的步骤放在子类中，使得子类不改变父类的情况下，实现多元化展现<ul>\n<li>提供一个基础的弹框，外壳一样，但是里面的内容不一样，这就是模板方法的一种实现</li>\n</ul>\n</li>\n</ol>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  'use strict'</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">noop</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * alert底层框架</div><div class=\"line\">   * @param data</div><div class=\"line\">   * @constructor</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">var</span> Alert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!data) <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.content = data.content</div><div class=\"line\">    <span class=\"keyword\">this</span>.panel = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.contentNode = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.confirmButton = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'span'</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.closeBtn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'b'</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.panel.className = <span class=\"string\">'alert'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.closeBtn.className = <span class=\"string\">'a-close'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.confirmButton.className = <span class=\"string\">'a-confirm'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.confirmButton.innerHTML = data.confirm || <span class=\"string\">'确认'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.contentNode.innerHTML = <span class=\"keyword\">this</span>.content</div><div class=\"line\">    <span class=\"keyword\">this</span>.success = data.success || noop</div><div class=\"line\">    <span class=\"keyword\">this</span>.fail = data.fail || noop</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Alert.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 生成提示框</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.panel.appendChild(<span class=\"keyword\">this</span>.closeBtn)</div><div class=\"line\">      <span class=\"keyword\">this</span>.panel.appendChild(<span class=\"keyword\">this</span>.contentNode)</div><div class=\"line\">      <span class=\"keyword\">this</span>.panel.appendChild(<span class=\"keyword\">this</span>.confirmButton)</div><div class=\"line\">      <span class=\"built_in\">document</span>.body.appendChild(<span class=\"keyword\">this</span>.panel)</div><div class=\"line\">      <span class=\"keyword\">this</span>.bindEvent()</div><div class=\"line\">      <span class=\"keyword\">this</span>.show()</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">bindEvent</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.closeBtn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _this.fail()</div><div class=\"line\">        _this.hide()</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">this</span>.confirmButton.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _this.success()</div><div class=\"line\">        _this.hide()</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">hide</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.panel.style.display = <span class=\"string\">'node'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.panel.style.display = <span class=\"string\">'block'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 右侧提示框实现</span></div><div class=\"line\">  <span class=\"keyword\">var</span> RightAlert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    Alert.call(<span class=\"keyword\">this</span>, data)</div><div class=\"line\">    <span class=\"keyword\">this</span>.confirmButton.className += <span class=\"string\">' right'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  RightAlert.prototype = <span class=\"keyword\">new</span> Alert()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 标题提示框</span></div><div class=\"line\">  <span class=\"keyword\">var</span> TitleAlert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    Alert.call(<span class=\"keyword\">this</span>, data)</div><div class=\"line\">    <span class=\"keyword\">this</span>.title = data.title</div><div class=\"line\">    <span class=\"keyword\">this</span>.titleNode = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'h3'</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.titleNode.innerHTML = <span class=\"keyword\">this</span>.title</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  TitleAlert.prototype = <span class=\"keyword\">new</span> Alert()</div><div class=\"line\"></div><div class=\"line\">  TitleAlert.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.panel.insertBefore(<span class=\"keyword\">this</span>.titleNode, <span class=\"keyword\">this</span>.panel.firstChild)</div><div class=\"line\">    Alert.prototype.init.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 以基类的封装继续封装</span></div><div class=\"line\">  <span class=\"keyword\">var</span> CancelAlert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    TitleAlert.call(<span class=\"keyword\">this</span>, data)</div><div class=\"line\">    <span class=\"keyword\">this</span>.cancel = data.cancel</div><div class=\"line\">    <span class=\"keyword\">this</span>.cancelBtn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'span'</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.cancelBtn.className = <span class=\"string\">'cancel'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.cancelBtn.innerHTML = <span class=\"keyword\">this</span>.cancel || <span class=\"string\">'取消'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 这里方法重写基础行为，所有继承最基础的类</span></div><div class=\"line\">  CancelAlert.prototype = <span class=\"keyword\">new</span> Alert()</div><div class=\"line\"></div><div class=\"line\">  CancelAlert.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    TitleAlert.prototype.init.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.panel.appendChild(<span class=\"keyword\">this</span>.cancelBtn)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  CancelAlert.prototype.bindEvent = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\">    TitleAlert.prototype.bindEvent.call(_this)</div><div class=\"line\">    <span class=\"keyword\">this</span>.cancelBtn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      _this.fail()</div><div class=\"line\">      _this.hide()</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 使用</span></div><div class=\"line\">  <span class=\"keyword\">new</span> CancelAlert(&#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">'dfasdfsdf'</span>,</div><div class=\"line\">    <span class=\"attr\">content</span>: <span class=\"string\">'dsfsdfsdafs'</span>,</div><div class=\"line\">    <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      log(<span class=\"string\">'success'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">fail</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      log(<span class=\"string\">'fail'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;).init()</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>"},{"title":"js设计模式笔记--状态模式","date":"2017-08-22T10:11:59.000Z","_content":"## 状态模式\n1. 当一个对象的内部状态发生改变时，会导致其行为的改变，看起来像是改变了对象\n  * 当碰见需要多次判断某一个值得时候，不能确定是否还是会继续添加，就用状态模式，将判断的条件当做对象内部的一种状态\n\n<!-- more -->\n```javascript\n~function () {\n  'use strict'\n  // 实现\n  var log = console.log.bind(console)\n  var ResultState = function () {\n    var States = {\n      state0: function () {\n        log('这是第一种情况')\n      },\n      state1: function () {\n        log('这是第二种情况')\n      },\n      state2: function () {\n        log('这是第三种情况')\n      },\n      state3: function () {\n        log('这是第四种情况')\n      }\n    }\n\n    function show (result) {\n      States['state' + result] && States['state' + result]()\n    }\n\n    return {\n      show\n    }\n  }\n  // 调用\n  ResultState().show(1)\n  ResultState().show(2)\n\n  /**\n   * 模仿游戏的人物，执行的动作可以看做一种状态，游戏中的人物有时候需要连续执行多个动作\n   * @constructor\n   */\n  var MarryState = function () {\n    var _currentState = {},\n      states = {\n        jump: function () {\n          log('jump')\n        },\n        move: function () {\n          log('move')\n        },\n        shoot: function () {\n          log('shoot')\n        },\n        squat: function () {\n          log('squat')\n        }\n      }\n\n    var Action = {\n      changeState: function () {\n        var args = [].slice.call(arguments)\n        _currentState = {}\n        if (args.length) {\n          args.forEach(arg => {\n            _currentState[arg] = true\n          })\n        }\n        return this\n      },\n      goes: function () {\n        log('触发一次动作')\n        for (let i in _currentState) {\n          states[i] && states[i]()\n        }\n        return this\n      }\n    }\n    return {\n      change: Action.changeState,\n      goes: Action.goes\n    }\n\n  }\n\n  var marry = new MarryState()\n\n  marry\n    .change('jump', 'shoot')\n    .goes()\n    .goes()\n    .change('shoot')\n    .goes()\n\n\n}()\n```","source":"_posts/2017/08/js设计模式笔记-状态模式.md","raw":"---\ntitle: js设计模式笔记--状态模式\ndate: 2017-08-22 18:11:59\ntags:\n  - 设计模式\n  - js基础\n---\n## 状态模式\n1. 当一个对象的内部状态发生改变时，会导致其行为的改变，看起来像是改变了对象\n  * 当碰见需要多次判断某一个值得时候，不能确定是否还是会继续添加，就用状态模式，将判断的条件当做对象内部的一种状态\n\n<!-- more -->\n```javascript\n~function () {\n  'use strict'\n  // 实现\n  var log = console.log.bind(console)\n  var ResultState = function () {\n    var States = {\n      state0: function () {\n        log('这是第一种情况')\n      },\n      state1: function () {\n        log('这是第二种情况')\n      },\n      state2: function () {\n        log('这是第三种情况')\n      },\n      state3: function () {\n        log('这是第四种情况')\n      }\n    }\n\n    function show (result) {\n      States['state' + result] && States['state' + result]()\n    }\n\n    return {\n      show\n    }\n  }\n  // 调用\n  ResultState().show(1)\n  ResultState().show(2)\n\n  /**\n   * 模仿游戏的人物，执行的动作可以看做一种状态，游戏中的人物有时候需要连续执行多个动作\n   * @constructor\n   */\n  var MarryState = function () {\n    var _currentState = {},\n      states = {\n        jump: function () {\n          log('jump')\n        },\n        move: function () {\n          log('move')\n        },\n        shoot: function () {\n          log('shoot')\n        },\n        squat: function () {\n          log('squat')\n        }\n      }\n\n    var Action = {\n      changeState: function () {\n        var args = [].slice.call(arguments)\n        _currentState = {}\n        if (args.length) {\n          args.forEach(arg => {\n            _currentState[arg] = true\n          })\n        }\n        return this\n      },\n      goes: function () {\n        log('触发一次动作')\n        for (let i in _currentState) {\n          states[i] && states[i]()\n        }\n        return this\n      }\n    }\n    return {\n      change: Action.changeState,\n      goes: Action.goes\n    }\n\n  }\n\n  var marry = new MarryState()\n\n  marry\n    .change('jump', 'shoot')\n    .goes()\n    .goes()\n    .change('shoot')\n    .goes()\n\n\n}()\n```","slug":"js设计模式笔记-状态模式","published":1,"updated":"2017-08-22T10:12:58.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqsl001ir4v3axp16hsg","content":"<h2 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h2><ol>\n<li>当一个对象的内部状态发生改变时，会导致其行为的改变，看起来像是改变了对象<ul>\n<li>当碰见需要多次判断某一个值得时候，不能确定是否还是会继续添加，就用状态模式，将判断的条件当做对象内部的一种状态</li>\n</ul>\n</li>\n</ol>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  'use strict'</span></div><div class=\"line\">  <span class=\"comment\">// 实现</span></div><div class=\"line\">  <span class=\"keyword\">var</span> log = <span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>)</div><div class=\"line\">  <span class=\"keyword\">var</span> ResultState = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> States = &#123;</div><div class=\"line\">      <span class=\"attr\">state0</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        log(<span class=\"string\">'这是第一种情况'</span>)</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">state1</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        log(<span class=\"string\">'这是第二种情况'</span>)</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">state2</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        log(<span class=\"string\">'这是第三种情况'</span>)</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">state3</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        log(<span class=\"string\">'这是第四种情况'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">      States[<span class=\"string\">'state'</span> + result] &amp;&amp; States[<span class=\"string\">'state'</span> + result]()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      show</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 调用</span></div><div class=\"line\">  ResultState().show(<span class=\"number\">1</span>)</div><div class=\"line\">  ResultState().show(<span class=\"number\">2</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 模仿游戏的人物，执行的动作可以看做一种状态，游戏中的人物有时候需要连续执行多个动作</div><div class=\"line\">   * @constructor</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">var</span> MarryState = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _currentState = &#123;&#125;,</div><div class=\"line\">      states = &#123;</div><div class=\"line\">        <span class=\"attr\">jump</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          log(<span class=\"string\">'jump'</span>)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">move</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          log(<span class=\"string\">'move'</span>)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">shoot</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          log(<span class=\"string\">'shoot'</span>)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">squat</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          log(<span class=\"string\">'squat'</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> Action = &#123;</div><div class=\"line\">      <span class=\"attr\">changeState</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> args = [].slice.call(<span class=\"built_in\">arguments</span>)</div><div class=\"line\">        _currentState = &#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (args.length) &#123;</div><div class=\"line\">          args.forEach(<span class=\"function\"><span class=\"params\">arg</span> =&gt;</span> &#123;</div><div class=\"line\">            _currentState[arg] = <span class=\"literal\">true</span></div><div class=\"line\">          &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">goes</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        log(<span class=\"string\">'触发一次动作'</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> _currentState) &#123;</div><div class=\"line\">          states[i] &amp;&amp; states[i]()</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">change</span>: Action.changeState,</div><div class=\"line\">      <span class=\"attr\">goes</span>: Action.goes</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> marry = <span class=\"keyword\">new</span> MarryState()</div><div class=\"line\"></div><div class=\"line\">  marry</div><div class=\"line\">    .change(<span class=\"string\">'jump'</span>, <span class=\"string\">'shoot'</span>)</div><div class=\"line\">    .goes()</div><div class=\"line\">    .goes()</div><div class=\"line\">    .change(<span class=\"string\">'shoot'</span>)</div><div class=\"line\">    .goes()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h2><ol>\n<li>当一个对象的内部状态发生改变时，会导致其行为的改变，看起来像是改变了对象<ul>\n<li>当碰见需要多次判断某一个值得时候，不能确定是否还是会继续添加，就用状态模式，将判断的条件当做对象内部的一种状态</li>\n</ul>\n</li>\n</ol>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  'use strict'</span></div><div class=\"line\">  <span class=\"comment\">// 实现</span></div><div class=\"line\">  <span class=\"keyword\">var</span> log = <span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>)</div><div class=\"line\">  <span class=\"keyword\">var</span> ResultState = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> States = &#123;</div><div class=\"line\">      <span class=\"attr\">state0</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        log(<span class=\"string\">'这是第一种情况'</span>)</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">state1</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        log(<span class=\"string\">'这是第二种情况'</span>)</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">state2</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        log(<span class=\"string\">'这是第三种情况'</span>)</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">state3</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        log(<span class=\"string\">'这是第四种情况'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">      States[<span class=\"string\">'state'</span> + result] &amp;&amp; States[<span class=\"string\">'state'</span> + result]()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      show</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 调用</span></div><div class=\"line\">  ResultState().show(<span class=\"number\">1</span>)</div><div class=\"line\">  ResultState().show(<span class=\"number\">2</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 模仿游戏的人物，执行的动作可以看做一种状态，游戏中的人物有时候需要连续执行多个动作</div><div class=\"line\">   * @constructor</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">var</span> MarryState = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _currentState = &#123;&#125;,</div><div class=\"line\">      states = &#123;</div><div class=\"line\">        <span class=\"attr\">jump</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          log(<span class=\"string\">'jump'</span>)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">move</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          log(<span class=\"string\">'move'</span>)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">shoot</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          log(<span class=\"string\">'shoot'</span>)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">squat</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          log(<span class=\"string\">'squat'</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> Action = &#123;</div><div class=\"line\">      <span class=\"attr\">changeState</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> args = [].slice.call(<span class=\"built_in\">arguments</span>)</div><div class=\"line\">        _currentState = &#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (args.length) &#123;</div><div class=\"line\">          args.forEach(<span class=\"function\"><span class=\"params\">arg</span> =&gt;</span> &#123;</div><div class=\"line\">            _currentState[arg] = <span class=\"literal\">true</span></div><div class=\"line\">          &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">goes</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        log(<span class=\"string\">'触发一次动作'</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> _currentState) &#123;</div><div class=\"line\">          states[i] &amp;&amp; states[i]()</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">change</span>: Action.changeState,</div><div class=\"line\">      <span class=\"attr\">goes</span>: Action.goes</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> marry = <span class=\"keyword\">new</span> MarryState()</div><div class=\"line\"></div><div class=\"line\">  marry</div><div class=\"line\">    .change(<span class=\"string\">'jump'</span>, <span class=\"string\">'shoot'</span>)</div><div class=\"line\">    .goes()</div><div class=\"line\">    .goes()</div><div class=\"line\">    .change(<span class=\"string\">'shoot'</span>)</div><div class=\"line\">    .goes()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>"},{"title":"js设计模式笔记--策略模式","date":"2017-08-22T10:13:14.000Z","_content":"## 策略模式\n1. 将定义的一组算法封装起来，使其可以相互替换。封装的算法彼此之间独立，不会随着客户端的变化而变化\n  * 通过定义算法返回结果，和状态模式不同的是，没有对象的依赖\n\n<!-- more -->\n\n```javascript\n~function () {\n  'use strict'\n  // 实现\n  var PriceStrategy = (function () {\n    var strategy = {\n      return30: function (price) {\n        return +price + parseInt(price / 100) * 30\n      },\n      return50: function (price) {\n        return +price + parseInt(price / 100) * 50\n      },\n      percent90: function (price) {\n        return price * 100 * 90 / 10000\n      },\n      percent80: function (price) {\n        return price * 100 * 80 / 10000\n      },\n      percent50: function (price) {\n        return price * 100 * 50 / 10000\n      }\n    }\n    function doStrategy (algorithm, price) {\n      return strategy[algorithm] && strategy[algorithm](price)\n    }\n    doStrategy.addStrategy = function (field, fn) {\n      strategy[field] = fn\n    }\n    return doStrategy\n  })()\n\n  // 使用\n  var price = PriceStrategy('return50', '346.5')\n  console.log(price)\n\n  // jQuery的animate就是使用策略模式实现的，传入不同的参数，产生不一样的效果\n  // $('div').animate({ width: '200px' }, 1000, 'linear')\n  // $('div').animate({ width: '200px' }, 1000, 'swing')\n\n  // 在这个时候需要打6折怎么办？直接去改的话太麻烦,加上addStrategy方法\n  // 执行\n  var p = PriceStrategy('percent80', '34343')\n  console.log(p)\n\n  PriceStrategy.addStrategy('test59', function (price) {\n    return price * 1000000\n  })\n\n  var p = PriceStrategy('test59', '3434')\n  console.log(p)\n\n}()\n```","source":"_posts/2017/08/js设计模式笔记-策略模式.md","raw":"---\ntitle: js设计模式笔记--策略模式\ndate: 2017-08-22 18:13:14\ntags:\n  - 设计模式\n  - js基础\n---\n## 策略模式\n1. 将定义的一组算法封装起来，使其可以相互替换。封装的算法彼此之间独立，不会随着客户端的变化而变化\n  * 通过定义算法返回结果，和状态模式不同的是，没有对象的依赖\n\n<!-- more -->\n\n```javascript\n~function () {\n  'use strict'\n  // 实现\n  var PriceStrategy = (function () {\n    var strategy = {\n      return30: function (price) {\n        return +price + parseInt(price / 100) * 30\n      },\n      return50: function (price) {\n        return +price + parseInt(price / 100) * 50\n      },\n      percent90: function (price) {\n        return price * 100 * 90 / 10000\n      },\n      percent80: function (price) {\n        return price * 100 * 80 / 10000\n      },\n      percent50: function (price) {\n        return price * 100 * 50 / 10000\n      }\n    }\n    function doStrategy (algorithm, price) {\n      return strategy[algorithm] && strategy[algorithm](price)\n    }\n    doStrategy.addStrategy = function (field, fn) {\n      strategy[field] = fn\n    }\n    return doStrategy\n  })()\n\n  // 使用\n  var price = PriceStrategy('return50', '346.5')\n  console.log(price)\n\n  // jQuery的animate就是使用策略模式实现的，传入不同的参数，产生不一样的效果\n  // $('div').animate({ width: '200px' }, 1000, 'linear')\n  // $('div').animate({ width: '200px' }, 1000, 'swing')\n\n  // 在这个时候需要打6折怎么办？直接去改的话太麻烦,加上addStrategy方法\n  // 执行\n  var p = PriceStrategy('percent80', '34343')\n  console.log(p)\n\n  PriceStrategy.addStrategy('test59', function (price) {\n    return price * 1000000\n  })\n\n  var p = PriceStrategy('test59', '3434')\n  console.log(p)\n\n}()\n```","slug":"js设计模式笔记-策略模式","published":1,"updated":"2017-08-22T10:17:19.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqsp001lr4v3sb94g8qh","content":"<h2 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h2><ol>\n<li>将定义的一组算法封装起来，使其可以相互替换。封装的算法彼此之间独立，不会随着客户端的变化而变化<ul>\n<li>通过定义算法返回结果，和状态模式不同的是，没有对象的依赖</li>\n</ul>\n</li>\n</ol>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  'use strict'</span></div><div class=\"line\">  <span class=\"comment\">// 实现</span></div><div class=\"line\">  <span class=\"keyword\">var</span> PriceStrategy = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> strategy = &#123;</div><div class=\"line\">      <span class=\"attr\">return30</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> +price + <span class=\"built_in\">parseInt</span>(price / <span class=\"number\">100</span>) * <span class=\"number\">30</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">return50</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> +price + <span class=\"built_in\">parseInt</span>(price / <span class=\"number\">100</span>) * <span class=\"number\">50</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">percent90</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> price * <span class=\"number\">100</span> * <span class=\"number\">90</span> / <span class=\"number\">10000</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">percent80</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> price * <span class=\"number\">100</span> * <span class=\"number\">80</span> / <span class=\"number\">10000</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">percent50</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> price * <span class=\"number\">100</span> * <span class=\"number\">50</span> / <span class=\"number\">10000</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doStrategy</span> (<span class=\"params\">algorithm, price</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> strategy[algorithm] &amp;&amp; strategy[algorithm](price)</div><div class=\"line\">    &#125;</div><div class=\"line\">    doStrategy.addStrategy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">field, fn</span>) </span>&#123;</div><div class=\"line\">      strategy[field] = fn</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> doStrategy</div><div class=\"line\">  &#125;)()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 使用</span></div><div class=\"line\">  <span class=\"keyword\">var</span> price = PriceStrategy(<span class=\"string\">'return50'</span>, <span class=\"string\">'346.5'</span>)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(price)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// jQuery的animate就是使用策略模式实现的，传入不同的参数，产生不一样的效果</span></div><div class=\"line\">  <span class=\"comment\">// $('div').animate(&#123; width: '200px' &#125;, 1000, 'linear')</span></div><div class=\"line\">  <span class=\"comment\">// $('div').animate(&#123; width: '200px' &#125;, 1000, 'swing')</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 在这个时候需要打6折怎么办？直接去改的话太麻烦,加上addStrategy方法</span></div><div class=\"line\">  <span class=\"comment\">// 执行</span></div><div class=\"line\">  <span class=\"keyword\">var</span> p = PriceStrategy(<span class=\"string\">'percent80'</span>, <span class=\"string\">'34343'</span>)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(p)</div><div class=\"line\"></div><div class=\"line\">  PriceStrategy.addStrategy(<span class=\"string\">'test59'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> price * <span class=\"number\">1000000</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> p = PriceStrategy(<span class=\"string\">'test59'</span>, <span class=\"string\">'3434'</span>)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(p)</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h2><ol>\n<li>将定义的一组算法封装起来，使其可以相互替换。封装的算法彼此之间独立，不会随着客户端的变化而变化<ul>\n<li>通过定义算法返回结果，和状态模式不同的是，没有对象的依赖</li>\n</ul>\n</li>\n</ol>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  'use strict'</span></div><div class=\"line\">  <span class=\"comment\">// 实现</span></div><div class=\"line\">  <span class=\"keyword\">var</span> PriceStrategy = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> strategy = &#123;</div><div class=\"line\">      <span class=\"attr\">return30</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> +price + <span class=\"built_in\">parseInt</span>(price / <span class=\"number\">100</span>) * <span class=\"number\">30</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">return50</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> +price + <span class=\"built_in\">parseInt</span>(price / <span class=\"number\">100</span>) * <span class=\"number\">50</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">percent90</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> price * <span class=\"number\">100</span> * <span class=\"number\">90</span> / <span class=\"number\">10000</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">percent80</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> price * <span class=\"number\">100</span> * <span class=\"number\">80</span> / <span class=\"number\">10000</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">percent50</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> price * <span class=\"number\">100</span> * <span class=\"number\">50</span> / <span class=\"number\">10000</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doStrategy</span> (<span class=\"params\">algorithm, price</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> strategy[algorithm] &amp;&amp; strategy[algorithm](price)</div><div class=\"line\">    &#125;</div><div class=\"line\">    doStrategy.addStrategy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">field, fn</span>) </span>&#123;</div><div class=\"line\">      strategy[field] = fn</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> doStrategy</div><div class=\"line\">  &#125;)()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 使用</span></div><div class=\"line\">  <span class=\"keyword\">var</span> price = PriceStrategy(<span class=\"string\">'return50'</span>, <span class=\"string\">'346.5'</span>)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(price)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// jQuery的animate就是使用策略模式实现的，传入不同的参数，产生不一样的效果</span></div><div class=\"line\">  <span class=\"comment\">// $('div').animate(&#123; width: '200px' &#125;, 1000, 'linear')</span></div><div class=\"line\">  <span class=\"comment\">// $('div').animate(&#123; width: '200px' &#125;, 1000, 'swing')</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 在这个时候需要打6折怎么办？直接去改的话太麻烦,加上addStrategy方法</span></div><div class=\"line\">  <span class=\"comment\">// 执行</span></div><div class=\"line\">  <span class=\"keyword\">var</span> p = PriceStrategy(<span class=\"string\">'percent80'</span>, <span class=\"string\">'34343'</span>)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(p)</div><div class=\"line\"></div><div class=\"line\">  PriceStrategy.addStrategy(<span class=\"string\">'test59'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> price * <span class=\"number\">1000000</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> p = PriceStrategy(<span class=\"string\">'test59'</span>, <span class=\"string\">'3434'</span>)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(p)</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>"},{"title":"js设计模式笔记--简介","date":"2017-08-18T07:27:18.000Z","_content":"\n##创建函数比较多的时候应该加上命名空间\n1. 可以写在一个对象里面，也可以用构造函数的方式\n2. 链式调用就是返回一个拥有某个方法的对象\n```\n'use strict'\n// 1. 真假对象链式调用\nvar CheckObject = function () {\n  var o = {\n    checkName: function () {\n      console.log('name')\n      return o\n    },\n    checkEmail: function () {\n      console.log('email')\n      return o\n    },\n    checkPassword: function () {\n      console.log('password')\n      return o\n    }\n  }\n  return o\n}\n\nvar checkObject = CheckObject()\ncheckObject.checkName().checkEmail().checkPassword()\n\nconsole.log('-----------------------addMethod-------------------------')\n\n// addMethod添加多个函数\nFunction.prototype.addMethod = function (methods) {\n  Object.keys(methods).forEach((key, index) => {\n    this[key] = methods[key]\n  })\n  return this\n}\n\nvar methods = function () {\n}\nmethods\n  .addMethod({\n    'checkName': function () {\n      console.log('name')\n      return this\n    },\n    'checkPassword': function () {\n      console.log('password')\n      return this\n    }\n  })\n  .addMethod({\n    'checkEmail': function () {\n      console.log('email')\n      return this\n    }\n  })\n\nmethods.checkName().checkPassword().checkEmail()\n```","source":"_posts/2017/08/js设计模式笔记-简介.md","raw":"---\ntitle: js设计模式笔记--简介\ndate: 2017-08-18 15:27:18\ntags:\n  - 设计模式\n  - js基础\n---\n\n##创建函数比较多的时候应该加上命名空间\n1. 可以写在一个对象里面，也可以用构造函数的方式\n2. 链式调用就是返回一个拥有某个方法的对象\n```\n'use strict'\n// 1. 真假对象链式调用\nvar CheckObject = function () {\n  var o = {\n    checkName: function () {\n      console.log('name')\n      return o\n    },\n    checkEmail: function () {\n      console.log('email')\n      return o\n    },\n    checkPassword: function () {\n      console.log('password')\n      return o\n    }\n  }\n  return o\n}\n\nvar checkObject = CheckObject()\ncheckObject.checkName().checkEmail().checkPassword()\n\nconsole.log('-----------------------addMethod-------------------------')\n\n// addMethod添加多个函数\nFunction.prototype.addMethod = function (methods) {\n  Object.keys(methods).forEach((key, index) => {\n    this[key] = methods[key]\n  })\n  return this\n}\n\nvar methods = function () {\n}\nmethods\n  .addMethod({\n    'checkName': function () {\n      console.log('name')\n      return this\n    },\n    'checkPassword': function () {\n      console.log('password')\n      return this\n    }\n  })\n  .addMethod({\n    'checkEmail': function () {\n      console.log('email')\n      return this\n    }\n  })\n\nmethods.checkName().checkPassword().checkEmail()\n```","slug":"js设计模式笔记-简介","published":1,"updated":"2017-08-22T05:46:13.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqsr001nr4v3ja44zbp2","content":"<p>##创建函数比较多的时候应该加上命名空间</p>\n<ol>\n<li>可以写在一个对象里面，也可以用构造函数的方式</li>\n<li>链式调用就是返回一个拥有某个方法的对象<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"comment\">// 1. 真假对象链式调用</span></div><div class=\"line\"><span class=\"keyword\">var</span> CheckObject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"attr\">checkName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'name'</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span> o</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">checkEmail</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'email'</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span> o</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">checkPassword</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'password'</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span> o</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> o</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> checkObject = CheckObject()</div><div class=\"line\">checkObject.checkName().checkEmail().checkPassword()</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'-----------------------addMethod-------------------------'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// addMethod添加多个函数</span></div><div class=\"line\"><span class=\"built_in\">Function</span>.prototype.addMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">methods</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.keys(methods).forEach(<span class=\"function\">(<span class=\"params\">key, index</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>[key] = methods[key]</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> methods = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">methods</div><div class=\"line\">  .addMethod(&#123;</div><div class=\"line\">    <span class=\"string\">'checkName'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'name'</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">'checkPassword'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'password'</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .addMethod(&#123;</div><div class=\"line\">    <span class=\"string\">'checkEmail'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'email'</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">methods.checkName().checkPassword().checkEmail()</div></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>##创建函数比较多的时候应该加上命名空间</p>\n<ol>\n<li>可以写在一个对象里面，也可以用构造函数的方式</li>\n<li>链式调用就是返回一个拥有某个方法的对象<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"comment\">// 1. 真假对象链式调用</span></div><div class=\"line\"><span class=\"keyword\">var</span> CheckObject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"attr\">checkName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'name'</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span> o</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">checkEmail</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'email'</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span> o</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">checkPassword</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'password'</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span> o</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> o</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> checkObject = CheckObject()</div><div class=\"line\">checkObject.checkName().checkEmail().checkPassword()</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'-----------------------addMethod-------------------------'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// addMethod添加多个函数</span></div><div class=\"line\"><span class=\"built_in\">Function</span>.prototype.addMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">methods</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.keys(methods).forEach(<span class=\"function\">(<span class=\"params\">key, index</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>[key] = methods[key]</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> methods = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">methods</div><div class=\"line\">  .addMethod(&#123;</div><div class=\"line\">    <span class=\"string\">'checkName'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'name'</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">'checkPassword'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'password'</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .addMethod(&#123;</div><div class=\"line\">    <span class=\"string\">'checkEmail'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'email'</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">methods.checkName().checkPassword().checkEmail()</div></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"js设计模式笔记-组合模式","date":"2017-08-21T10:33:04.000Z","_content":"\n## 组合模式\n1. 层次结构，将部分整合成一个整体，类似DOM tree，所有有节点组合成一个html，使得用户对单个对象和组合的对象具有一致性\n  * 有一个整体作为对外的接口，内部组合若干的层次，模块化每个组件\n\n<!-- more -->\n\n```\n// util\nfunction inheritObject (o) {\n  function F () {\n  }\n\n  F.prototype = o\n  return new F()\n}\n\nfunction inheritPrototype (subClass, superClass) {\n  let p = inheritObject(superClass.prototype)\n  p.constructor = subClass\n  subClass.prototype = p\n}\n\n// 总类\nfunction News () {\n  this.children = []\n  this.element = null\n}\n\n// 抽象\nNews.prototype = {\n  constructor: 'News',\n  init: function () {\n    throw new Error('please override your method')\n  },\n  add: function () {\n    throw new Error('please override your method')\n  },\n  getElement: function () {\n    throw new Error('please override your method')\n  }\n}\n\n// 容器\nfunction Container (id, parent) {\n  News.call(this)\n  this.id = id\n  this.parent = parent\n}\n\ninheritPrototype(Container, News)\n\nContainer.prototype.init = function () {\n  this.element = document.createElement('ul')\n  this.element.id = this.id\n  this.element.className = 'new-container'\n}\n\nContainer.prototype.add = function (child) {\n  this.children.push(child)\n  this.element.appendChild(child.getElement())\n  return this\n}\n\nContainer.prototype.getElement = function () {\n  return this.element\n}\n\nContainer.prototype.show = function () {\n  this.parent.appendChild(this.element)\n}\n\n// 下一层级的集合类\nfunction Item (className) {\n  News.call(this)\n  this.className = className\n  this.init()\n}\n\ninheritPrototype(Item, News)\n\nItem.prototype.init = function () {\n  this.element = document.createElement('li')\n  this.element.className = this.className\n}\n\nItem.prototype.add = function (child) {\n  this.children.push(child)\n  this.element.appendChild(child.getElement())\n  return this\n}\n\nItem.prototype.getElement = function () {\n  return this.element\n}\n\nvar NewsGroup = function (className = '') {\n  News.call(this)\n  this.className = className\n  this.init()\n}\n\ninheritPrototype(NewsGroup, News)\n\nNewsGroup.prototype.init = function () {\n  this.element = document.createElement('div')\n  this.element.className = this.className\n}\n\nNewsGroup.prototype.add = function (child) {\n  this.children.push(child)\n  this.element.appendChild(child.getElement())\n}\n\nNewsGroup.prototype.getElement = function () {\n  return this.element\n}\n\nvar ImageNews = function (url = '', href = '#', className = 'normal') {\n  News.call(this)\n  this.url = url\n  this.href = href\n  this.className = className\n  this.init()\n}\n\ninheritPrototype(ImageNews, News)\n\nImageNews.prototype.init = function () {\n  this.element = document.createElement('a')\n  var img = new Image()\n  img.src = this.url\n  img.href = this.href\n  this.element.appendChild(img)\n  this.element.className = 'image-news ' + this.className\n  this.element.href = this.href\n}\n\nImageNews.prototype.add = function () {\n}\n\nImageNews.prototype.getElement = function () {\n  return this.element\n}\n\nvar IconNews = function (text = '', href = '#', type = 'video') {\n  News.call(this)\n  this.text = text\n  this.href = href\n  this.type = type\n  this.init()\n}\n\ninheritPrototype(IconNews, News)\n\nIconNews.prototype.init = function () {\n  this.element = document.createElement('a')\n  this.element.innerHTML = this.text\n  this.element.href = this.href\n  this.element.className = 'icon ' + this.type\n}\n\nIconNews.prototype.add = function () {\n}\n\nIconNews.prototype.getElement = function () {\n  return this.element\n}\n\nvar EasyNews = function (text = '', href = '#') {\n  News.call(this)\n  this.text = text\n  this.href = href\n  this.init()\n}\n\ninheritPrototype(EasyNews, News)\n\nEasyNews.prototype.init = function () {\n  this.element = document.createElement('a')\n  this.element.innerHTML = this.text\n  this.element.href = this.href\n  this.element.className = 'text'\n}\n\nEasyNews.prototype.add = function () {\n}\n\nEasyNews.prototype.getElement = function () {\n  return this.element\n}\n\nfunction TypeNews (text = '', href = '#', type = '', pos = 'left') {\n  News.call(this)\n  this.text = text\n  this.href = href\n  this.type = type\n  this.pos = pos\n  this.init()\n}\n\ninheritPrototype(TypeNews, News)\n\nTypeNews.prototype.init = function () {\n  this.element = document.createElement('a')\n  if (this.pos === 'left') {\n    this.element.innerHTML = '[' + this.type + '] ' + this.text\n  } else {\n    this.element.innerHTML = this.text + ' [' + this.type + ']'\n  }\n\n  this.element.href = this.href\n  this.element.className = 'text'\n}\n\nTypeNews.prototype.add = function () {\n}\n\nTypeNews.prototype.getElement = function () {\n  return this.element\n}\n\n// 层级已经声明，开始组合\nvar news1 = new Container('news', document.body)\nnews1\n  .add(\n    new Item('normal')\n      .add(\n        new IconNews('fkdsjflksdjflkjsdlkfjlskdjf', '#', 'video')\n      )\n  )\n  .add(\n    new Item('normal')\n      .add(\n        new IconNews('[fdsfdsfdsfsdfsdfdasf', '#', 'live')\n      )\n  )\n  .add(\n    new NewsGroup('has-img')\n      .add(\n        new ImageNews('img/1.jpg', '#', 'small')\n      )\n      .add(\n        new EasyNews('dsfdsfsdfdsfsdfd', '#')\n      )\n      .add(\n        new EasyNews('xxxxxxxxxxxxxx', '#')\n      )\n  )\n```","source":"_posts/2017/08/js设计模式笔记-组合模式.md","raw":"---\ntitle: js设计模式笔记-组合模式\ndate: 2017-08-21 18:33:04\ntags:\n  - 设计模式\n  - js基础\n---\n\n## 组合模式\n1. 层次结构，将部分整合成一个整体，类似DOM tree，所有有节点组合成一个html，使得用户对单个对象和组合的对象具有一致性\n  * 有一个整体作为对外的接口，内部组合若干的层次，模块化每个组件\n\n<!-- more -->\n\n```\n// util\nfunction inheritObject (o) {\n  function F () {\n  }\n\n  F.prototype = o\n  return new F()\n}\n\nfunction inheritPrototype (subClass, superClass) {\n  let p = inheritObject(superClass.prototype)\n  p.constructor = subClass\n  subClass.prototype = p\n}\n\n// 总类\nfunction News () {\n  this.children = []\n  this.element = null\n}\n\n// 抽象\nNews.prototype = {\n  constructor: 'News',\n  init: function () {\n    throw new Error('please override your method')\n  },\n  add: function () {\n    throw new Error('please override your method')\n  },\n  getElement: function () {\n    throw new Error('please override your method')\n  }\n}\n\n// 容器\nfunction Container (id, parent) {\n  News.call(this)\n  this.id = id\n  this.parent = parent\n}\n\ninheritPrototype(Container, News)\n\nContainer.prototype.init = function () {\n  this.element = document.createElement('ul')\n  this.element.id = this.id\n  this.element.className = 'new-container'\n}\n\nContainer.prototype.add = function (child) {\n  this.children.push(child)\n  this.element.appendChild(child.getElement())\n  return this\n}\n\nContainer.prototype.getElement = function () {\n  return this.element\n}\n\nContainer.prototype.show = function () {\n  this.parent.appendChild(this.element)\n}\n\n// 下一层级的集合类\nfunction Item (className) {\n  News.call(this)\n  this.className = className\n  this.init()\n}\n\ninheritPrototype(Item, News)\n\nItem.prototype.init = function () {\n  this.element = document.createElement('li')\n  this.element.className = this.className\n}\n\nItem.prototype.add = function (child) {\n  this.children.push(child)\n  this.element.appendChild(child.getElement())\n  return this\n}\n\nItem.prototype.getElement = function () {\n  return this.element\n}\n\nvar NewsGroup = function (className = '') {\n  News.call(this)\n  this.className = className\n  this.init()\n}\n\ninheritPrototype(NewsGroup, News)\n\nNewsGroup.prototype.init = function () {\n  this.element = document.createElement('div')\n  this.element.className = this.className\n}\n\nNewsGroup.prototype.add = function (child) {\n  this.children.push(child)\n  this.element.appendChild(child.getElement())\n}\n\nNewsGroup.prototype.getElement = function () {\n  return this.element\n}\n\nvar ImageNews = function (url = '', href = '#', className = 'normal') {\n  News.call(this)\n  this.url = url\n  this.href = href\n  this.className = className\n  this.init()\n}\n\ninheritPrototype(ImageNews, News)\n\nImageNews.prototype.init = function () {\n  this.element = document.createElement('a')\n  var img = new Image()\n  img.src = this.url\n  img.href = this.href\n  this.element.appendChild(img)\n  this.element.className = 'image-news ' + this.className\n  this.element.href = this.href\n}\n\nImageNews.prototype.add = function () {\n}\n\nImageNews.prototype.getElement = function () {\n  return this.element\n}\n\nvar IconNews = function (text = '', href = '#', type = 'video') {\n  News.call(this)\n  this.text = text\n  this.href = href\n  this.type = type\n  this.init()\n}\n\ninheritPrototype(IconNews, News)\n\nIconNews.prototype.init = function () {\n  this.element = document.createElement('a')\n  this.element.innerHTML = this.text\n  this.element.href = this.href\n  this.element.className = 'icon ' + this.type\n}\n\nIconNews.prototype.add = function () {\n}\n\nIconNews.prototype.getElement = function () {\n  return this.element\n}\n\nvar EasyNews = function (text = '', href = '#') {\n  News.call(this)\n  this.text = text\n  this.href = href\n  this.init()\n}\n\ninheritPrototype(EasyNews, News)\n\nEasyNews.prototype.init = function () {\n  this.element = document.createElement('a')\n  this.element.innerHTML = this.text\n  this.element.href = this.href\n  this.element.className = 'text'\n}\n\nEasyNews.prototype.add = function () {\n}\n\nEasyNews.prototype.getElement = function () {\n  return this.element\n}\n\nfunction TypeNews (text = '', href = '#', type = '', pos = 'left') {\n  News.call(this)\n  this.text = text\n  this.href = href\n  this.type = type\n  this.pos = pos\n  this.init()\n}\n\ninheritPrototype(TypeNews, News)\n\nTypeNews.prototype.init = function () {\n  this.element = document.createElement('a')\n  if (this.pos === 'left') {\n    this.element.innerHTML = '[' + this.type + '] ' + this.text\n  } else {\n    this.element.innerHTML = this.text + ' [' + this.type + ']'\n  }\n\n  this.element.href = this.href\n  this.element.className = 'text'\n}\n\nTypeNews.prototype.add = function () {\n}\n\nTypeNews.prototype.getElement = function () {\n  return this.element\n}\n\n// 层级已经声明，开始组合\nvar news1 = new Container('news', document.body)\nnews1\n  .add(\n    new Item('normal')\n      .add(\n        new IconNews('fkdsjflksdjflkjsdlkfjlskdjf', '#', 'video')\n      )\n  )\n  .add(\n    new Item('normal')\n      .add(\n        new IconNews('[fdsfdsfdsfsdfsdfdasf', '#', 'live')\n      )\n  )\n  .add(\n    new NewsGroup('has-img')\n      .add(\n        new ImageNews('img/1.jpg', '#', 'small')\n      )\n      .add(\n        new EasyNews('dsfdsfsdfdsfsdfd', '#')\n      )\n      .add(\n        new EasyNews('xxxxxxxxxxxxxx', '#')\n      )\n  )\n```","slug":"js设计模式笔记-组合模式","published":1,"updated":"2017-08-22T05:43:50.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqst001pr4v3dhyxymfs","content":"<h2 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h2><ol>\n<li>层次结构，将部分整合成一个整体，类似DOM tree，所有有节点组合成一个html，使得用户对单个对象和组合的对象具有一致性<ul>\n<li>有一个整体作为对外的接口，内部组合若干的层次，模块化每个组件</li>\n</ul>\n</li>\n</ol>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// util</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritObject</span> (<span class=\"params\">o</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  F.prototype = o</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span> (<span class=\"params\">subClass, superClass</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> p = inheritObject(superClass.prototype)</div><div class=\"line\">  p.constructor = subClass</div><div class=\"line\">  subClass.prototype = p</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 总类</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">News</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.children = []</div><div class=\"line\">  <span class=\"keyword\">this</span>.element = <span class=\"literal\">null</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 抽象</span></div><div class=\"line\">News.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">constructor</span>: <span class=\"string\">'News'</span>,</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'please override your method'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'please override your method'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">getElement</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'please override your method'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 容器</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Container</span> (<span class=\"params\">id, parent</span>) </span>&#123;</div><div class=\"line\">  News.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.id = id</div><div class=\"line\">  <span class=\"keyword\">this</span>.parent = parent</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(Container, News)</div><div class=\"line\"></div><div class=\"line\">Container.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'ul'</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.id = <span class=\"keyword\">this</span>.id</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.className = <span class=\"string\">'new-container'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Container.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">child</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.children.push(child)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.appendChild(child.getElement())</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Container.prototype.getElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Container.prototype.show = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.parent.appendChild(<span class=\"keyword\">this</span>.element)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 下一层级的集合类</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Item</span> (<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">  News.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.className = className</div><div class=\"line\">  <span class=\"keyword\">this</span>.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(Item, News)</div><div class=\"line\"></div><div class=\"line\">Item.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'li'</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.className = <span class=\"keyword\">this</span>.className</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Item.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">child</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.children.push(child)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.appendChild(child.getElement())</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Item.prototype.getElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> NewsGroup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">className = <span class=\"string\">''</span></span>) </span>&#123;</div><div class=\"line\">  News.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.className = className</div><div class=\"line\">  <span class=\"keyword\">this</span>.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(NewsGroup, News)</div><div class=\"line\"></div><div class=\"line\">NewsGroup.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.className = <span class=\"keyword\">this</span>.className</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">NewsGroup.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">child</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.children.push(child)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.appendChild(child.getElement())</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">NewsGroup.prototype.getElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ImageNews = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url = <span class=\"string\">''</span>, href = <span class=\"string\">'#'</span>, className = <span class=\"string\">'normal'</span></span>) </span>&#123;</div><div class=\"line\">  News.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.url = url</div><div class=\"line\">  <span class=\"keyword\">this</span>.href = href</div><div class=\"line\">  <span class=\"keyword\">this</span>.className = className</div><div class=\"line\">  <span class=\"keyword\">this</span>.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(ImageNews, News)</div><div class=\"line\"></div><div class=\"line\">ImageNews.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>)</div><div class=\"line\">  <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image()</div><div class=\"line\">  img.src = <span class=\"keyword\">this</span>.url</div><div class=\"line\">  img.href = <span class=\"keyword\">this</span>.href</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.appendChild(img)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.className = <span class=\"string\">'image-news '</span> + <span class=\"keyword\">this</span>.className</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.href = <span class=\"keyword\">this</span>.href</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ImageNews.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ImageNews.prototype.getElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> IconNews = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text = <span class=\"string\">''</span>, href = <span class=\"string\">'#'</span>, type = <span class=\"string\">'video'</span></span>) </span>&#123;</div><div class=\"line\">  News.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.text = text</div><div class=\"line\">  <span class=\"keyword\">this</span>.href = href</div><div class=\"line\">  <span class=\"keyword\">this</span>.type = type</div><div class=\"line\">  <span class=\"keyword\">this</span>.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(IconNews, News)</div><div class=\"line\"></div><div class=\"line\">IconNews.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.innerHTML = <span class=\"keyword\">this</span>.text</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.href = <span class=\"keyword\">this</span>.href</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.className = <span class=\"string\">'icon '</span> + <span class=\"keyword\">this</span>.type</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">IconNews.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">IconNews.prototype.getElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> EasyNews = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text = <span class=\"string\">''</span>, href = <span class=\"string\">'#'</span></span>) </span>&#123;</div><div class=\"line\">  News.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.text = text</div><div class=\"line\">  <span class=\"keyword\">this</span>.href = href</div><div class=\"line\">  <span class=\"keyword\">this</span>.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(EasyNews, News)</div><div class=\"line\"></div><div class=\"line\">EasyNews.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.innerHTML = <span class=\"keyword\">this</span>.text</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.href = <span class=\"keyword\">this</span>.href</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.className = <span class=\"string\">'text'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">EasyNews.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">EasyNews.prototype.getElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">TypeNews</span> (<span class=\"params\">text = <span class=\"string\">''</span>, href = <span class=\"string\">'#'</span>, type = <span class=\"string\">''</span>, pos = <span class=\"string\">'left'</span></span>) </span>&#123;</div><div class=\"line\">  News.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.text = text</div><div class=\"line\">  <span class=\"keyword\">this</span>.href = href</div><div class=\"line\">  <span class=\"keyword\">this</span>.type = type</div><div class=\"line\">  <span class=\"keyword\">this</span>.pos = pos</div><div class=\"line\">  <span class=\"keyword\">this</span>.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(TypeNews, News)</div><div class=\"line\"></div><div class=\"line\">TypeNews.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>)</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.pos === <span class=\"string\">'left'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.element.innerHTML = <span class=\"string\">'['</span> + <span class=\"keyword\">this</span>.type + <span class=\"string\">'] '</span> + <span class=\"keyword\">this</span>.text</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.element.innerHTML = <span class=\"keyword\">this</span>.text + <span class=\"string\">' ['</span> + <span class=\"keyword\">this</span>.type + <span class=\"string\">']'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.element.href = <span class=\"keyword\">this</span>.href</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.className = <span class=\"string\">'text'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TypeNews.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TypeNews.prototype.getElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 层级已经声明，开始组合</span></div><div class=\"line\"><span class=\"keyword\">var</span> news1 = <span class=\"keyword\">new</span> Container(<span class=\"string\">'news'</span>, <span class=\"built_in\">document</span>.body)</div><div class=\"line\">news1</div><div class=\"line\">  .add(</div><div class=\"line\">    <span class=\"keyword\">new</span> Item(<span class=\"string\">'normal'</span>)</div><div class=\"line\">      .add(</div><div class=\"line\">        <span class=\"keyword\">new</span> IconNews(<span class=\"string\">'fkdsjflksdjflkjsdlkfjlskdjf'</span>, <span class=\"string\">'#'</span>, <span class=\"string\">'video'</span>)</div><div class=\"line\">      )</div><div class=\"line\">  )</div><div class=\"line\">  .add(</div><div class=\"line\">    <span class=\"keyword\">new</span> Item(<span class=\"string\">'normal'</span>)</div><div class=\"line\">      .add(</div><div class=\"line\">        <span class=\"keyword\">new</span> IconNews(<span class=\"string\">'[fdsfdsfdsfsdfsdfdasf'</span>, <span class=\"string\">'#'</span>, <span class=\"string\">'live'</span>)</div><div class=\"line\">      )</div><div class=\"line\">  )</div><div class=\"line\">  .add(</div><div class=\"line\">    <span class=\"keyword\">new</span> NewsGroup(<span class=\"string\">'has-img'</span>)</div><div class=\"line\">      .add(</div><div class=\"line\">        <span class=\"keyword\">new</span> ImageNews(<span class=\"string\">'img/1.jpg'</span>, <span class=\"string\">'#'</span>, <span class=\"string\">'small'</span>)</div><div class=\"line\">      )</div><div class=\"line\">      .add(</div><div class=\"line\">        <span class=\"keyword\">new</span> EasyNews(<span class=\"string\">'dsfdsfsdfdsfsdfd'</span>, <span class=\"string\">'#'</span>)</div><div class=\"line\">      )</div><div class=\"line\">      .add(</div><div class=\"line\">        <span class=\"keyword\">new</span> EasyNews(<span class=\"string\">'xxxxxxxxxxxxxx'</span>, <span class=\"string\">'#'</span>)</div><div class=\"line\">      )</div><div class=\"line\">  )</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h2><ol>\n<li>层次结构，将部分整合成一个整体，类似DOM tree，所有有节点组合成一个html，使得用户对单个对象和组合的对象具有一致性<ul>\n<li>有一个整体作为对外的接口，内部组合若干的层次，模块化每个组件</li>\n</ul>\n</li>\n</ol>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// util</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritObject</span> (<span class=\"params\">o</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  F.prototype = o</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span> (<span class=\"params\">subClass, superClass</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> p = inheritObject(superClass.prototype)</div><div class=\"line\">  p.constructor = subClass</div><div class=\"line\">  subClass.prototype = p</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 总类</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">News</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.children = []</div><div class=\"line\">  <span class=\"keyword\">this</span>.element = <span class=\"literal\">null</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 抽象</span></div><div class=\"line\">News.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">constructor</span>: <span class=\"string\">'News'</span>,</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'please override your method'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'please override your method'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">getElement</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'please override your method'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 容器</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Container</span> (<span class=\"params\">id, parent</span>) </span>&#123;</div><div class=\"line\">  News.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.id = id</div><div class=\"line\">  <span class=\"keyword\">this</span>.parent = parent</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(Container, News)</div><div class=\"line\"></div><div class=\"line\">Container.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'ul'</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.id = <span class=\"keyword\">this</span>.id</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.className = <span class=\"string\">'new-container'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Container.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">child</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.children.push(child)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.appendChild(child.getElement())</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Container.prototype.getElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Container.prototype.show = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.parent.appendChild(<span class=\"keyword\">this</span>.element)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 下一层级的集合类</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Item</span> (<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">  News.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.className = className</div><div class=\"line\">  <span class=\"keyword\">this</span>.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(Item, News)</div><div class=\"line\"></div><div class=\"line\">Item.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'li'</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.className = <span class=\"keyword\">this</span>.className</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Item.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">child</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.children.push(child)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.appendChild(child.getElement())</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Item.prototype.getElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> NewsGroup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">className = <span class=\"string\">''</span></span>) </span>&#123;</div><div class=\"line\">  News.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.className = className</div><div class=\"line\">  <span class=\"keyword\">this</span>.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(NewsGroup, News)</div><div class=\"line\"></div><div class=\"line\">NewsGroup.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.className = <span class=\"keyword\">this</span>.className</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">NewsGroup.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">child</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.children.push(child)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.appendChild(child.getElement())</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">NewsGroup.prototype.getElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ImageNews = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url = <span class=\"string\">''</span>, href = <span class=\"string\">'#'</span>, className = <span class=\"string\">'normal'</span></span>) </span>&#123;</div><div class=\"line\">  News.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.url = url</div><div class=\"line\">  <span class=\"keyword\">this</span>.href = href</div><div class=\"line\">  <span class=\"keyword\">this</span>.className = className</div><div class=\"line\">  <span class=\"keyword\">this</span>.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(ImageNews, News)</div><div class=\"line\"></div><div class=\"line\">ImageNews.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>)</div><div class=\"line\">  <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image()</div><div class=\"line\">  img.src = <span class=\"keyword\">this</span>.url</div><div class=\"line\">  img.href = <span class=\"keyword\">this</span>.href</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.appendChild(img)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.className = <span class=\"string\">'image-news '</span> + <span class=\"keyword\">this</span>.className</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.href = <span class=\"keyword\">this</span>.href</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ImageNews.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ImageNews.prototype.getElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> IconNews = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text = <span class=\"string\">''</span>, href = <span class=\"string\">'#'</span>, type = <span class=\"string\">'video'</span></span>) </span>&#123;</div><div class=\"line\">  News.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.text = text</div><div class=\"line\">  <span class=\"keyword\">this</span>.href = href</div><div class=\"line\">  <span class=\"keyword\">this</span>.type = type</div><div class=\"line\">  <span class=\"keyword\">this</span>.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(IconNews, News)</div><div class=\"line\"></div><div class=\"line\">IconNews.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.innerHTML = <span class=\"keyword\">this</span>.text</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.href = <span class=\"keyword\">this</span>.href</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.className = <span class=\"string\">'icon '</span> + <span class=\"keyword\">this</span>.type</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">IconNews.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">IconNews.prototype.getElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> EasyNews = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text = <span class=\"string\">''</span>, href = <span class=\"string\">'#'</span></span>) </span>&#123;</div><div class=\"line\">  News.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.text = text</div><div class=\"line\">  <span class=\"keyword\">this</span>.href = href</div><div class=\"line\">  <span class=\"keyword\">this</span>.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(EasyNews, News)</div><div class=\"line\"></div><div class=\"line\">EasyNews.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.innerHTML = <span class=\"keyword\">this</span>.text</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.href = <span class=\"keyword\">this</span>.href</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.className = <span class=\"string\">'text'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">EasyNews.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">EasyNews.prototype.getElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">TypeNews</span> (<span class=\"params\">text = <span class=\"string\">''</span>, href = <span class=\"string\">'#'</span>, type = <span class=\"string\">''</span>, pos = <span class=\"string\">'left'</span></span>) </span>&#123;</div><div class=\"line\">  News.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">  <span class=\"keyword\">this</span>.text = text</div><div class=\"line\">  <span class=\"keyword\">this</span>.href = href</div><div class=\"line\">  <span class=\"keyword\">this</span>.type = type</div><div class=\"line\">  <span class=\"keyword\">this</span>.pos = pos</div><div class=\"line\">  <span class=\"keyword\">this</span>.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(TypeNews, News)</div><div class=\"line\"></div><div class=\"line\">TypeNews.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>)</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.pos === <span class=\"string\">'left'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.element.innerHTML = <span class=\"string\">'['</span> + <span class=\"keyword\">this</span>.type + <span class=\"string\">'] '</span> + <span class=\"keyword\">this</span>.text</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.element.innerHTML = <span class=\"keyword\">this</span>.text + <span class=\"string\">' ['</span> + <span class=\"keyword\">this</span>.type + <span class=\"string\">']'</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.element.href = <span class=\"keyword\">this</span>.href</div><div class=\"line\">  <span class=\"keyword\">this</span>.element.className = <span class=\"string\">'text'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TypeNews.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TypeNews.prototype.getElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 层级已经声明，开始组合</span></div><div class=\"line\"><span class=\"keyword\">var</span> news1 = <span class=\"keyword\">new</span> Container(<span class=\"string\">'news'</span>, <span class=\"built_in\">document</span>.body)</div><div class=\"line\">news1</div><div class=\"line\">  .add(</div><div class=\"line\">    <span class=\"keyword\">new</span> Item(<span class=\"string\">'normal'</span>)</div><div class=\"line\">      .add(</div><div class=\"line\">        <span class=\"keyword\">new</span> IconNews(<span class=\"string\">'fkdsjflksdjflkjsdlkfjlskdjf'</span>, <span class=\"string\">'#'</span>, <span class=\"string\">'video'</span>)</div><div class=\"line\">      )</div><div class=\"line\">  )</div><div class=\"line\">  .add(</div><div class=\"line\">    <span class=\"keyword\">new</span> Item(<span class=\"string\">'normal'</span>)</div><div class=\"line\">      .add(</div><div class=\"line\">        <span class=\"keyword\">new</span> IconNews(<span class=\"string\">'[fdsfdsfdsfsdfsdfdasf'</span>, <span class=\"string\">'#'</span>, <span class=\"string\">'live'</span>)</div><div class=\"line\">      )</div><div class=\"line\">  )</div><div class=\"line\">  .add(</div><div class=\"line\">    <span class=\"keyword\">new</span> NewsGroup(<span class=\"string\">'has-img'</span>)</div><div class=\"line\">      .add(</div><div class=\"line\">        <span class=\"keyword\">new</span> ImageNews(<span class=\"string\">'img/1.jpg'</span>, <span class=\"string\">'#'</span>, <span class=\"string\">'small'</span>)</div><div class=\"line\">      )</div><div class=\"line\">      .add(</div><div class=\"line\">        <span class=\"keyword\">new</span> EasyNews(<span class=\"string\">'dsfdsfsdfdsfsdfd'</span>, <span class=\"string\">'#'</span>)</div><div class=\"line\">      )</div><div class=\"line\">      .add(</div><div class=\"line\">        <span class=\"keyword\">new</span> EasyNews(<span class=\"string\">'xxxxxxxxxxxxxx'</span>, <span class=\"string\">'#'</span>)</div><div class=\"line\">      )</div><div class=\"line\">  )</div></pre></td></tr></table></figure>"},{"title":"js设计模式笔记--装饰者模式","date":"2017-08-18T07:44:41.000Z","_content":"##装饰者模式\n* 不改变原对象的基础上，通过添加属性或方法使原对象满足要求\n```\n'use strict'\n// 装饰者\nvar decorator = (function () {\n  return function (input, fn) {\n    // 获取事件源\n    var input = document.getElementById(input)\n    if (typeof input.onclick === 'function') {\n      // 将之前的存起来，那之前有很多怎么办\n      var old = input.onclick\n      input.onclick = function () {\n        old()\n        // 看见吗就是执行了之前的函数，顺便加了个回调\n        fn()\n      }\n    } else {\n      input.onclick = fn\n    }\n    // do something\n\n  }\n}())\n\ndocument.getElementById('btn').onclick = function() {\n  console.log('fuck')\n}\n\ndecorator('btn', function() {\n  console.log('just go on')\n})\n```","source":"_posts/2017/08/js设计模式笔记-装饰者模式.md","raw":"---\ntitle: js设计模式笔记--装饰者模式\ndate: 2017-08-18 15:44:41\ntags:\n  - 设计模式\n  - js基础\n---\n##装饰者模式\n* 不改变原对象的基础上，通过添加属性或方法使原对象满足要求\n```\n'use strict'\n// 装饰者\nvar decorator = (function () {\n  return function (input, fn) {\n    // 获取事件源\n    var input = document.getElementById(input)\n    if (typeof input.onclick === 'function') {\n      // 将之前的存起来，那之前有很多怎么办\n      var old = input.onclick\n      input.onclick = function () {\n        old()\n        // 看见吗就是执行了之前的函数，顺便加了个回调\n        fn()\n      }\n    } else {\n      input.onclick = fn\n    }\n    // do something\n\n  }\n}())\n\ndocument.getElementById('btn').onclick = function() {\n  console.log('fuck')\n}\n\ndecorator('btn', function() {\n  console.log('just go on')\n})\n```","slug":"js设计模式笔记-装饰者模式","published":1,"updated":"2017-08-22T05:45:11.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqsw001rr4v38euifogv","content":"<p>##装饰者模式</p>\n<ul>\n<li>不改变原对象的基础上，通过添加属性或方法使原对象满足要求<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"comment\">// 装饰者</span></div><div class=\"line\"><span class=\"keyword\">var</span> decorator = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">input, fn</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 获取事件源</span></div><div class=\"line\">    <span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.getElementById(input)</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> input.onclick === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 将之前的存起来，那之前有很多怎么办</span></div><div class=\"line\">      <span class=\"keyword\">var</span> old = input.onclick</div><div class=\"line\">      input.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        old()</div><div class=\"line\">        <span class=\"comment\">// 看见吗就是执行了之前的函数，顺便加了个回调</span></div><div class=\"line\">        fn()</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      input.onclick = fn</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;())</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fuck'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">decorator(<span class=\"string\">'btn'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'just go on'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>##装饰者模式</p>\n<ul>\n<li>不改变原对象的基础上，通过添加属性或方法使原对象满足要求<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"comment\">// 装饰者</span></div><div class=\"line\"><span class=\"keyword\">var</span> decorator = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">input, fn</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 获取事件源</span></div><div class=\"line\">    <span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.getElementById(input)</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> input.onclick === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 将之前的存起来，那之前有很多怎么办</span></div><div class=\"line\">      <span class=\"keyword\">var</span> old = input.onclick</div><div class=\"line\">      input.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        old()</div><div class=\"line\">        <span class=\"comment\">// 看见吗就是执行了之前的函数，顺便加了个回调</span></div><div class=\"line\">        fn()</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      input.onclick = fn</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;())</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fuck'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">decorator(<span class=\"string\">'btn'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'just go on'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"js设计模式笔记--观察者模式","date":"2017-08-22T10:10:32.000Z","_content":"\n## 观察者模式\n1. 观察者模式又被称作发布-订阅模式，是一种消息机制，依靠事件很容易实现解耦\n * 观察者模式称为js最重要的设计模式都不为过\n * 观察者模式实际是函数的回调，先将函数放入（订阅）容器中，发布的时候从容器中拿出执行\n\n<!-- more -->\n```javascript\n~function () {\n  'use strict'\n  var log = console.log.bind(console)\n  // 观察者模式实现\n  var Observer = (function () {\n    var _messages = {}\n    return {\n      regist: function (type, fn) {\n        if (!_messages.hasOwnProperty(type)) {\n          _messages[type] = [fn]\n        } else {\n          [].push.call(_messages[type], fn)\n        }\n      },\n      fire: function (type, args) {\n        if (!_messages[type]) return\n        var events = {\n          type: type,\n          data: args || {}\n        }\n        _messages[type].forEach(message => {\n          message.call(this, events.data)\n        })\n      },\n      remove: function (type, fn) {\n        if (_messages[type] instanceof Array) {\n          var i = _messages[type].length - 1\n          for (; i >= 0; i--) {\n            _messages[type][i] === fn && _messages[type].splice(i, 1)\n          }\n        }\n      }\n    }\n  })\n  var observer = Observer()\n  var fn = function (bitch) {\n    log('fuck ', bitch)\n  }\n  // 使用\n  observer.regist('fuck', fn)\n  observer.regist('gun', fn)\n\n  observer.fire('fuck', '韩梅梅')\n\n  observer.remove('fuck', fn)\n\n  observer.fire('fuck', 'dsfdsf')\n\n  observer.fire('gun', 'fuck')\n\n}()\n```","source":"_posts/2017/08/js设计模式笔记-观察者模式.md","raw":"---\ntitle: js设计模式笔记--观察者模式\ndate: 2017-08-22 18:10:32\ntags:\n  - 设计模式\n  - js基础\n---\n\n## 观察者模式\n1. 观察者模式又被称作发布-订阅模式，是一种消息机制，依靠事件很容易实现解耦\n * 观察者模式称为js最重要的设计模式都不为过\n * 观察者模式实际是函数的回调，先将函数放入（订阅）容器中，发布的时候从容器中拿出执行\n\n<!-- more -->\n```javascript\n~function () {\n  'use strict'\n  var log = console.log.bind(console)\n  // 观察者模式实现\n  var Observer = (function () {\n    var _messages = {}\n    return {\n      regist: function (type, fn) {\n        if (!_messages.hasOwnProperty(type)) {\n          _messages[type] = [fn]\n        } else {\n          [].push.call(_messages[type], fn)\n        }\n      },\n      fire: function (type, args) {\n        if (!_messages[type]) return\n        var events = {\n          type: type,\n          data: args || {}\n        }\n        _messages[type].forEach(message => {\n          message.call(this, events.data)\n        })\n      },\n      remove: function (type, fn) {\n        if (_messages[type] instanceof Array) {\n          var i = _messages[type].length - 1\n          for (; i >= 0; i--) {\n            _messages[type][i] === fn && _messages[type].splice(i, 1)\n          }\n        }\n      }\n    }\n  })\n  var observer = Observer()\n  var fn = function (bitch) {\n    log('fuck ', bitch)\n  }\n  // 使用\n  observer.regist('fuck', fn)\n  observer.regist('gun', fn)\n\n  observer.fire('fuck', '韩梅梅')\n\n  observer.remove('fuck', fn)\n\n  observer.fire('fuck', 'dsfdsf')\n\n  observer.fire('gun', 'fuck')\n\n}()\n```","slug":"js设计模式笔记-观察者模式","published":1,"updated":"2017-08-22T10:11:39.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqsy001ur4v3scj6ey40","content":"<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><ol>\n<li>观察者模式又被称作发布-订阅模式，是一种消息机制，依靠事件很容易实现解耦<ul>\n<li>观察者模式称为js最重要的设计模式都不为过</li>\n<li>观察者模式实际是函数的回调，先将函数放入（订阅）容器中，发布的时候从容器中拿出执行</li>\n</ul>\n</li>\n</ol>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  'use strict'</span></div><div class=\"line\">  <span class=\"keyword\">var</span> log = <span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>)</div><div class=\"line\">  <span class=\"comment\">// 观察者模式实现</span></div><div class=\"line\">  <span class=\"keyword\">var</span> Observer = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _messages = &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">regist</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">type, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!_messages.hasOwnProperty(type)) &#123;</div><div class=\"line\">          _messages[type] = [fn]</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          [].push.call(_messages[type], fn)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">fire</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">type, args</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!_messages[type]) <span class=\"keyword\">return</span></div><div class=\"line\">        <span class=\"keyword\">var</span> events = &#123;</div><div class=\"line\">          <span class=\"attr\">type</span>: type,</div><div class=\"line\">          <span class=\"attr\">data</span>: args || &#123;&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        _messages[type].forEach(<span class=\"function\"><span class=\"params\">message</span> =&gt;</span> &#123;</div><div class=\"line\">          message.call(<span class=\"keyword\">this</span>, events.data)</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">remove</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">type, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (_messages[type] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> i = _messages[type].length - <span class=\"number\">1</span></div><div class=\"line\">          <span class=\"keyword\">for</span> (; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">            _messages[type][i] === fn &amp;&amp; _messages[type].splice(i, <span class=\"number\">1</span>)</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">var</span> observer = Observer()</div><div class=\"line\">  <span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">bitch</span>) </span>&#123;</div><div class=\"line\">    log(<span class=\"string\">'fuck '</span>, bitch)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 使用</span></div><div class=\"line\">  observer.regist(<span class=\"string\">'fuck'</span>, fn)</div><div class=\"line\">  observer.regist(<span class=\"string\">'gun'</span>, fn)</div><div class=\"line\"></div><div class=\"line\">  observer.fire(<span class=\"string\">'fuck'</span>, <span class=\"string\">'韩梅梅'</span>)</div><div class=\"line\"></div><div class=\"line\">  observer.remove(<span class=\"string\">'fuck'</span>, fn)</div><div class=\"line\"></div><div class=\"line\">  observer.fire(<span class=\"string\">'fuck'</span>, <span class=\"string\">'dsfdsf'</span>)</div><div class=\"line\"></div><div class=\"line\">  observer.fire(<span class=\"string\">'gun'</span>, <span class=\"string\">'fuck'</span>)</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><ol>\n<li>观察者模式又被称作发布-订阅模式，是一种消息机制，依靠事件很容易实现解耦<ul>\n<li>观察者模式称为js最重要的设计模式都不为过</li>\n<li>观察者模式实际是函数的回调，先将函数放入（订阅）容器中，发布的时候从容器中拿出执行</li>\n</ul>\n</li>\n</ol>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  'use strict'</span></div><div class=\"line\">  <span class=\"keyword\">var</span> log = <span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>)</div><div class=\"line\">  <span class=\"comment\">// 观察者模式实现</span></div><div class=\"line\">  <span class=\"keyword\">var</span> Observer = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _messages = &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">regist</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">type, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!_messages.hasOwnProperty(type)) &#123;</div><div class=\"line\">          _messages[type] = [fn]</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          [].push.call(_messages[type], fn)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">fire</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">type, args</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!_messages[type]) <span class=\"keyword\">return</span></div><div class=\"line\">        <span class=\"keyword\">var</span> events = &#123;</div><div class=\"line\">          <span class=\"attr\">type</span>: type,</div><div class=\"line\">          <span class=\"attr\">data</span>: args || &#123;&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        _messages[type].forEach(<span class=\"function\"><span class=\"params\">message</span> =&gt;</span> &#123;</div><div class=\"line\">          message.call(<span class=\"keyword\">this</span>, events.data)</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">remove</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">type, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (_messages[type] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> i = _messages[type].length - <span class=\"number\">1</span></div><div class=\"line\">          <span class=\"keyword\">for</span> (; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">            _messages[type][i] === fn &amp;&amp; _messages[type].splice(i, <span class=\"number\">1</span>)</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">var</span> observer = Observer()</div><div class=\"line\">  <span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">bitch</span>) </span>&#123;</div><div class=\"line\">    log(<span class=\"string\">'fuck '</span>, bitch)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 使用</span></div><div class=\"line\">  observer.regist(<span class=\"string\">'fuck'</span>, fn)</div><div class=\"line\">  observer.regist(<span class=\"string\">'gun'</span>, fn)</div><div class=\"line\"></div><div class=\"line\">  observer.fire(<span class=\"string\">'fuck'</span>, <span class=\"string\">'韩梅梅'</span>)</div><div class=\"line\"></div><div class=\"line\">  observer.remove(<span class=\"string\">'fuck'</span>, fn)</div><div class=\"line\"></div><div class=\"line\">  observer.fire(<span class=\"string\">'fuck'</span>, <span class=\"string\">'dsfdsf'</span>)</div><div class=\"line\"></div><div class=\"line\">  observer.fire(<span class=\"string\">'gun'</span>, <span class=\"string\">'fuck'</span>)</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>"},{"title":"js设计模式笔记--适配器模式","date":"2017-08-18T07:41:20.000Z","_content":"## 适配器模式\n* 什么是适配器，就是将数据转化了一下，防止出错或者数据改变\n1. 假设引入了JQ，而JQ和自己的代码库重叠了，怎么办？\n  * window.my$ = jQuery 就是这么粗暴\n2. 比如你要的数据是``[{},{}]``这样的，后台给了你``{}``，你怎么办\n  * 写个适配器，转化一下。 噗！吐血","source":"_posts/2017/08/js设计模式笔记-适配器模式.md","raw":"---\ntitle: js设计模式笔记--适配器模式\ndate: 2017-08-18 15:41:20\ntags:\n  - 设计模式\n  - js基础\n---\n## 适配器模式\n* 什么是适配器，就是将数据转化了一下，防止出错或者数据改变\n1. 假设引入了JQ，而JQ和自己的代码库重叠了，怎么办？\n  * window.my$ = jQuery 就是这么粗暴\n2. 比如你要的数据是``[{},{}]``这样的，后台给了你``{}``，你怎么办\n  * 写个适配器，转化一下。 噗！吐血","slug":"js设计模式笔记-适配器模式","published":1,"updated":"2017-08-18T07:42:54.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqsz001vr4v3tauk9m4p","content":"<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><ul>\n<li>什么是适配器，就是将数据转化了一下，防止出错或者数据改变</li>\n</ul>\n<ol>\n<li>假设引入了JQ，而JQ和自己的代码库重叠了，怎么办？<ul>\n<li>window.my$ = jQuery 就是这么粗暴</li>\n</ul>\n</li>\n<li>比如你要的数据是<code>[{},{}]</code>这样的，后台给了你<code>{}</code>，你怎么办<ul>\n<li>写个适配器，转化一下。 噗！吐血</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><ul>\n<li>什么是适配器，就是将数据转化了一下，防止出错或者数据改变</li>\n</ul>\n<ol>\n<li>假设引入了JQ，而JQ和自己的代码库重叠了，怎么办？<ul>\n<li>window.my$ = jQuery 就是这么粗暴</li>\n</ul>\n</li>\n<li>比如你要的数据是<code>[{},{}]</code>这样的，后台给了你<code>{}</code>，你怎么办<ul>\n<li>写个适配器，转化一下。 噗！吐血</li>\n</ul>\n</li>\n</ol>\n"},{"title":"js设计模式笔记--面向对象","date":"2017-08-18T07:29:39.000Z","_content":"\n##面向对象\n1. 面向对象就是将需要的功能封装为一个对象，这个对象称之为类，台湾翻译为面向物体编程，个人认为比较确切\n2. 面向对象的特征\n  * 封装（就是将私有变量方法封装，高内聚低耦合）\n  * 继承（子类继承父类），即一个类继承另一个类的属性和方法\n  * 多态（根据函数的参数等不一样的状态，构成不一样的方法）\n```\n'use strict'\nlet log = console.log.bind(console)\n\nlog('----------------------封装，主要是封装私有变量-----------------------')\n\nlet Book = function (id, name, price) {\n  /**\n   * 私有变量\n   * @type {number}\n   * @private\n   */\n  let _num = 1\n  let _this = this\n  this.id = id\n  this.name = name\n  this.price = price\n\n  /**\n   * 私有方法\n   */\n  function checkId () {\n    log(_this.id, _num, _this.price)\n  }\n\n  checkId()\n\n  // 公共方法\n  this.id = id\n}\n\n// 类静态共有属性\nBook.face = 'paper'\n// 静态方法\nBook.fuck = function () {\n  log('fuck')\n}\n\n// 通过闭包实现封装\nlet Book2 = (function () {\n  // 通过闭包，将属性包起来\n  /**\n   * 静态变量\n   * @type {number}\n   * @private\n   */\n  let _num = 2\n\n  return function (id, name) {\n    this.name = name\n    this.fuck = function () {\n      log(this.name, _num)\n    }\n  }\n\n})()\nlet b = new Book2(1, 'test')\nb.fuck()\n\nlog('-----------------------继承--------------------------')\nlog('-------类式继承, 引用类型容易和父级绑定到一起，导致问题--------')\n~function () {\n  let SuperClass = function () {\n    this.superValue = true\n    this.books = [1, 2, 3, 4]\n  }\n  SuperClass.prototype.getSuperValue = function () {\n    return this.superValue\n  }\n\n  function SubClass () {\n    this.subValue = false\n  }\n\n  SubClass.prototype = new SuperClass()\n\n  SubClass.prototype.getSubValue = function () {\n    return this.subValue\n  }\n\n  SubClass.prototype.setBook = function () {\n    this.books.push('setBook')\n  }\n\n  let s = new SubClass()\n  let o = new SubClass()\n  log('subValue = ' + o.getSubValue(), 'superValue = ' + o.getSuperValue())\n  o.setBook()\n  s.books.push('jejejej')\n  log(o.books, s.books)\n}()\n\nlog('------构造继承-----')\n\n~function () {\n  function SuperClass (id) {\n    this.books = [1, 2, 3]\n    this.id = id\n  }\n\n  SuperClass.prototype.showBooks = function () {\n    log(this.books)\n  }\n\n  function SubClass (id) {\n    // 关键\n    SuperClass.call(this, id)\n  }\n\n  SubClass.prototype = new SuperClass()\n\n  let o1 = new SubClass(1)\n  let o2 = new SubClass(2)\n\n  o1.books.push('34')\n  o2.books.push('43')\n\n  o1.showBooks()\n  o2.showBooks()\n\n}()\n\nlog('------原型继承-----')\n~function () {\n  function inheritObject (o) {\n    function F () {\n    }\n\n    F.prototype = o\n    return new F()\n  }\n\n  function inheritPrototype (subClass, superClass) {\n    let p = inheritObject(superClass.prototype)\n    p.constructor = subClass\n    subClass.prototype = p\n  }\n\n  function SuperClass (name) {\n    this.name = name\n    this.colors = [1, 2, 2, 3]\n  }\n\n  SuperClass.prototype.getName = function () {\n    return this.name\n  }\n\n  function SubClass (name, time) {\n    // 会开辟内存，构造函数式继承\n    SuperClass.call(this, name)\n    this.time = time\n  }\n\n  inheritPrototype(SubClass, SuperClass)\n\n  SubClass.prototype.getTime = function () {\n    return this.time\n  }\n\n  let o1 = new SubClass('23', 3434)\n  let o2 = new SubClass('234', 34)\n\n  o1.colors.push('dsfdsf')\n  log(o1.colors, o2.colors)\n\n  o1.getName = function () {\n    log('324234324')\n  }\n  o1.getName()\n  log(o2.getName())\n\n}()\n```","source":"_posts/2017/08/js设计模式笔记-面向对象.md","raw":"---\ntitle: js设计模式笔记--面向对象\ndate: 2017-08-18 15:29:39\ntags:\n  - 设计模式\n  - js基础\n---\n\n##面向对象\n1. 面向对象就是将需要的功能封装为一个对象，这个对象称之为类，台湾翻译为面向物体编程，个人认为比较确切\n2. 面向对象的特征\n  * 封装（就是将私有变量方法封装，高内聚低耦合）\n  * 继承（子类继承父类），即一个类继承另一个类的属性和方法\n  * 多态（根据函数的参数等不一样的状态，构成不一样的方法）\n```\n'use strict'\nlet log = console.log.bind(console)\n\nlog('----------------------封装，主要是封装私有变量-----------------------')\n\nlet Book = function (id, name, price) {\n  /**\n   * 私有变量\n   * @type {number}\n   * @private\n   */\n  let _num = 1\n  let _this = this\n  this.id = id\n  this.name = name\n  this.price = price\n\n  /**\n   * 私有方法\n   */\n  function checkId () {\n    log(_this.id, _num, _this.price)\n  }\n\n  checkId()\n\n  // 公共方法\n  this.id = id\n}\n\n// 类静态共有属性\nBook.face = 'paper'\n// 静态方法\nBook.fuck = function () {\n  log('fuck')\n}\n\n// 通过闭包实现封装\nlet Book2 = (function () {\n  // 通过闭包，将属性包起来\n  /**\n   * 静态变量\n   * @type {number}\n   * @private\n   */\n  let _num = 2\n\n  return function (id, name) {\n    this.name = name\n    this.fuck = function () {\n      log(this.name, _num)\n    }\n  }\n\n})()\nlet b = new Book2(1, 'test')\nb.fuck()\n\nlog('-----------------------继承--------------------------')\nlog('-------类式继承, 引用类型容易和父级绑定到一起，导致问题--------')\n~function () {\n  let SuperClass = function () {\n    this.superValue = true\n    this.books = [1, 2, 3, 4]\n  }\n  SuperClass.prototype.getSuperValue = function () {\n    return this.superValue\n  }\n\n  function SubClass () {\n    this.subValue = false\n  }\n\n  SubClass.prototype = new SuperClass()\n\n  SubClass.prototype.getSubValue = function () {\n    return this.subValue\n  }\n\n  SubClass.prototype.setBook = function () {\n    this.books.push('setBook')\n  }\n\n  let s = new SubClass()\n  let o = new SubClass()\n  log('subValue = ' + o.getSubValue(), 'superValue = ' + o.getSuperValue())\n  o.setBook()\n  s.books.push('jejejej')\n  log(o.books, s.books)\n}()\n\nlog('------构造继承-----')\n\n~function () {\n  function SuperClass (id) {\n    this.books = [1, 2, 3]\n    this.id = id\n  }\n\n  SuperClass.prototype.showBooks = function () {\n    log(this.books)\n  }\n\n  function SubClass (id) {\n    // 关键\n    SuperClass.call(this, id)\n  }\n\n  SubClass.prototype = new SuperClass()\n\n  let o1 = new SubClass(1)\n  let o2 = new SubClass(2)\n\n  o1.books.push('34')\n  o2.books.push('43')\n\n  o1.showBooks()\n  o2.showBooks()\n\n}()\n\nlog('------原型继承-----')\n~function () {\n  function inheritObject (o) {\n    function F () {\n    }\n\n    F.prototype = o\n    return new F()\n  }\n\n  function inheritPrototype (subClass, superClass) {\n    let p = inheritObject(superClass.prototype)\n    p.constructor = subClass\n    subClass.prototype = p\n  }\n\n  function SuperClass (name) {\n    this.name = name\n    this.colors = [1, 2, 2, 3]\n  }\n\n  SuperClass.prototype.getName = function () {\n    return this.name\n  }\n\n  function SubClass (name, time) {\n    // 会开辟内存，构造函数式继承\n    SuperClass.call(this, name)\n    this.time = time\n  }\n\n  inheritPrototype(SubClass, SuperClass)\n\n  SubClass.prototype.getTime = function () {\n    return this.time\n  }\n\n  let o1 = new SubClass('23', 3434)\n  let o2 = new SubClass('234', 34)\n\n  o1.colors.push('dsfdsf')\n  log(o1.colors, o2.colors)\n\n  o1.getName = function () {\n    log('324234324')\n  }\n  o1.getName()\n  log(o2.getName())\n\n}()\n```","slug":"js设计模式笔记-面向对象","published":1,"updated":"2017-08-22T05:45:30.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqt4001xr4v30vmu73lw","content":"<p>##面向对象</p>\n<ol>\n<li>面向对象就是将需要的功能封装为一个对象，这个对象称之为类，台湾翻译为面向物体编程，个人认为比较确切</li>\n<li>面向对象的特征<ul>\n<li>封装（就是将私有变量方法封装，高内聚低耦合）</li>\n<li>继承（子类继承父类），即一个类继承另一个类的属性和方法</li>\n<li>多态（根据函数的参数等不一样的状态，构成不一样的方法）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"keyword\">let</span> log = <span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>)</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'----------------------封装，主要是封装私有变量-----------------------'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> Book = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id, name, price</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 私有变量</div><div class=\"line\">   * @type &#123;number&#125;</div><div class=\"line\">   * @private</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">let</span> _num = <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.id = id</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name</div><div class=\"line\">  <span class=\"keyword\">this</span>.price = price</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 私有方法</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkId</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    log(_this.id, _num, _this.price)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  checkId()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 公共方法</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.id = id</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 类静态共有属性</span></div><div class=\"line\">Book.face = <span class=\"string\">'paper'</span></div><div class=\"line\"><span class=\"comment\">// 静态方法</span></div><div class=\"line\">Book.fuck = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  log(<span class=\"string\">'fuck'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过闭包实现封装</span></div><div class=\"line\"><span class=\"keyword\">let</span> Book2 = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 通过闭包，将属性包起来</span></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 静态变量</div><div class=\"line\">   * @type &#123;number&#125;</div><div class=\"line\">   * @private</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">let</span> _num = <span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id, name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name</div><div class=\"line\">    <span class=\"keyword\">this</span>.fuck = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      log(<span class=\"keyword\">this</span>.name, _num)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)()</div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> Book2(<span class=\"number\">1</span>, <span class=\"string\">'test'</span>)</div><div class=\"line\">b.fuck()</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'-----------------------继承--------------------------'</span>)</div><div class=\"line\">log(<span class=\"string\">'-------类式继承, 引用类型容易和父级绑定到一起，导致问题--------'</span>)</div><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> SuperClass = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.superValue = <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.books = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">  &#125;</div><div class=\"line\">  SuperClass.prototype.getSuperValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.superValue</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubClass</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.subValue = <span class=\"literal\">false</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype = <span class=\"keyword\">new</span> SuperClass()</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype.getSubValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subValue</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype.setBook = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.books.push(<span class=\"string\">'setBook'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> SubClass()</div><div class=\"line\">  <span class=\"keyword\">let</span> o = <span class=\"keyword\">new</span> SubClass()</div><div class=\"line\">  log(<span class=\"string\">'subValue = '</span> + o.getSubValue(), <span class=\"string\">'superValue = '</span> + o.getSuperValue())</div><div class=\"line\">  o.setBook()</div><div class=\"line\">  s.books.push(<span class=\"string\">'jejejej'</span>)</div><div class=\"line\">  log(o.books, s.books)</div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'------构造继承-----'</span>)</div><div class=\"line\"></div><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperClass</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.books = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\">    <span class=\"keyword\">this</span>.id = id</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SuperClass.prototype.showBooks = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    log(<span class=\"keyword\">this</span>.books)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubClass</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 关键</span></div><div class=\"line\">    SuperClass.call(<span class=\"keyword\">this</span>, id)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype = <span class=\"keyword\">new</span> SuperClass()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> o1 = <span class=\"keyword\">new</span> SubClass(<span class=\"number\">1</span>)</div><div class=\"line\">  <span class=\"keyword\">let</span> o2 = <span class=\"keyword\">new</span> SubClass(<span class=\"number\">2</span>)</div><div class=\"line\"></div><div class=\"line\">  o1.books.push(<span class=\"string\">'34'</span>)</div><div class=\"line\">  o2.books.push(<span class=\"string\">'43'</span>)</div><div class=\"line\"></div><div class=\"line\">  o1.showBooks()</div><div class=\"line\">  o2.showBooks()</div><div class=\"line\"></div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'------原型继承-----'</span>)</div><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritObject</span> (<span class=\"params\">o</span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    F.prototype = o</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F()</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span> (<span class=\"params\">subClass, superClass</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> p = inheritObject(superClass.prototype)</div><div class=\"line\">    p.constructor = subClass</div><div class=\"line\">    subClass.prototype = p</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperClass</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name</div><div class=\"line\">    <span class=\"keyword\">this</span>.colors = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SuperClass.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubClass</span> (<span class=\"params\">name, time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 会开辟内存，构造函数式继承</span></div><div class=\"line\">    SuperClass.call(<span class=\"keyword\">this</span>, name)</div><div class=\"line\">    <span class=\"keyword\">this</span>.time = time</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  inheritPrototype(SubClass, SuperClass)</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype.getTime = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.time</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> o1 = <span class=\"keyword\">new</span> SubClass(<span class=\"string\">'23'</span>, <span class=\"number\">3434</span>)</div><div class=\"line\">  <span class=\"keyword\">let</span> o2 = <span class=\"keyword\">new</span> SubClass(<span class=\"string\">'234'</span>, <span class=\"number\">34</span>)</div><div class=\"line\"></div><div class=\"line\">  o1.colors.push(<span class=\"string\">'dsfdsf'</span>)</div><div class=\"line\">  log(o1.colors, o2.colors)</div><div class=\"line\"></div><div class=\"line\">  o1.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    log(<span class=\"string\">'324234324'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">  o1.getName()</div><div class=\"line\">  log(o2.getName())</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>##面向对象</p>\n<ol>\n<li>面向对象就是将需要的功能封装为一个对象，这个对象称之为类，台湾翻译为面向物体编程，个人认为比较确切</li>\n<li>面向对象的特征<ul>\n<li>封装（就是将私有变量方法封装，高内聚低耦合）</li>\n<li>继承（子类继承父类），即一个类继承另一个类的属性和方法</li>\n<li>多态（根据函数的参数等不一样的状态，构成不一样的方法）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"keyword\">let</span> log = <span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>)</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'----------------------封装，主要是封装私有变量-----------------------'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> Book = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id, name, price</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 私有变量</div><div class=\"line\">   * @type &#123;number&#125;</div><div class=\"line\">   * @private</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">let</span> _num = <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.id = id</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name</div><div class=\"line\">  <span class=\"keyword\">this</span>.price = price</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 私有方法</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkId</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    log(_this.id, _num, _this.price)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  checkId()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 公共方法</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.id = id</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 类静态共有属性</span></div><div class=\"line\">Book.face = <span class=\"string\">'paper'</span></div><div class=\"line\"><span class=\"comment\">// 静态方法</span></div><div class=\"line\">Book.fuck = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  log(<span class=\"string\">'fuck'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过闭包实现封装</span></div><div class=\"line\"><span class=\"keyword\">let</span> Book2 = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 通过闭包，将属性包起来</span></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 静态变量</div><div class=\"line\">   * @type &#123;number&#125;</div><div class=\"line\">   * @private</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">let</span> _num = <span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id, name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name</div><div class=\"line\">    <span class=\"keyword\">this</span>.fuck = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      log(<span class=\"keyword\">this</span>.name, _num)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)()</div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> Book2(<span class=\"number\">1</span>, <span class=\"string\">'test'</span>)</div><div class=\"line\">b.fuck()</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'-----------------------继承--------------------------'</span>)</div><div class=\"line\">log(<span class=\"string\">'-------类式继承, 引用类型容易和父级绑定到一起，导致问题--------'</span>)</div><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> SuperClass = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.superValue = <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.books = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">  &#125;</div><div class=\"line\">  SuperClass.prototype.getSuperValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.superValue</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubClass</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.subValue = <span class=\"literal\">false</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype = <span class=\"keyword\">new</span> SuperClass()</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype.getSubValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subValue</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype.setBook = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.books.push(<span class=\"string\">'setBook'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> SubClass()</div><div class=\"line\">  <span class=\"keyword\">let</span> o = <span class=\"keyword\">new</span> SubClass()</div><div class=\"line\">  log(<span class=\"string\">'subValue = '</span> + o.getSubValue(), <span class=\"string\">'superValue = '</span> + o.getSuperValue())</div><div class=\"line\">  o.setBook()</div><div class=\"line\">  s.books.push(<span class=\"string\">'jejejej'</span>)</div><div class=\"line\">  log(o.books, s.books)</div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'------构造继承-----'</span>)</div><div class=\"line\"></div><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperClass</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.books = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\">    <span class=\"keyword\">this</span>.id = id</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SuperClass.prototype.showBooks = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    log(<span class=\"keyword\">this</span>.books)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubClass</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 关键</span></div><div class=\"line\">    SuperClass.call(<span class=\"keyword\">this</span>, id)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype = <span class=\"keyword\">new</span> SuperClass()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> o1 = <span class=\"keyword\">new</span> SubClass(<span class=\"number\">1</span>)</div><div class=\"line\">  <span class=\"keyword\">let</span> o2 = <span class=\"keyword\">new</span> SubClass(<span class=\"number\">2</span>)</div><div class=\"line\"></div><div class=\"line\">  o1.books.push(<span class=\"string\">'34'</span>)</div><div class=\"line\">  o2.books.push(<span class=\"string\">'43'</span>)</div><div class=\"line\"></div><div class=\"line\">  o1.showBooks()</div><div class=\"line\">  o2.showBooks()</div><div class=\"line\"></div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'------原型继承-----'</span>)</div><div class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritObject</span> (<span class=\"params\">o</span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    F.prototype = o</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F()</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span> (<span class=\"params\">subClass, superClass</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> p = inheritObject(superClass.prototype)</div><div class=\"line\">    p.constructor = subClass</div><div class=\"line\">    subClass.prototype = p</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperClass</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name</div><div class=\"line\">    <span class=\"keyword\">this</span>.colors = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SuperClass.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubClass</span> (<span class=\"params\">name, time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 会开辟内存，构造函数式继承</span></div><div class=\"line\">    SuperClass.call(<span class=\"keyword\">this</span>, name)</div><div class=\"line\">    <span class=\"keyword\">this</span>.time = time</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  inheritPrototype(SubClass, SuperClass)</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype.getTime = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.time</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> o1 = <span class=\"keyword\">new</span> SubClass(<span class=\"string\">'23'</span>, <span class=\"number\">3434</span>)</div><div class=\"line\">  <span class=\"keyword\">let</span> o2 = <span class=\"keyword\">new</span> SubClass(<span class=\"string\">'234'</span>, <span class=\"number\">34</span>)</div><div class=\"line\"></div><div class=\"line\">  o1.colors.push(<span class=\"string\">'dsfdsf'</span>)</div><div class=\"line\">  log(o1.colors, o2.colors)</div><div class=\"line\"></div><div class=\"line\">  o1.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    log(<span class=\"string\">'324234324'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">  o1.getName()</div><div class=\"line\">  log(o2.getName())</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n"},{"title":"说说HTTP缓存","date":"2017-08-18T01:38:17.000Z","_content":"\n## 浏览器缓存\n### 什么是浏览器缓存 \n用户访问页面的时候，对于某些资源，会将其保存在客户端。在下一次访问的时候，会将缓存从客户端拿出来，减少HTTP请求，提高用户体验。\n\n### 浏览器缓存是什么样子的？\n\n访问github.com，看下资源文件的报文\n<!-- more -->\n\n![github图片](github.png)  \n可以看到报文里面有cache-control，Expires,Last-Modified这样的字段，这种文件就是从浏览器缓存中拿出来的，可以看出速度特别快  \n![github请求图片](githubRequest.png)\n\n### 是什么控制着浏览器对文件的缓存与否？\n#### Cache-Control:\n1. **max-age** 设置缓存时间，单位为秒，这个时间是指缓存的时长，即在这个时间内的这个资源都会使用这个版本，服务器文件变化了浏览器也不会改变。\n2. **public** 如果没有指定，则缺省值是public，指定是浏览器或者任何web的代理中间trunk都可以进行文件的缓存，比如CDN也能缓存\n3. **private** 只有用户浏览器可以缓存，这样CDN中继就缓存不到了\n4. **no-cache** 表明必须要和服务器进行确认资源是否更改，如果更改了，就会返回最新的，在浏览器NetWork界面激活Disable cache，或者使用ctrl+f5强制刷新，浏览器都会给请求加上**Cache-Control:no-cache;Pragma:no-cache**\n5. **no-store** 绝对性的禁止掉缓存，比no-cache强势一百倍，直接从服务器拉取资源\n6. 其他的都不太常用，就不赘述了\n\n#### Expires\n**Expires**是有效期的意思，顾名思义就是设置资源的有效时间，（``Expires:Sat, 26 Aug 2017 10:24:11 GMT``即只保存到2017-08-26 10:24:11,过时过期），和**max-age**有点类似，但是没有**Cache-Control**的优先级高，同时出现**Cache-Control:max-age**会覆盖掉**Expires**。Expires需要和last-modified结合使用\n\n#### Last-modified\n&nbsp;&nbsp;&nbsp;&nbsp;服务器资源的最后修改时间，需要cache-control共用。浏览器第一请求时，会返回``Last-Modified:Wed, 21 Jun 2017 10:03:54 GMT``，指服务端最后一次修改文件的时间。浏览器读取后存到这个信息，在下次请求时会给请求头加上``If-Modified-Since:Wed, 21 Jun 2017 10:03:54 GMT``，用这个值去和服务端对比，没有修改就返回304，如果修改过就返回最新资源。\n\n#### ETag\n&nbsp;&nbsp;&nbsp;&nbsp;由服务端根据内容生成的一段hash，浏览器会拿这段hash和服务端进行验证资源是否修改（``ETag:\"7c9570c4fd0d21:0\"``）。请求时，浏览器会加上这段ETag，不过请求的字段叫做``If-None-Match:W/\"7c9570c4fd0d21:0\"``这就是ETag  \n使用ETag可以解决Last-modified存在的一些问题：\n   1. 某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新 \n   2. 如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒 \n   3. 一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。\n\n### 同样是200 from disk cache 和 from memory cache 区别\n![disk](disk.png)  \n可以看到**from memory cache**是不需要时间的0ms，而memory需要时间。  \n哈哈很简单，就是一个存在disk（磁盘中），一个存在memory(内存)中，存在磁盘需要读取时间。  \n图片之类资源较大，存于磁盘，js.css文件较小也比较重要，存于内存，参考链接[memoryCache和diskCache流程详解](http://blog.csdn.net/m632587166/article/details/50732205?locationNum=14)\n\n### 都特么几乎是后台控制的缓存，那前端呢？\n1. html页面配置no-cache,html ``<meta>``标签中有个叫做http-equiv的属性，就是设置http头信息，关键字等等\n    1. ``<meta http-equiv=\"cache-control\" content=\"no-cache\">``设置no-cache\n    2. ``<meta http-equiv=\"expires\" content=\"0\">`` 设置Expires为0\n    3. ...\n2. 对于js或者css文我们一般会选择进行缓存，如果要更新的话，只需要将引入的js文件写上版本号\n```html\n<script src=\"xxx?v=0.2\"></script>\n```\n最好的方式是给文件加上hash或md5值，对于改变了的文件更改hash，这样就能更新网站了。webpack,gulp等工具都能实现。thx\n\n## 博客中比较流行的缓存流程图\n![liucheng.png](liucheng.png)  \n\n**cache-control**  \n![cache-control.png](cache-control.png)\n","source":"_posts/2017/08/说说HTTP缓存.md","raw":"---\ntitle: 说说HTTP缓存\ndate: 2017-08-18 09:38:17\ntags:\n  - http\n  - 缓存\n---\n\n## 浏览器缓存\n### 什么是浏览器缓存 \n用户访问页面的时候，对于某些资源，会将其保存在客户端。在下一次访问的时候，会将缓存从客户端拿出来，减少HTTP请求，提高用户体验。\n\n### 浏览器缓存是什么样子的？\n\n访问github.com，看下资源文件的报文\n<!-- more -->\n\n![github图片](github.png)  \n可以看到报文里面有cache-control，Expires,Last-Modified这样的字段，这种文件就是从浏览器缓存中拿出来的，可以看出速度特别快  \n![github请求图片](githubRequest.png)\n\n### 是什么控制着浏览器对文件的缓存与否？\n#### Cache-Control:\n1. **max-age** 设置缓存时间，单位为秒，这个时间是指缓存的时长，即在这个时间内的这个资源都会使用这个版本，服务器文件变化了浏览器也不会改变。\n2. **public** 如果没有指定，则缺省值是public，指定是浏览器或者任何web的代理中间trunk都可以进行文件的缓存，比如CDN也能缓存\n3. **private** 只有用户浏览器可以缓存，这样CDN中继就缓存不到了\n4. **no-cache** 表明必须要和服务器进行确认资源是否更改，如果更改了，就会返回最新的，在浏览器NetWork界面激活Disable cache，或者使用ctrl+f5强制刷新，浏览器都会给请求加上**Cache-Control:no-cache;Pragma:no-cache**\n5. **no-store** 绝对性的禁止掉缓存，比no-cache强势一百倍，直接从服务器拉取资源\n6. 其他的都不太常用，就不赘述了\n\n#### Expires\n**Expires**是有效期的意思，顾名思义就是设置资源的有效时间，（``Expires:Sat, 26 Aug 2017 10:24:11 GMT``即只保存到2017-08-26 10:24:11,过时过期），和**max-age**有点类似，但是没有**Cache-Control**的优先级高，同时出现**Cache-Control:max-age**会覆盖掉**Expires**。Expires需要和last-modified结合使用\n\n#### Last-modified\n&nbsp;&nbsp;&nbsp;&nbsp;服务器资源的最后修改时间，需要cache-control共用。浏览器第一请求时，会返回``Last-Modified:Wed, 21 Jun 2017 10:03:54 GMT``，指服务端最后一次修改文件的时间。浏览器读取后存到这个信息，在下次请求时会给请求头加上``If-Modified-Since:Wed, 21 Jun 2017 10:03:54 GMT``，用这个值去和服务端对比，没有修改就返回304，如果修改过就返回最新资源。\n\n#### ETag\n&nbsp;&nbsp;&nbsp;&nbsp;由服务端根据内容生成的一段hash，浏览器会拿这段hash和服务端进行验证资源是否修改（``ETag:\"7c9570c4fd0d21:0\"``）。请求时，浏览器会加上这段ETag，不过请求的字段叫做``If-None-Match:W/\"7c9570c4fd0d21:0\"``这就是ETag  \n使用ETag可以解决Last-modified存在的一些问题：\n   1. 某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新 \n   2. 如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒 \n   3. 一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。\n\n### 同样是200 from disk cache 和 from memory cache 区别\n![disk](disk.png)  \n可以看到**from memory cache**是不需要时间的0ms，而memory需要时间。  \n哈哈很简单，就是一个存在disk（磁盘中），一个存在memory(内存)中，存在磁盘需要读取时间。  \n图片之类资源较大，存于磁盘，js.css文件较小也比较重要，存于内存，参考链接[memoryCache和diskCache流程详解](http://blog.csdn.net/m632587166/article/details/50732205?locationNum=14)\n\n### 都特么几乎是后台控制的缓存，那前端呢？\n1. html页面配置no-cache,html ``<meta>``标签中有个叫做http-equiv的属性，就是设置http头信息，关键字等等\n    1. ``<meta http-equiv=\"cache-control\" content=\"no-cache\">``设置no-cache\n    2. ``<meta http-equiv=\"expires\" content=\"0\">`` 设置Expires为0\n    3. ...\n2. 对于js或者css文我们一般会选择进行缓存，如果要更新的话，只需要将引入的js文件写上版本号\n```html\n<script src=\"xxx?v=0.2\"></script>\n```\n最好的方式是给文件加上hash或md5值，对于改变了的文件更改hash，这样就能更新网站了。webpack,gulp等工具都能实现。thx\n\n## 博客中比较流行的缓存流程图\n![liucheng.png](liucheng.png)  \n\n**cache-control**  \n![cache-control.png](cache-control.png)\n","slug":"说说HTTP缓存","published":1,"updated":"2017-08-18T05:38:46.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqt5001zr4v3ywo0yjf6","content":"<h2 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h2><h3 id=\"什么是浏览器缓存\"><a href=\"#什么是浏览器缓存\" class=\"headerlink\" title=\"什么是浏览器缓存\"></a>什么是浏览器缓存</h3><p>用户访问页面的时候，对于某些资源，会将其保存在客户端。在下一次访问的时候，会将缓存从客户端拿出来，减少HTTP请求，提高用户体验。</p>\n<h3 id=\"浏览器缓存是什么样子的？\"><a href=\"#浏览器缓存是什么样子的？\" class=\"headerlink\" title=\"浏览器缓存是什么样子的？\"></a>浏览器缓存是什么样子的？</h3><p>访问github.com，看下资源文件的报文<br><a id=\"more\"></a></p>\n<p><img src=\"/2017/08/18/说说HTTP缓存/github.png\" alt=\"github图片\"><br>可以看到报文里面有cache-control，Expires,Last-Modified这样的字段，这种文件就是从浏览器缓存中拿出来的，可以看出速度特别快<br><img src=\"/2017/08/18/说说HTTP缓存/githubRequest.png\" alt=\"github请求图片\"></p>\n<h3 id=\"是什么控制着浏览器对文件的缓存与否？\"><a href=\"#是什么控制着浏览器对文件的缓存与否？\" class=\"headerlink\" title=\"是什么控制着浏览器对文件的缓存与否？\"></a>是什么控制着浏览器对文件的缓存与否？</h3><h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control:\"></a>Cache-Control:</h4><ol>\n<li><strong>max-age</strong> 设置缓存时间，单位为秒，这个时间是指缓存的时长，即在这个时间内的这个资源都会使用这个版本，服务器文件变化了浏览器也不会改变。</li>\n<li><strong>public</strong> 如果没有指定，则缺省值是public，指定是浏览器或者任何web的代理中间trunk都可以进行文件的缓存，比如CDN也能缓存</li>\n<li><strong>private</strong> 只有用户浏览器可以缓存，这样CDN中继就缓存不到了</li>\n<li><strong>no-cache</strong> 表明必须要和服务器进行确认资源是否更改，如果更改了，就会返回最新的，在浏览器NetWork界面激活Disable cache，或者使用ctrl+f5强制刷新，浏览器都会给请求加上<strong>Cache-Control:no-cache;Pragma:no-cache</strong></li>\n<li><strong>no-store</strong> 绝对性的禁止掉缓存，比no-cache强势一百倍，直接从服务器拉取资源</li>\n<li>其他的都不太常用，就不赘述了</li>\n</ol>\n<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4><p><strong>Expires</strong>是有效期的意思，顾名思义就是设置资源的有效时间，（<code>Expires:Sat, 26 Aug 2017 10:24:11 GMT</code>即只保存到2017-08-26 10:24:11,过时过期），和<strong>max-age</strong>有点类似，但是没有<strong>Cache-Control</strong>的优先级高，同时出现<strong>Cache-Control:max-age</strong>会覆盖掉<strong>Expires</strong>。Expires需要和last-modified结合使用</p>\n<h4 id=\"Last-modified\"><a href=\"#Last-modified\" class=\"headerlink\" title=\"Last-modified\"></a>Last-modified</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;服务器资源的最后修改时间，需要cache-control共用。浏览器第一请求时，会返回<code>Last-Modified:Wed, 21 Jun 2017 10:03:54 GMT</code>，指服务端最后一次修改文件的时间。浏览器读取后存到这个信息，在下次请求时会给请求头加上<code>If-Modified-Since:Wed, 21 Jun 2017 10:03:54 GMT</code>，用这个值去和服务端对比，没有修改就返回304，如果修改过就返回最新资源。</p>\n<h4 id=\"ETag\"><a href=\"#ETag\" class=\"headerlink\" title=\"ETag\"></a>ETag</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;由服务端根据内容生成的一段hash，浏览器会拿这段hash和服务端进行验证资源是否修改（<code>ETag:&quot;7c9570c4fd0d21:0&quot;</code>）。请求时，浏览器会加上这段ETag，不过请求的字段叫做<code>If-None-Match:W/&quot;7c9570c4fd0d21:0&quot;</code>这就是ETag<br>使用ETag可以解决Last-modified存在的一些问题：</p>\n<ol>\n<li>某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新 </li>\n<li>如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒 </li>\n<li>一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。</li>\n</ol>\n<h3 id=\"同样是200-from-disk-cache-和-from-memory-cache-区别\"><a href=\"#同样是200-from-disk-cache-和-from-memory-cache-区别\" class=\"headerlink\" title=\"同样是200 from disk cache 和 from memory cache 区别\"></a>同样是200 from disk cache 和 from memory cache 区别</h3><p><img src=\"/2017/08/18/说说HTTP缓存/disk.png\" alt=\"disk\"><br>可以看到<strong>from memory cache</strong>是不需要时间的0ms，而memory需要时间。<br>哈哈很简单，就是一个存在disk（磁盘中），一个存在memory(内存)中，存在磁盘需要读取时间。<br>图片之类资源较大，存于磁盘，js.css文件较小也比较重要，存于内存，参考链接<a href=\"http://blog.csdn.net/m632587166/article/details/50732205?locationNum=14\" target=\"_blank\" rel=\"external\">memoryCache和diskCache流程详解</a></p>\n<h3 id=\"都特么几乎是后台控制的缓存，那前端呢？\"><a href=\"#都特么几乎是后台控制的缓存，那前端呢？\" class=\"headerlink\" title=\"都特么几乎是后台控制的缓存，那前端呢？\"></a>都特么几乎是后台控制的缓存，那前端呢？</h3><ol>\n<li>html页面配置no-cache,html <code>&lt;meta&gt;</code>标签中有个叫做http-equiv的属性，就是设置http头信息，关键字等等<ol>\n<li><code>&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;</code>设置no-cache</li>\n<li><code>&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;</code> 设置Expires为0</li>\n<li>…</li>\n</ol>\n</li>\n<li>对于js或者css文我们一般会选择进行缓存，如果要更新的话，只需要将引入的js文件写上版本号<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx?v=0.2\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>最好的方式是给文件加上hash或md5值，对于改变了的文件更改hash，这样就能更新网站了。webpack,gulp等工具都能实现。thx</p>\n<h2 id=\"博客中比较流行的缓存流程图\"><a href=\"#博客中比较流行的缓存流程图\" class=\"headerlink\" title=\"博客中比较流行的缓存流程图\"></a>博客中比较流行的缓存流程图</h2><p><img src=\"/2017/08/18/说说HTTP缓存/liucheng.png\" alt=\"liucheng.png\">  </p>\n<p><strong>cache-control</strong><br><img src=\"/2017/08/18/说说HTTP缓存/cache-control.png\" alt=\"cache-control.png\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h2><h3 id=\"什么是浏览器缓存\"><a href=\"#什么是浏览器缓存\" class=\"headerlink\" title=\"什么是浏览器缓存\"></a>什么是浏览器缓存</h3><p>用户访问页面的时候，对于某些资源，会将其保存在客户端。在下一次访问的时候，会将缓存从客户端拿出来，减少HTTP请求，提高用户体验。</p>\n<h3 id=\"浏览器缓存是什么样子的？\"><a href=\"#浏览器缓存是什么样子的？\" class=\"headerlink\" title=\"浏览器缓存是什么样子的？\"></a>浏览器缓存是什么样子的？</h3><p>访问github.com，看下资源文件的报文<br></p>","more":"<p></p>\n<p><img src=\"/2017/08/18/说说HTTP缓存/github.png\" alt=\"github图片\"><br>可以看到报文里面有cache-control，Expires,Last-Modified这样的字段，这种文件就是从浏览器缓存中拿出来的，可以看出速度特别快<br><img src=\"/2017/08/18/说说HTTP缓存/githubRequest.png\" alt=\"github请求图片\"></p>\n<h3 id=\"是什么控制着浏览器对文件的缓存与否？\"><a href=\"#是什么控制着浏览器对文件的缓存与否？\" class=\"headerlink\" title=\"是什么控制着浏览器对文件的缓存与否？\"></a>是什么控制着浏览器对文件的缓存与否？</h3><h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control:\"></a>Cache-Control:</h4><ol>\n<li><strong>max-age</strong> 设置缓存时间，单位为秒，这个时间是指缓存的时长，即在这个时间内的这个资源都会使用这个版本，服务器文件变化了浏览器也不会改变。</li>\n<li><strong>public</strong> 如果没有指定，则缺省值是public，指定是浏览器或者任何web的代理中间trunk都可以进行文件的缓存，比如CDN也能缓存</li>\n<li><strong>private</strong> 只有用户浏览器可以缓存，这样CDN中继就缓存不到了</li>\n<li><strong>no-cache</strong> 表明必须要和服务器进行确认资源是否更改，如果更改了，就会返回最新的，在浏览器NetWork界面激活Disable cache，或者使用ctrl+f5强制刷新，浏览器都会给请求加上<strong>Cache-Control:no-cache;Pragma:no-cache</strong></li>\n<li><strong>no-store</strong> 绝对性的禁止掉缓存，比no-cache强势一百倍，直接从服务器拉取资源</li>\n<li>其他的都不太常用，就不赘述了</li>\n</ol>\n<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4><p><strong>Expires</strong>是有效期的意思，顾名思义就是设置资源的有效时间，（<code>Expires:Sat, 26 Aug 2017 10:24:11 GMT</code>即只保存到2017-08-26 10:24:11,过时过期），和<strong>max-age</strong>有点类似，但是没有<strong>Cache-Control</strong>的优先级高，同时出现<strong>Cache-Control:max-age</strong>会覆盖掉<strong>Expires</strong>。Expires需要和last-modified结合使用</p>\n<h4 id=\"Last-modified\"><a href=\"#Last-modified\" class=\"headerlink\" title=\"Last-modified\"></a>Last-modified</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;服务器资源的最后修改时间，需要cache-control共用。浏览器第一请求时，会返回<code>Last-Modified:Wed, 21 Jun 2017 10:03:54 GMT</code>，指服务端最后一次修改文件的时间。浏览器读取后存到这个信息，在下次请求时会给请求头加上<code>If-Modified-Since:Wed, 21 Jun 2017 10:03:54 GMT</code>，用这个值去和服务端对比，没有修改就返回304，如果修改过就返回最新资源。</p>\n<h4 id=\"ETag\"><a href=\"#ETag\" class=\"headerlink\" title=\"ETag\"></a>ETag</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;由服务端根据内容生成的一段hash，浏览器会拿这段hash和服务端进行验证资源是否修改（<code>ETag:&quot;7c9570c4fd0d21:0&quot;</code>）。请求时，浏览器会加上这段ETag，不过请求的字段叫做<code>If-None-Match:W/&quot;7c9570c4fd0d21:0&quot;</code>这就是ETag<br>使用ETag可以解决Last-modified存在的一些问题：</p>\n<ol>\n<li>某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新 </li>\n<li>如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒 </li>\n<li>一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。</li>\n</ol>\n<h3 id=\"同样是200-from-disk-cache-和-from-memory-cache-区别\"><a href=\"#同样是200-from-disk-cache-和-from-memory-cache-区别\" class=\"headerlink\" title=\"同样是200 from disk cache 和 from memory cache 区别\"></a>同样是200 from disk cache 和 from memory cache 区别</h3><p><img src=\"/2017/08/18/说说HTTP缓存/disk.png\" alt=\"disk\"><br>可以看到<strong>from memory cache</strong>是不需要时间的0ms，而memory需要时间。<br>哈哈很简单，就是一个存在disk（磁盘中），一个存在memory(内存)中，存在磁盘需要读取时间。<br>图片之类资源较大，存于磁盘，js.css文件较小也比较重要，存于内存，参考链接<a href=\"http://blog.csdn.net/m632587166/article/details/50732205?locationNum=14\">memoryCache和diskCache流程详解</a></p>\n<h3 id=\"都特么几乎是后台控制的缓存，那前端呢？\"><a href=\"#都特么几乎是后台控制的缓存，那前端呢？\" class=\"headerlink\" title=\"都特么几乎是后台控制的缓存，那前端呢？\"></a>都特么几乎是后台控制的缓存，那前端呢？</h3><ol>\n<li>html页面配置no-cache,html <code>&lt;meta&gt;</code>标签中有个叫做http-equiv的属性，就是设置http头信息，关键字等等<ol>\n<li><code>&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;</code>设置no-cache</li>\n<li><code>&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;</code> 设置Expires为0</li>\n<li>…</li>\n</ol>\n</li>\n<li>对于js或者css文我们一般会选择进行缓存，如果要更新的话，只需要将引入的js文件写上版本号<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx?v=0.2\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>最好的方式是给文件加上hash或md5值，对于改变了的文件更改hash，这样就能更新网站了。webpack,gulp等工具都能实现。thx</p>\n<h2 id=\"博客中比较流行的缓存流程图\"><a href=\"#博客中比较流行的缓存流程图\" class=\"headerlink\" title=\"博客中比较流行的缓存流程图\"></a>博客中比较流行的缓存流程图</h2><p><img src=\"/2017/08/18/说说HTTP缓存/liucheng.png\" alt=\"liucheng.png\">  </p>\n<p><strong>cache-control</strong><br><img src=\"/2017/08/18/说说HTTP缓存/cache-control.png\" alt=\"cache-control.png\"></p>"},{"title":"读书整理","date":"2017-08-17T08:10:00.000Z","_content":"## 导言\n总觉得自己看书看的很乱，总结下看过的书和想看的书，避免看重复，最好做下笔记。看完一本及时更新下，读书笔记都会写在[这里](https://github.com/slipkinem/jsTest)。  \n看书总有一种看过了就忘记了，看过了还是不会的感觉，所有看书一定要做好笔记，哪怕记不住，没看懂。将不懂得名词通过搜索引擎查找，哪怕一个词背后有庞大的知识群体，也要硬着头皮看，会有意想不到的收货。读书有一个明显的好处就是可以提高理解能力，读书的时候用心去思考，结合书中的例子将代码一点点敲下来，这是我以后读书要做的事情，之前没做好读书笔记真是太后悔了。keep it real.\n\n\n## 正在看的书籍\n1. javascript权威指南\n2. 《《HTML5 Canvas游戏开发实战》》\n3. webkit技术内幕\n\n## 看过得书籍\n1. angular权威指南\n2. angular2 training\n3. 深入浅出node.js\n4. node.js in action\n5. 架构探险 从零开始写javaweb框架\n6. javascript编码规范\n7. 你不知道的JavaScript第一卷\n8. 一个月悟透javaScript\n9. 图解HTTP协议\n10. jsp&servlet学习笔记\n\n## 想要看的书籍\n1. WEBGL权威指南\n2. C++primary\n\n\n\n","source":"_posts/2017/08/读书整理.md","raw":"---\ntitle: 读书整理\ndate: 2017-08-17 16:10:00\ntags:\n  - 课外学习\n  - javascript\n  - 书籍\n---\n## 导言\n总觉得自己看书看的很乱，总结下看过的书和想看的书，避免看重复，最好做下笔记。看完一本及时更新下，读书笔记都会写在[这里](https://github.com/slipkinem/jsTest)。  \n看书总有一种看过了就忘记了，看过了还是不会的感觉，所有看书一定要做好笔记，哪怕记不住，没看懂。将不懂得名词通过搜索引擎查找，哪怕一个词背后有庞大的知识群体，也要硬着头皮看，会有意想不到的收货。读书有一个明显的好处就是可以提高理解能力，读书的时候用心去思考，结合书中的例子将代码一点点敲下来，这是我以后读书要做的事情，之前没做好读书笔记真是太后悔了。keep it real.\n\n\n## 正在看的书籍\n1. javascript权威指南\n2. 《《HTML5 Canvas游戏开发实战》》\n3. webkit技术内幕\n\n## 看过得书籍\n1. angular权威指南\n2. angular2 training\n3. 深入浅出node.js\n4. node.js in action\n5. 架构探险 从零开始写javaweb框架\n6. javascript编码规范\n7. 你不知道的JavaScript第一卷\n8. 一个月悟透javaScript\n9. 图解HTTP协议\n10. jsp&servlet学习笔记\n\n## 想要看的书籍\n1. WEBGL权威指南\n2. C++primary\n\n\n\n","slug":"读书整理","published":1,"updated":"2017-08-17T08:31:03.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6nfwqt70021r4v35g69x9a3","content":"<h2 id=\"导言\"><a href=\"#导言\" class=\"headerlink\" title=\"导言\"></a>导言</h2><p>总觉得自己看书看的很乱，总结下看过的书和想看的书，避免看重复，最好做下笔记。看完一本及时更新下，读书笔记都会写在<a href=\"https://github.com/slipkinem/jsTest\" target=\"_blank\" rel=\"external\">这里</a>。<br>看书总有一种看过了就忘记了，看过了还是不会的感觉，所有看书一定要做好笔记，哪怕记不住，没看懂。将不懂得名词通过搜索引擎查找，哪怕一个词背后有庞大的知识群体，也要硬着头皮看，会有意想不到的收货。读书有一个明显的好处就是可以提高理解能力，读书的时候用心去思考，结合书中的例子将代码一点点敲下来，这是我以后读书要做的事情，之前没做好读书笔记真是太后悔了。keep it real.</p>\n<h2 id=\"正在看的书籍\"><a href=\"#正在看的书籍\" class=\"headerlink\" title=\"正在看的书籍\"></a>正在看的书籍</h2><ol>\n<li>javascript权威指南</li>\n<li>《《HTML5 Canvas游戏开发实战》》</li>\n<li>webkit技术内幕</li>\n</ol>\n<h2 id=\"看过得书籍\"><a href=\"#看过得书籍\" class=\"headerlink\" title=\"看过得书籍\"></a>看过得书籍</h2><ol>\n<li>angular权威指南</li>\n<li>angular2 training</li>\n<li>深入浅出node.js</li>\n<li>node.js in action</li>\n<li>架构探险 从零开始写javaweb框架</li>\n<li>javascript编码规范</li>\n<li>你不知道的JavaScript第一卷</li>\n<li>一个月悟透javaScript</li>\n<li>图解HTTP协议</li>\n<li>jsp&amp;servlet学习笔记</li>\n</ol>\n<h2 id=\"想要看的书籍\"><a href=\"#想要看的书籍\" class=\"headerlink\" title=\"想要看的书籍\"></a>想要看的书籍</h2><ol>\n<li>WEBGL权威指南</li>\n<li>C++primary</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"导言\"><a href=\"#导言\" class=\"headerlink\" title=\"导言\"></a>导言</h2><p>总觉得自己看书看的很乱，总结下看过的书和想看的书，避免看重复，最好做下笔记。看完一本及时更新下，读书笔记都会写在<a href=\"https://github.com/slipkinem/jsTest\">这里</a>。<br>看书总有一种看过了就忘记了，看过了还是不会的感觉，所有看书一定要做好笔记，哪怕记不住，没看懂。将不懂得名词通过搜索引擎查找，哪怕一个词背后有庞大的知识群体，也要硬着头皮看，会有意想不到的收货。读书有一个明显的好处就是可以提高理解能力，读书的时候用心去思考，结合书中的例子将代码一点点敲下来，这是我以后读书要做的事情，之前没做好读书笔记真是太后悔了。keep it real.</p>\n<h2 id=\"正在看的书籍\"><a href=\"#正在看的书籍\" class=\"headerlink\" title=\"正在看的书籍\"></a>正在看的书籍</h2><ol>\n<li>javascript权威指南</li>\n<li>《《HTML5 Canvas游戏开发实战》》</li>\n<li>webkit技术内幕</li>\n</ol>\n<h2 id=\"看过得书籍\"><a href=\"#看过得书籍\" class=\"headerlink\" title=\"看过得书籍\"></a>看过得书籍</h2><ol>\n<li>angular权威指南</li>\n<li>angular2 training</li>\n<li>深入浅出node.js</li>\n<li>node.js in action</li>\n<li>架构探险 从零开始写javaweb框架</li>\n<li>javascript编码规范</li>\n<li>你不知道的JavaScript第一卷</li>\n<li>一个月悟透javaScript</li>\n<li>图解HTTP协议</li>\n<li>jsp&amp;servlet学习笔记</li>\n</ol>\n<h2 id=\"想要看的书籍\"><a href=\"#想要看的书籍\" class=\"headerlink\" title=\"想要看的书籍\"></a>想要看的书籍</h2><ol>\n<li>WEBGL权威指南</li>\n<li>C++primary</li>\n</ol>\n"}],"PostAsset":[{"_id":"source/_posts/2017/04/vue-cli创建的任务和后台交互cookie及restAPI处理/chrome下cookie.png","post":"cj6nfwqr5000hr4v3fl9ar8l2","slug":"chrome下cookie.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/08/说说HTTP缓存/cache-control.png","post":"cj6nfwqt5001zr4v3ywo0yjf6","slug":"cache-control.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/08/说说HTTP缓存/disk.png","post":"cj6nfwqt5001zr4v3ywo0yjf6","slug":"disk.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/08/说说HTTP缓存/github.png","post":"cj6nfwqt5001zr4v3ywo0yjf6","slug":"github.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/08/说说HTTP缓存/githubRequest.png","post":"cj6nfwqt5001zr4v3ywo0yjf6","slug":"githubRequest.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/08/说说HTTP缓存/liucheng.png","post":"cj6nfwqt5001zr4v3ywo0yjf6","slug":"liucheng.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/1.png","post":"cj6nfwqqr000br4v3173qxjy4","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/2.png","post":"cj6nfwqqr000br4v3173qxjy4","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/3.png","post":"cj6nfwqqr000br4v3173qxjy4","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/4.png","post":"cj6nfwqqr000br4v3173qxjy4","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/5.png","post":"cj6nfwqqr000br4v3173qxjy4","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/vue_admin.sql","post":"cj6nfwqqr000br4v3173qxjy4","slug":"vue_admin.sql","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/android_home.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"android_home.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/androids.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"androids.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/avd.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"avd.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/bigSuccess.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"bigSuccess.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/configerr.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"configerr.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/dev.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"dev.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/devSuccess.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"devSuccess.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/directory.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"directory.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/err.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"err.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/gen.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"gen.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/host.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"host.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/init.gradle","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"init.gradle","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/netErr.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"netErr.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/reload.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"reload.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/sdk.png","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"sdk.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/snap3555.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"snap3555.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/snap3556.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"snap3556.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/success.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"success.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/tools.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"tools.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/verr.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"verr.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/wox.jpg","post":"cj6nfwqqq000ar4v3w15ecd6u","slug":"wox.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cj6nfwqqh0005r4v3lvbdlb8a","category_id":"cj6nfwqql0007r4v3j8e73db4","_id":"cj6nfwqr4000gr4v3j14pufz3"},{"post_id":"cj6nfwqqr000br4v3173qxjy4","category_id":"cj6nfwqql0007r4v3j8e73db4","_id":"cj6nfwqr9000lr4v3cfkc1zn4"},{"post_id":"cj6nfwqr1000er4v3qlobpt3c","category_id":"cj6nfwqql0007r4v3j8e73db4","_id":"cj6nfwqrc000nr4v34aqlckw9"},{"post_id":"cj6nfwqqj0006r4v31jm31mql","category_id":"cj6nfwqqu000cr4v35qwviw95","_id":"cj6nfwqrf000rr4v3bdigukin"},{"post_id":"cj6nfwqr5000hr4v3fl9ar8l2","category_id":"cj6nfwqql0007r4v3j8e73db4","_id":"cj6nfwqri000ur4v37r2y6q9x"},{"post_id":"cj6nfwqqn0008r4v31qvjjatz","category_id":"cj6nfwqr8000jr4v3sy019iyz","_id":"cj6nfwqrl000yr4v3kmnx89c0"},{"post_id":"cj6nfwqqq000ar4v3w15ecd6u","category_id":"cj6nfwqre000pr4v3zbxbyn0f","_id":"cj6nfwqro0011r4v3rrlm2jtk"}],"PostTag":[{"post_id":"cj6nfwqq20002r4v34884z954","tag_id":"cj6nfwqqa0004r4v3ky2cz562","_id":"cj6nfwqr3000fr4v3n19x1v10"},{"post_id":"cj6nfwqq20002r4v34884z954","tag_id":"cj6nfwqqo0009r4v3997lyyfh","_id":"cj6nfwqr8000ir4v3sypj5s09"},{"post_id":"cj6nfwqq80003r4v3gclze1s0","tag_id":"cj6nfwqqo0009r4v3997lyyfh","_id":"cj6nfwqri000tr4v3hhferf94"},{"post_id":"cj6nfwqq80003r4v3gclze1s0","tag_id":"cj6nfwqr9000kr4v3umb9ixlc","_id":"cj6nfwqrk000wr4v3m59a5oy0"},{"post_id":"cj6nfwqqh0005r4v3lvbdlb8a","tag_id":"cj6nfwqqa0004r4v3ky2cz562","_id":"cj6nfwqs30014r4v3v4wsfbkv"},{"post_id":"cj6nfwqqh0005r4v3lvbdlb8a","tag_id":"cj6nfwqqo0009r4v3997lyyfh","_id":"cj6nfwqs50016r4v3hduhtzn0"},{"post_id":"cj6nfwqqj0006r4v31jm31mql","tag_id":"cj6nfwqqo0009r4v3997lyyfh","_id":"cj6nfwqsh001fr4v37p4plurx"},{"post_id":"cj6nfwqqj0006r4v31jm31mql","tag_id":"cj6nfwqs50017r4v3g91uiklr","_id":"cj6nfwqsl001hr4v30pyyokcd"},{"post_id":"cj6nfwqqj0006r4v31jm31mql","tag_id":"cj6nfwqsc001ar4v3j9tem6f0","_id":"cj6nfwqso001kr4v3k9845ywe"},{"post_id":"cj6nfwqqn0008r4v31qvjjatz","tag_id":"cj6nfwqsg001er4v3vpt0qlha","_id":"cj6nfwqsq001mr4v3nh00u44t"},{"post_id":"cj6nfwqqq000ar4v3w15ecd6u","tag_id":"cj6nfwqqo0009r4v3997lyyfh","_id":"cj6nfwqsw001qr4v31pv2arnu"},{"post_id":"cj6nfwqqq000ar4v3w15ecd6u","tag_id":"cj6nfwqso001jr4v3b1oadip6","_id":"cj6nfwqsx001sr4v37pztbp1l"},{"post_id":"cj6nfwqqr000br4v3173qxjy4","tag_id":"cj6nfwqsg001er4v3vpt0qlha","_id":"cj6nfwqt5001yr4v35ntr7980"},{"post_id":"cj6nfwqqr000br4v3173qxjy4","tag_id":"cj6nfwqsx001tr4v3pkvnw4ay","_id":"cj6nfwqt60020r4v39da845t7"},{"post_id":"cj6nfwqqr000br4v3173qxjy4","tag_id":"cj6nfwqqo0009r4v3997lyyfh","_id":"cj6nfwqt80023r4v3fkz7el0f"},{"post_id":"cj6nfwqr1000er4v3qlobpt3c","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqt80024r4v3ktm3sjtf"},{"post_id":"cj6nfwqr1000er4v3qlobpt3c","tag_id":"cj6nfwqqo0009r4v3997lyyfh","_id":"cj6nfwqt90026r4v3eqbmfhh6"},{"post_id":"cj6nfwqr5000hr4v3fl9ar8l2","tag_id":"cj6nfwqt70022r4v3cag9udsh","_id":"cj6nfwqta0029r4v3ug7vvyr1"},{"post_id":"cj6nfwqr5000hr4v3fl9ar8l2","tag_id":"cj6nfwqt90025r4v3jy27to7k","_id":"cj6nfwqtb002ar4v30vgu5r5v"},{"post_id":"cj6nfwqr5000hr4v3fl9ar8l2","tag_id":"cj6nfwqta0027r4v3tsd8fop9","_id":"cj6nfwqtb002cr4v36hubahvo"},{"post_id":"cj6nfwqr5000hr4v3fl9ar8l2","tag_id":"cj6nfwqqo0009r4v3997lyyfh","_id":"cj6nfwqtb002dr4v3ytc66ltm"},{"post_id":"cj6nfwqra000mr4v3dmajyw2m","tag_id":"cj6nfwqta0028r4v3nndomihm","_id":"cj6nfwqtc002fr4v32xpgdv5l"},{"post_id":"cj6nfwqrd000or4v301gfzxtr","tag_id":"cj6nfwqtb002br4v37bu2a2s3","_id":"cj6nfwqtc002gr4v3fu6lhquy"},{"post_id":"cj6nfwqrd000or4v301gfzxtr","tag_id":"cj6nfwqqo0009r4v3997lyyfh","_id":"cj6nfwqtd002ir4v36t8ycagh"},{"post_id":"cj6nfwqrh000sr4v3ozf40uv1","tag_id":"cj6nfwqqa0004r4v3ky2cz562","_id":"cj6nfwqtd002jr4v3g13y2dyu"},{"post_id":"cj6nfwqrh000sr4v3ozf40uv1","tag_id":"cj6nfwqtc002er4v3cmhdkwy1","_id":"cj6nfwqtd002kr4v3dkx4vu1a"},{"post_id":"cj6nfwqrj000vr4v3vasi4hj2","tag_id":"cj6nfwqqo0009r4v3997lyyfh","_id":"cj6nfwqte002mr4v36fv3iujd"},{"post_id":"cj6nfwqrj000vr4v3vasi4hj2","tag_id":"cj6nfwqtc002hr4v3zmycsrjv","_id":"cj6nfwqte002nr4v3o7z9dbgy"},{"post_id":"cj6nfwqrl000zr4v3rlbi808c","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqtf002qr4v3qnkukw59"},{"post_id":"cj6nfwqrl000zr4v3rlbi808c","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwqth002rr4v39ky1sqer"},{"post_id":"cj6nfwqrn0010r4v390jjyel8","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqtj002ur4v3muypuoll"},{"post_id":"cj6nfwqrn0010r4v390jjyel8","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwqtk002vr4v3ciyz21wq"},{"post_id":"cj6nfwqs20013r4v3enewpops","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqtm002yr4v3xjzjn4ly"},{"post_id":"cj6nfwqs20013r4v3enewpops","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwqtm002zr4v36fimth1p"},{"post_id":"cj6nfwqs40015r4v3d0pvaaf5","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqto0032r4v3wwux2kwl"},{"post_id":"cj6nfwqs40015r4v3d0pvaaf5","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwqto0033r4v315jc0ia6"},{"post_id":"cj6nfwqs60018r4v366mqe667","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqtr0036r4v3uhaj8yu2"},{"post_id":"cj6nfwqs60018r4v366mqe667","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwqtr0037r4v3sx60nwo5"},{"post_id":"cj6nfwqs80019r4v301pib9ig","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqtt003ar4v36dk7dcqx"},{"post_id":"cj6nfwqs80019r4v301pib9ig","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwqtt003br4v3lkeesffm"},{"post_id":"cj6nfwqsd001br4v3jm3zqfvc","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqtw003er4v34t4sxsee"},{"post_id":"cj6nfwqsd001br4v3jm3zqfvc","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwqtw003fr4v3h3wofpno"},{"post_id":"cj6nfwqse001cr4v3r7l19f4i","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqtx003ir4v3cm1xqy8n"},{"post_id":"cj6nfwqse001cr4v3r7l19f4i","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwqtx003jr4v3c5pnh9je"},{"post_id":"cj6nfwqsf001dr4v36s366uip","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqu0003mr4v3n45tcogt"},{"post_id":"cj6nfwqsf001dr4v36s366uip","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwqu2003nr4v34e72qtu1"},{"post_id":"cj6nfwqsh001gr4v33tt8l73x","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqu4003qr4v3mygmjtjx"},{"post_id":"cj6nfwqsh001gr4v33tt8l73x","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwqu4003rr4v3wldfln17"},{"post_id":"cj6nfwqsl001ir4v3axp16hsg","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqu6003ur4v3hecblm9l"},{"post_id":"cj6nfwqsl001ir4v3axp16hsg","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwqu6003vr4v33agk07og"},{"post_id":"cj6nfwqsp001lr4v3sb94g8qh","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqu7003yr4v37y8bqa2i"},{"post_id":"cj6nfwqsp001lr4v3sb94g8qh","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwqu7003zr4v3mk5i4tix"},{"post_id":"cj6nfwqsr001nr4v3ja44zbp2","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqu80042r4v3kubkc81n"},{"post_id":"cj6nfwqsr001nr4v3ja44zbp2","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwqu90043r4v3ruvy8102"},{"post_id":"cj6nfwqst001pr4v3dhyxymfs","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqua0046r4v3cp1pnd3e"},{"post_id":"cj6nfwqst001pr4v3dhyxymfs","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwqua0047r4v3qxd0taz3"},{"post_id":"cj6nfwqsw001rr4v38euifogv","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqud004ar4v3v4bvk8e9"},{"post_id":"cj6nfwqsw001rr4v38euifogv","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwqud004br4v3mm632u2h"},{"post_id":"cj6nfwqsy001ur4v3scj6ey40","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwque004er4v3jl6uorc9"},{"post_id":"cj6nfwqsy001ur4v3scj6ey40","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwque004fr4v3474bh82y"},{"post_id":"cj6nfwqsz001vr4v3tauk9m4p","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwqug004ir4v30qhcc6c7"},{"post_id":"cj6nfwqsz001vr4v3tauk9m4p","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwqug004jr4v3ieffusw0"},{"post_id":"cj6nfwqt4001xr4v30vmu73lw","tag_id":"cj6nfwqt3001wr4v3z3he4cbb","_id":"cj6nfwquh004mr4v3obv1vg98"},{"post_id":"cj6nfwqt4001xr4v30vmu73lw","tag_id":"cj6nfwqte002or4v3u1fugw9r","_id":"cj6nfwquh004nr4v39b2ynrn0"},{"post_id":"cj6nfwqt5001zr4v3ywo0yjf6","tag_id":"cj6nfwqug004lr4v362bc0alm","_id":"cj6nfwquj004qr4v34tlehd23"},{"post_id":"cj6nfwqt5001zr4v3ywo0yjf6","tag_id":"cj6nfwqui004or4v3uojr7vbp","_id":"cj6nfwquj004rr4v3d08xloaf"},{"post_id":"cj6nfwqt70021r4v35g69x9a3","tag_id":"cj6nfwqta0028r4v3nndomihm","_id":"cj6nfwquk004tr4v3qufuvmwp"},{"post_id":"cj6nfwqt70021r4v35g69x9a3","tag_id":"cj6nfwqqo0009r4v3997lyyfh","_id":"cj6nfwquk004ur4v34z6l1crp"},{"post_id":"cj6nfwqt70021r4v35g69x9a3","tag_id":"cj6nfwquj004sr4v3eh8iacj2","_id":"cj6nfwquk004vr4v3iserl40s"}],"Tag":[{"name":"angular","_id":"cj6nfwqqa0004r4v3ky2cz562"},{"name":"javascript","_id":"cj6nfwqqo0009r4v3997lyyfh"},{"name":"dom","_id":"cj6nfwqr9000kr4v3umb9ixlc"},{"name":"es6","_id":"cj6nfwqs50017r4v3g91uiklr"},{"name":"promise","_id":"cj6nfwqsc001ar4v3j9tem6f0"},{"name":"java","_id":"cj6nfwqsg001er4v3vpt0qlha"},{"name":"reactNative","_id":"cj6nfwqso001jr4v3b1oadip6"},{"name":"ssm","_id":"cj6nfwqsx001tr4v3pkvnw4ay"},{"name":"设计模式","_id":"cj6nfwqt3001wr4v3z3he4cbb"},{"name":"vue","_id":"cj6nfwqt70022r4v3cag9udsh"},{"name":"cookie","_id":"cj6nfwqt90025r4v3jy27to7k"},{"name":"node.js","_id":"cj6nfwqta0027r4v3tsd8fop9"},{"name":"课外学习","_id":"cj6nfwqta0028r4v3nndomihm"},{"name":"demo","_id":"cj6nfwqtb002br4v37bu2a2s3"},{"name":"typescript","_id":"cj6nfwqtc002er4v3cmhdkwy1"},{"name":"基础知识","_id":"cj6nfwqtc002hr4v3zmycsrjv"},{"name":"js基础","_id":"cj6nfwqte002or4v3u1fugw9r"},{"name":"http","_id":"cj6nfwqug004lr4v362bc0alm"},{"name":"缓存","_id":"cj6nfwqui004or4v3uojr7vbp"},{"name":"书籍","_id":"cj6nfwquj004sr4v3eh8iacj2"}]}}