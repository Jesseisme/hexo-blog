{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/Yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/Coding.png","path":"img/Coding.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/Quora.png","path":"img/Quora.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/niconico.png","path":"img/niconico.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/博客园.png","path":"img/博客园.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/简书.png","path":"img/简书.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/知乎.png","path":"img/知乎.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"1533fd65f74b1ef555eb1963554acd81646db80c","modified":1492049981290},{"_id":"source/favicon.ico","hash":"d67c4be2feb621b601ca0a00753882b1fa274c37","modified":1492056430770},{"_id":"themes/Yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1492066092696},{"_id":"themes/Yelee/_config.yml","hash":"f553ad7e612ffce3e810d6c5bd3c1c048b325c94","modified":1492075602687},{"_id":"themes/Yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1492066093268},{"_id":"source/tags/index.md","hash":"ef90c2343f9637a103be80cabe86537b7125f7a4","modified":1492071497369},{"_id":"themes/Yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1492066092712},{"_id":"themes/Yelee/languages/default.yml","hash":"3bdad891c90029447b4fbaedbbb11b8a59d06418","modified":1492066092707},{"_id":"themes/Yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1492066092718},{"_id":"themes/Yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1492066092723},{"_id":"themes/Yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1492066092729},{"_id":"themes/Yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1492066093239},{"_id":"themes/Yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1492066093241},{"_id":"themes/Yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1492066093243},{"_id":"themes/Yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1492066093257},{"_id":"themes/Yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1492066093259},{"_id":"themes/Yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1492066093262},{"_id":"themes/Yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1492066093264},{"_id":"themes/Yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1492066093270},{"_id":"themes/Yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1492066092760},{"_id":"themes/Yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1492066092767},{"_id":"themes/Yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1492066092788},{"_id":"themes/Yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1492066092829},{"_id":"themes/Yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1492066092851},{"_id":"themes/Yelee/layout/_partial/footer.ejs","hash":"419eef7ab3114083d7e430176865ac0407469fea","modified":1492069102585},{"_id":"themes/Yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1492066092965},{"_id":"themes/Yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1492066093041},{"_id":"themes/Yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1492066093043},{"_id":"themes/Yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1492066093051},{"_id":"themes/Yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1492066093076},{"_id":"themes/Yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1492066093091},{"_id":"themes/Yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1492066093098},{"_id":"themes/Yelee/layout/_partial/open-in-new-tab.ejs","hash":"a59d4c768009dd621e741a29cf6446ebc2668fe9","modified":1492066093111},{"_id":"themes/Yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1492066093118},{"_id":"themes/Yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1492066093124},{"_id":"themes/Yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1492066093176},{"_id":"themes/Yelee/layout/_partial/tab-title-change.ejs","hash":"7c4a7177e0c77de2d7607ca29fc395abebd34db7","modified":1492066093193},{"_id":"themes/Yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1492066093218},{"_id":"themes/Yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1492066093237},{"_id":"themes/Yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1492066093304},{"_id":"themes/Yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1492066093310},{"_id":"themes/Yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1492066093316},{"_id":"themes/Yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1492066093324},{"_id":"themes/Yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1492066093340},{"_id":"themes/Yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1492066093487},{"_id":"themes/Yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1492066093492},{"_id":"themes/Yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1492066093494},{"_id":"themes/Yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1492066093496},{"_id":"themes/Yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1492066093498},{"_id":"themes/Yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1492066093500},{"_id":"themes/Yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1492066093502},{"_id":"themes/Yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1492066093503},{"_id":"themes/Yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1492066093506},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1492066093507},{"_id":"themes/Yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1492066093509},{"_id":"themes/Yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1492066093512},{"_id":"themes/Yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1492066093514},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1492066093515},{"_id":"themes/Yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1492066093517},{"_id":"themes/Yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1492066093519},{"_id":"themes/Yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1492066093522},{"_id":"themes/Yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1492066093524},{"_id":"themes/Yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1492066093526},{"_id":"themes/Yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1492066093521},{"_id":"themes/Yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1492066093527},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1492066093547},{"_id":"themes/Yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1492066093550},{"_id":"themes/Yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1492066093565},{"_id":"themes/Yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1492066093579},{"_id":"themes/Yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1492066093595},{"_id":"themes/Yelee/source/js/search.js","hash":"001e324844e63f3bfb6f60d173b9c6954127be0b","modified":1492066093611},{"_id":"themes/Yelee/source/js/toc.js","hash":"973c1a4e2c9de8f4f662b99623027658fe6d94c2","modified":1492066093628},{"_id":"themes/Yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1492066093330},{"_id":"themes/Yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1492066093336},{"_id":"themes/Yelee/source/img/avatar.png","hash":"5811c3e9286afa5821274f837c884ad19ec10ec1","modified":1492067210265},{"_id":"source/_posts/2017/04/angular-rootScope-new.md","hash":"409dbce3ea48d01bb7cd532c19d4e5e689dc931d","modified":1492075120918},{"_id":"source/_posts/2017/04/angular权威指南学习.md","hash":"1cecda349b4516aba1383bdeec6bd6d26a3b2db3","modified":1492080492204},{"_id":"source/_posts/2017/04/currentTarget.md","hash":"751a609539cc03994166c20489afb737d4224877","modified":1492075102985},{"_id":"source/_posts/2017/04/es6版promise.md","hash":"ba2a9f597a698c468ed45ba6d69a3d11548e1cf6","modified":1492082372254},{"_id":"source/_posts/2017/04/java-ssm.md","hash":"ad8c96b3e9b386769e50cb2a4d762fa180ca5b8b","modified":1492140238411},{"_id":"source/_posts/2017/04/java用jdbc-servelet时的问题.md","hash":"412187331673df3cc4dfbaca487528ab87893da6","modified":1492076999970},{"_id":"source/_posts/2017/04/vue-cli创建的任务和后台交互cookie及restAPI处理.md","hash":"af4eef06e0e8d74f9e58511ad21b014c8cbb487e","modified":1492075300968},{"_id":"source/_posts/2017/04/所谓publish-subscribe.md","hash":"5eb216663dd65ea0583fe2b4d0ee9e32829c0090","modified":1492075315216},{"_id":"themes/Yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1492066092862},{"_id":"themes/Yelee/layout/_partial/comments/count-comment.ejs","hash":"ada2032e401b73b312c50b75bdbb8ee71d5a291e","modified":1492066092890},{"_id":"themes/Yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1492066092908},{"_id":"themes/Yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1492066092924},{"_id":"themes/Yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1492066092945},{"_id":"themes/Yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1492066093126},{"_id":"themes/Yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1492066093137},{"_id":"themes/Yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1492066093157},{"_id":"themes/Yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1492066093168},{"_id":"themes/Yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1492066093170},{"_id":"themes/Yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1492066093171},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1492066093278},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1492066093285},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1492066093291},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1492066093298},{"_id":"themes/Yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1492066093347},{"_id":"themes/Yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1492066093353},{"_id":"themes/Yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1492066093405},{"_id":"themes/Yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1492066093404},{"_id":"themes/Yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1492066093411},{"_id":"themes/Yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1492066093412},{"_id":"themes/Yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1492066093421},{"_id":"themes/Yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1492066093427},{"_id":"themes/Yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1492066093435},{"_id":"themes/Yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1492066093440},{"_id":"themes/Yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1492066093442},{"_id":"themes/Yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1492066093447},{"_id":"themes/Yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1492066093456},{"_id":"themes/Yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1492066093462},{"_id":"themes/Yelee/source/css/_partial/toc.styl","hash":"8f2a057dc072285093e37f1f645e9cb53608642f","modified":1492066093468},{"_id":"themes/Yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1492066093473},{"_id":"themes/Yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1492066093475},{"_id":"themes/Yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1492066093478},{"_id":"source/_posts/2017/04/java-ssm/2.png","hash":"d4f1a8ab49b39a9d545bc4602fc7df3da82e73a9","modified":1491026261612},{"_id":"source/_posts/2017/04/java-ssm/3.png","hash":"ea2ffedd4e90499d7d04c35dd51bab286a09384f","modified":1491558215160},{"_id":"source/_posts/2017/04/java-ssm/4.png","hash":"c0edf633d13647c58505e34a6d07a580fa16c191","modified":1491558259886},{"_id":"source/_posts/2017/04/java-ssm/5.png","hash":"e7ad6205ac081db9eff107c473ae624bb6455066","modified":1491558277864},{"_id":"source/_posts/2017/04/java-ssm/vue_admin.sql","hash":"6f5c032a12ac4e8cf476245458f3ce5edef78a0e","modified":1491554194128},{"_id":"themes/Yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1492066093359},{"_id":"themes/Yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1492066093369},{"_id":"themes/Yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1492066093374},{"_id":"themes/Yelee/source/css/_partial/customise/heading.styl","hash":"c29799f09ebd87767fd9cc3b1fa795db44a94670","modified":1492066093379},{"_id":"themes/Yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1492066093388},{"_id":"themes/Yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1492066093394},{"_id":"themes/Yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1492066093399},{"_id":"source/_posts/2017/04/java-ssm/1.png","hash":"2a9a86a509ca8408742c8fb96ed413d7a274f2f4","modified":1491026164014},{"_id":"public/content.json","hash":"81d07a60afdcdd47c769da35f8a1c64e3a36c235","modified":1492141106594},{"_id":"public/search.xml","hash":"50af1979cc88a5685300d61f0452708301f99d9e","modified":1492141106967},{"_id":"public/categories/小轮子/index.html","hash":"56486a43c27b1fa7f0fd8cb99912a06d83d0a8f0","modified":1492141107000},{"_id":"public/categories/exception/index.html","hash":"0102c9e04b897bb78fbfb19eadedc4749d3c85df","modified":1492141107012},{"_id":"public/tags/angular/index.html","hash":"f19c9f083af87f2de49ef554ed2d2636f12cc890","modified":1492141107012},{"_id":"public/tags/es6/index.html","hash":"3bdc1f73d001aafdebf1814bde1af6623557dc1a","modified":1492141107012},{"_id":"public/tags/promise/index.html","hash":"dd97e877525edc3bb9d4dd1dbb285b86355edb3d","modified":1492141107012},{"_id":"public/tags/java/index.html","hash":"852023e0f6c84475e24618cf694460320a743371","modified":1492141107013},{"_id":"public/tags/ssm/index.html","hash":"89e0927e9966d94ca8d9f62fe62e9789ab3deec0","modified":1492141107013},{"_id":"public/tags/设计模式/index.html","hash":"a7d9edfcb8b47c27c6872b5d62fe443aa67dae2d","modified":1492141107015},{"_id":"public/tags/vue/index.html","hash":"cbdeb4d02dd180dea6d39e5f229fec5c41f88567","modified":1492141107015},{"_id":"public/tags/cookie/index.html","hash":"110663e90e1970e182bde82a5b7d7324ad996985","modified":1492141107015},{"_id":"public/tags/index.html","hash":"b8af00a361b92a1c1c71b21ce5a27c703019b2d8","modified":1492141107015},{"_id":"public/2017/04/14/java-ssm/index.html","hash":"00041542c2f0563ab6025251fc88d4e772bff619","modified":1492141107015},{"_id":"public/2017/04/14/angular权威指南学习/index.html","hash":"1399fac0053f098369ddf19b1f038f37514b5b5b","modified":1492141107015},{"_id":"public/2017/04/14/所谓publish-subscribe/index.html","hash":"14dbdd2baf3ec367688c012181b89d733b2d730f","modified":1492141107017},{"_id":"public/2017/04/14/angular-rootScope-new/index.html","hash":"be64dfb6aab33b05d9ffe587c165e37e514c1176","modified":1492141107018},{"_id":"public/2017/04/14/currentTarget/index.html","hash":"64b029a368f521ddf678fbc4ef1e9806b2595c94","modified":1492141107019},{"_id":"public/2017/04/14/es6版promise/index.html","hash":"5413672e84d6adca56c76c13bca6b5ee7632cf54","modified":1492141107019},{"_id":"public/2017/04/14/java用jdbc-servelet时的问题/index.html","hash":"fa7b25f13c36280a30e11a5316dbed5daefc1db4","modified":1492141107020},{"_id":"public/2017/04/14/vue-cli创建的任务和后台交互cookie及restAPI处理/index.html","hash":"4df69ef10659f82305903879ad24cd8333af66a9","modified":1492141107020},{"_id":"public/archives/index.html","hash":"6c3f80b9b1989cc503db51768b16437710794477","modified":1492141107020},{"_id":"public/archives/2017/index.html","hash":"992d4c9d03946a772a4b79fedcf3502b982fb7a6","modified":1492141107021},{"_id":"public/archives/2017/04/index.html","hash":"7fd034e4ef90dc71b4a33e2cf5b48be56a189b2e","modified":1492141107021},{"_id":"public/categories/课外学习/index.html","hash":"50e667dfd1e5a1cd453e2b9aedddcae3c111c45d","modified":1492141107021},{"_id":"public/index.html","hash":"b0444580592f40777aef9dc7b17f3d5c8e55f3a8","modified":1492141107021},{"_id":"public/tags/javascript/index.html","hash":"58e93f859c5328e1bd1be5328f618f2688ef2e0d","modified":1492141107021},{"_id":"public/tags/node-js/index.html","hash":"5b30bfd0e16a4faad351b27189020caae05198f4","modified":1492141107039},{"_id":"public/CNAME","hash":"1533fd65f74b1ef555eb1963554acd81646db80c","modified":1492141107039},{"_id":"public/favicon.ico","hash":"d67c4be2feb621b601ca0a00753882b1fa274c37","modified":1492141107040},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1492141107040},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1492141107040},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1492141107040},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1492141107040},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1492141107040},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1492141107041},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1492141107041},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1492141107041},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1492141107041},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1492141107041},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1492141107041},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1492141107041},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1492141107041},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1492141107041},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1492141107041},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1492141107041},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1492141107041},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1492141107041},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1492141107042},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1492141107042},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1492141107042},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1492141107042},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1492141107042},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1492141107042},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1492141107042},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1492141107042},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1492141107042},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1492141107042},{"_id":"public/2017/04/14/java-ssm/2.png","hash":"d4f1a8ab49b39a9d545bc4602fc7df3da82e73a9","modified":1492141107043},{"_id":"public/2017/04/14/java-ssm/4.png","hash":"c0edf633d13647c58505e34a6d07a580fa16c191","modified":1492141107043},{"_id":"public/2017/04/14/java-ssm/3.png","hash":"ea2ffedd4e90499d7d04c35dd51bab286a09384f","modified":1492141107043},{"_id":"public/2017/04/14/java-ssm/5.png","hash":"e7ad6205ac081db9eff107c473ae624bb6455066","modified":1492141107043},{"_id":"public/2017/04/14/java-ssm/vue_admin.sql","hash":"6f5c032a12ac4e8cf476245458f3ce5edef78a0e","modified":1492141107043},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1492141108460},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1492141108463},{"_id":"public/img/avatar.png","hash":"5811c3e9286afa5821274f837c884ad19ec10ec1","modified":1492141108463},{"_id":"public/2017/04/14/java-ssm/1.png","hash":"2a9a86a509ca8408742c8fb96ed413d7a274f2f4","modified":1492141108463},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1492141108476},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1492141108477},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1492141108477},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1492141108477},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1492141108477},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1492141108477},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1492141108477},{"_id":"public/css/style.css","hash":"b785fb931bab93d43fd82e80ecfe5668c5c307fb","modified":1492141108477}],"Category":[{"name":"课外学习","_id":"cj1haabop00054cv34ngnrq80"},{"name":"小轮子","_id":"cj1haabpf000a4cv3banvk5hi"},{"name":"exception","_id":"cj1haabpx000g4cv3ypcgasa7"}],"Data":[],"Page":[{"title":"tags","date":"2017-04-13T08:18:17.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-04-13 16:18:17\n---\n","updated":"2017-04-13T08:18:17.369Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj1haabik00004cv3vz0aj1ck","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"angular-$rootScope.$new()","_content":"## Scope实例上面有这么一个属性：$new()\n### $new(isolate, parent)\n``所有scope都是通过$new创建``\n#### 参数解释\n\n1. 参数一（isolate）设置是否为孤立作用域\n\n- 如果是`true`，则建立孤立作用域，孤立作用域直接和祖级作用域联系 `child = new Scope(); child.$root = this.$root`\n- 如果是`false`，则判断此`$rootScope`有没有子作用域，如果没有则建立一个子作用域构造函数，并且将这个子作用域的原型指向`this（`$rootScope => Scope的实例`）`,然后将`child = new this.$$ChildScope() child.__proto__ = Scope.prototype`\n2. 参数二设置要`new`的作用域的`parent`，如果不设置则将`parent = this`， 也就是将`new`的`child`挂载到`this(此$rootScope)上面，然后给`parent`的子作用域排序，有个判断如果设置了`isolate`并且`parent != this`,**则作用域不监听$destory事件**\n\n3. ## e.g\n`var scope = $rootScope.$new()`\n##### 没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。\n`\n","source":"_posts/2017/04/angular-rootScope-new.md","raw":"---\ntitle: angular-$rootScope.$new()\ntags: \n  - angular\n  - javascript\n---\n## Scope实例上面有这么一个属性：$new()\n### $new(isolate, parent)\n``所有scope都是通过$new创建``\n#### 参数解释\n\n1. 参数一（isolate）设置是否为孤立作用域\n\n- 如果是`true`，则建立孤立作用域，孤立作用域直接和祖级作用域联系 `child = new Scope(); child.$root = this.$root`\n- 如果是`false`，则判断此`$rootScope`有没有子作用域，如果没有则建立一个子作用域构造函数，并且将这个子作用域的原型指向`this（`$rootScope => Scope的实例`）`,然后将`child = new this.$$ChildScope() child.__proto__ = Scope.prototype`\n2. 参数二设置要`new`的作用域的`parent`，如果不设置则将`parent = this`， 也就是将`new`的`child`挂载到`this(此$rootScope)上面，然后给`parent`的子作用域排序，有个判断如果设置了`isolate`并且`parent != this`,**则作用域不监听$destory事件**\n\n3. ## e.g\n`var scope = $rootScope.$new()`\n##### 没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。\n`\n","slug":"angular-rootScope-new","published":1,"date":"2017-04-14T03:32:04.616Z","updated":"2017-04-13T09:18:40.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1haabnm00014cv3dmwit9v6","content":"<h2 id=\"Scope实例上面有这么一个属性：-new\"><a href=\"#Scope实例上面有这么一个属性：-new\" class=\"headerlink\" title=\"Scope实例上面有这么一个属性：$new()\"></a>Scope实例上面有这么一个属性：$new()</h2><h3 id=\"new-isolate-parent\"><a href=\"#new-isolate-parent\" class=\"headerlink\" title=\"$new(isolate, parent)\"></a>$new(isolate, parent)</h3><p><code>所有scope都是通过$new创建</code></p>\n<h4 id=\"参数解释\"><a href=\"#参数解释\" class=\"headerlink\" title=\"参数解释\"></a>参数解释</h4><ol>\n<li>参数一（isolate）设置是否为孤立作用域</li>\n</ol>\n<ul>\n<li>如果是<code>true</code>，则建立孤立作用域，孤立作用域直接和祖级作用域联系 <code>child = new Scope(); child.$root = this.$root</code></li>\n<li>如果是<code>false</code>，则判断此<code>$rootScope</code>有没有子作用域，如果没有则建立一个子作用域构造函数，并且将这个子作用域的原型指向<code>this（</code>$rootScope =&gt; Scope的实例<code>）</code>,然后将<code>child = new this.$$ChildScope() child.__proto__ = Scope.prototype</code></li>\n</ul>\n<ol>\n<li><p>参数二设置要<code>new</code>的作用域的<code>parent</code>，如果不设置则将<code>parent = this</code>， 也就是将<code>new</code>的<code>child</code>挂载到<code>this(此$rootScope)上面，然后给</code>parent<code>的子作用域排序，有个判断如果设置了</code>isolate<code>并且</code>parent != this`,<strong>则作用域不监听$destory事件</strong></p>\n</li>\n<li><h2 id=\"e-g\"><a href=\"#e-g\" class=\"headerlink\" title=\"e.g\"></a>e.g</h2><p><code>var scope = $rootScope.$new()</code></p>\n<h5 id=\"没有指定参数，则1-将scope的父级指向-rootScope-2-将scope创建为-rootScope的子作用域，并在原型上继承-rootScope的所有属性方法，返回。\"><a href=\"#没有指定参数，则1-将scope的父级指向-rootScope-2-将scope创建为-rootScope的子作用域，并在原型上继承-rootScope的所有属性方法，返回。\" class=\"headerlink\" title=\"没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。\"></a>没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。</h5><p>`</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Scope实例上面有这么一个属性：-new\"><a href=\"#Scope实例上面有这么一个属性：-new\" class=\"headerlink\" title=\"Scope实例上面有这么一个属性：$new()\"></a>Scope实例上面有这么一个属性：$new()</h2><h3 id=\"new-isolate-parent\"><a href=\"#new-isolate-parent\" class=\"headerlink\" title=\"$new(isolate, parent)\"></a>$new(isolate, parent)</h3><p><code>所有scope都是通过$new创建</code></p>\n<h4 id=\"参数解释\"><a href=\"#参数解释\" class=\"headerlink\" title=\"参数解释\"></a>参数解释</h4><ol>\n<li>参数一（isolate）设置是否为孤立作用域</li>\n</ol>\n<ul>\n<li>如果是<code>true</code>，则建立孤立作用域，孤立作用域直接和祖级作用域联系 <code>child = new Scope(); child.$root = this.$root</code></li>\n<li>如果是<code>false</code>，则判断此<code>$rootScope</code>有没有子作用域，如果没有则建立一个子作用域构造函数，并且将这个子作用域的原型指向<code>this（</code>$rootScope =&gt; Scope的实例<code>）</code>,然后将<code>child = new this.$$ChildScope() child.__proto__ = Scope.prototype</code></li>\n</ul>\n<ol>\n<li><p>参数二设置要<code>new</code>的作用域的<code>parent</code>，如果不设置则将<code>parent = this</code>， 也就是将<code>new</code>的<code>child</code>挂载到<code>this(此$rootScope)上面，然后给</code>parent<code>的子作用域排序，有个判断如果设置了</code>isolate<code>并且</code>parent != this`,<strong>则作用域不监听$destory事件</strong></p>\n</li>\n<li><h2 id=\"e-g\"><a href=\"#e-g\" class=\"headerlink\" title=\"e.g\"></a>e.g</h2><p><code>var scope = $rootScope.$new()</code></p>\n<h5 id=\"没有指定参数，则1-将scope的父级指向-rootScope-2-将scope创建为-rootScope的子作用域，并在原型上继承-rootScope的所有属性方法，返回。\"><a href=\"#没有指定参数，则1-将scope的父级指向-rootScope-2-将scope创建为-rootScope的子作用域，并在原型上继承-rootScope的所有属性方法，返回。\" class=\"headerlink\" title=\"没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。\"></a>没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。</h5><p>`</p>\n</li>\n</ol>\n"},{"title":"angular权威指南笔记","_content":"#### angular权威指南笔记\n\n1. $interpolate——服务插值表达式，可以设置插值表达式中的数据并``$interpolateProvider`` 可以自定义 **flag {{x}} => $x$**\n\n2. orderBy——排序：给显示的文本排序\n\n3. ``$parsers``  \n   当用户同控制器进行交互，并且``ngModelController``  \n   中的``$setViewValue()``方法被调用时，\n   ``$parsers``数组中的函数会以流水线的形式被逐个调用。  \n   第一个``$parse``被调用后，执行结果会传\n   递给第二个``$parse``，以此类推\n   \n   ```\n   angular.module('myApp')\n     .directive('oneToTen', function() {\n       return {\n         require: '?ngModel',\n         link: function(scope, ele, attrs, ngModel) {\n             if (!ngModel) return;\n             ngModel.$parsers.unshift(\n             function(viewValue) {\n               var i = parseInt(viewValue);\n               if (i >= 0 && i < 10) {\n               ngModel.$setValidity('oneToTen', true);\n               return viewValue;\n             } else {\n               ngModel.$setValidity('oneToTen', false);\n               return undefined;\n           }\n         });\n       }\n       };\n     });\n   ```\n   <!-- more -->\n4. **$formatters**\n  当绑定的``ngModel``值发生了变化，并经过``$parsers``  \n  数组中解析器的处理后，这个值会被传递\n  给``$formatters``流水线。同``$parsers``  \n  数组可以修改表单的合法性状态类似， ``$formatters``中的函\n  数也可以修改并格式化这些值\n  ```\n  angular.module('myApp')\n      .directive('oneToTen', function() {\n        return {\n            require: '?ngModel',\n            link: function(scope, ele, attrs, ngModel) {\n            if (!ngModel) return;\n              ngModel.$formatters.unshift(function(v) {\n                return $filter('number')(v);\n              });\n          }\n        };\n      });\n  ```\n\n5. 表单验证：``ngModelController.$我是自定义``   \n    取出 ``form_name.input_name.$我是自定义``\n    angular可以通过``form_name.input_name.XX``   \n    拿到在``directive``里面给``ngModelController``自定义的布尔值\n    从而可以通过判断来进行show/hide的表单验证\n  \n6. 用属性声明指令比较好\n\n7. 指令 \n  **@** 绑定一次性显示的字符串 \n  **=** 双向绑定会获取作用域上面的值\n  **&** 绑定事件\n  **yourAttr: '@myAttr'** 在``html``用``myAttr``，在指令中还是用``yourAttr``\n\n8. ``ng-include``\n  会创建一个作用域，根据作用域原型继承原理，子作用域能访问父级的值，而反过来就不行了\n  所以不能在父级作用域操作``ng-include``中的数据，导致无法正常进行``$watch``\n  应该给```ng-include```创建单独的controller来控制作用域\n  类似的指令还有 ```ng-controller ng-app```\n\n9. 如要避免插值字符串{&#123; &#125;}为渲染完成闪烁问题，请使用``ng-cloak``指令\n\n10. ng-attr-(suffix) \n  如使用svg的时候报错，就是用前缀来避免\n```\n<svg>\n  <circle cx=\"{{ cx }}\"></circle>\n  </svg> // 报错\n<svg>\n  <circle ng-attr-cx=\"{{ cx }}\"><circle>\n</svg>  // OK\n```\n11. 指令的生命周期开始于``$compile``结束于``link方法``\n\n12. 指令API\n  ```\n  .directive('', ['', function(){\n  \n          \t// Runs during compile\n          \treturn {\n  \n          \t  name: '',  `指令名称`\n  \n          \t  priority: 1, `加载优先级`\n  \n          \t  terminal: true, `是否让优先级以下的指令不运行`\n  \n          \t  scope: &#123; &#125;, // &#123; &#125; = isolate, true = child, false/undefined = no change\n          \t  `作用域，如果是true则不让外部继承，外部读不到\n          \t    如果是对象则是隔离作用域（作用域不传递）\n          \t    具有隔离作用域的指令最主要的使用场景是创建可复用的组件，组件可以在未知上下文中使\n                用，并且可以避免污染所处的外部作用域或不经意地污染内部作用域`\n  \n          \t  controller: function($scope, $element, $attrs, $transclude) &#123; &#125;,\n  \n          \t  `指令的控制`\n          \t  require: 'ngModel', // Array = multiple requires,   \n          \t                     // ? = optional（指找不到控制器传递null）,   \n          \t                    // ^ = check parent elements\n                               // PS:可以在link方法的第四个参数指向该指令的controller\n  \n          \t  restrict: 'A', // E = Element,   \n          \t                // A = Attribute,   \n          \t               // C = Class,  \n          \t              // M = Comment\n          \t             // 声明方式\n          \t             \n          \t  template: '', // 字符串\n          \t  \n          \t  templateUrl: '', // 指令html的地址\n          \t  \n          \t  replace: true, // 用html标签完全替代此指令\n          \t  \n          \t  transclude: true, \n          \t       // 如果为true则无法正常监听数据变化，被用来，\n          \t      //  只有当你希望创建一个可以包含任意内容的指令时， \n          \t     //  才使用transclude: true。\n          \t    //  配合ng-transclude插进去\n          \t  \n          \t  compile: function(tElement, tAttrs,   \n                          function transclude(  \n                        \n                          function(scope, cloneLinkingFn){   \n                        \n                            return function linking(scope, elm, attrs)&#123; &#125;})),\n          \t\t\n          \t\tlink: function($scope, iElm, iAttrs, controller) {\n          \t\t\t\n          \t\t}\n          \t};\n          }])\n  ```\n13. Angular生命周期\n    1. 编译阶段： 遍历整个HTML，查找处理指令，遍历指令里面所有的模板，此时还没有数据绑定，\n      ng-repeat和ng-include类似的就会在在此时进行操作，减少开销\n    2. compile：在数据放入指令之前安全操作DOM\n    3. pre-link：将作用域与DOM连接起来之前操作dom，不安全的转换DOM\n    4. post-link: 负责事件监听器，监听数据和实时的DOM操作，如果需要性能，用compile\n    5. destroy\n  \n14. ngModel \n  * 要访问``ngModelController``必须在指令里面require\n   * 不要有隔离作用域，隔离作用域会导致无法更新外部绑定的值\n     * $viewValue 获取ngModel的值\n     * $setViewValue 设置ngModel的值，需要手动触发``$digest``循环\n     * $render自定义渲染，会在``$parser``流水线执行完后调用，慎用\n     * $parsers：数组，处理加工ngModel数据，ngModel从DOM读出来的值会被当参数传入，到数据模型\n     * $formatters 数组，在数据模型变的时候函数一一调用\n     * $viewChangeListeners 无需``$watch``函数不需要返回值，视图中的值变化时一一调用\n     * $error 没有通过验证的信息\n     * $pristine 是否对控件没有交互过\n     * $dirty 用户是否交互过\n     * $valid 是否正确 $setValidity设置\n     * $invalid 是否错误\n\n15. constant会在所有配置config之前执行。config: 模块加载时会执行此函数\n\n16. run 类main函数，在注入器创建之后被执行，是第一个被执行的方法，一般篇日志路由事件监听器\n    每次路由改变时执行run方法\n    \n17. 路由\n  ng-view 最高权限指令同一元素只会运行ng-view\n  ng-view运行顺序\n    触发$routeChangeSuccess后试图会更新\n    模板会通过路由与ng-view关联\n      1. 创建一个新作用域\n      2. 移除上一个视图，同时清除作用域\n      3. 关联当前模板\n      4. 如果路由中定义的controller则与当前作用域关联起来\n      5. 触发$viewContentLoaded\n      6. 调用onload指定的函数（如果有）\n      \n  **router的resolve属性，$injector会将声明的key添加进依赖，并能注入**\n  \n  **$location相当于window.location的封装，但只针对视图，不能针对全局浏览器窗口**\n  \n18. 依赖注入\n  * 对象通常过的其控制权的方式\n    * 在内部创建依赖；\n    * 通过全局变量进行引用；\n    * 在需要的地方通过参数进行传递\n  \n  angular依赖注入使用$injector来管里依赖关系和实例化\n  包括模块，指令，控制器的注入\n  在运行时， 任何模块启动时$injector都会负责实例化，并将其需要的所有依赖传递进去\n   ```\n   angular.module('myApp', [])\n        .factory('greeter', function() {\n          return {\n            greet: function(msg) {alert(msg);}\n          }\n        })\n        .controller('MyController',\n          function($scope, greeter) {\n            $scope.sayHello = function() {\n            greeter.greet(\"Hello!\");\n          };\n        });\n        \n        <div ng-app=\"myApp\">\n          <div ng-controller=\"MyController\">\n            <button ng-click=\"sayHello()\">Hello</button>\n          </div>\n        </div\n   ```\n##### angular加载过程\n```\n  // 使用注入器加载应用\n  var injector = angular.injector(['ng', 'myApp']);\n  // 通过注入器加载$controller服务： var $controller = injector.get('$controller');\n  var scope = injector.get('$rootScope').$new();\n  // 加载控制器并传入一个作用域，同AngularJS在运行时做的一样\n  var MyController = $controller('MyController', {$scope: scope})\n```\n  * angular通过**annotate**函数将greeter从参数列表中提取出来\n    如果没有加[]进行显式的声明，那么ng就会通过参数来获取依赖关系\n  ```\n    injector.annotate(function($q, myService){ })\n    // annotate会返回被注入目标中的服务的名称，从而进行匹配\n  ```\n  * injector.invoke(func($q)) 调用方法, fn.apply(self, args)\n    将参数列表转化成实例后的函数在进行调用\n    大概如此：\n  ```\n    function Fucker() {\n      this.getFucker = function () {\n        console.log('motherfucker')\n      }\n    }\n    \n    function invoke(fn, self) {\n      // 一般是['dep1', 'dep2', func]\n      // 会找寻依赖对应的参数函数并通过方法将其实例化\n      // 调用func\n      fn.apply(self, [new Fucker()])\n    }\n    \n    invoke(function (fucker) {\n      fucker.getFucker() // motherfucker\n    })\n  ```\n19. 分析ng-include为什么会导致无法正常双向绑定\n  * ng-include指令会生成一个作用域 (child)\n  * ng-include父节点的作用域（parent）\n  * parent.flag = \"test\" 根据原型继承原理 child._proto_.flag = \"test\"\n  * 当parent.flag变成\"dev\" 则child._proto_.flag = \"dev\"\n  * 如果child.flag = \"product\" 则 child.flag 与 parent.flag 失去联系\n  * 解决这种问题需要，将要传递的属性变为对象形式\n```\n  function Parent() {\n    this.face = \"哈哈\"\n  }\n  \n  Parent.prototype = {\n    constructor: Parent,\n  \n    $new: function () {\n      var child\n  \n      this.$$childScope = function () {\n        this.$id = 112212\n      }\n      this.$$childScope.prototype = this\n      child = new this.$$childScope()\n  \n      return child\n    }\n  \n  }\n  var parentScope = new Parent()\n  \n  var childScope = parentScope.$new()\n  \nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n) // [\"哈哈\", \"哈哈\"] [\"哈哈\", \"哈哈\"]\n  \n  \nparentScope.face = \"test\"\nparentScope.fixed.face = \"test\"\nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n) // [\"test\", \"test\"] [\"test\", \"test\"]\n  \n  \nchildScope.face = \"我是谁\"\nchildScope.fixed.face = \"我是谁\"\nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n)// [\"test\", \"我是谁\"] [\"我是谁\", \"我是谁\"]\n  \n```\n20. $scope生命周期\n  * 创建\n    * 创建控制器或指令时，angular会用``$injector``创建一个作用域，并在新建的控制器指令中将作用域传递进去\n        * ``$scope``会通过``$new``创建通过原型与父级保持联系\n  * 链接\n    * 用$watch将数据监听\n  * 更新\n    * 当$watch监听到变化，触发回调\n  * 销毁\n    * 视图不需要会销毁自己\n  ","source":"_posts/2017/04/angular权威指南学习.md","raw":"---\ntitle: angular权威指南笔记\ncategories: 课外学习\ntags:\n  - angular\n  - javascript\n---\n#### angular权威指南笔记\n\n1. $interpolate——服务插值表达式，可以设置插值表达式中的数据并``$interpolateProvider`` 可以自定义 **flag {{x}} => $x$**\n\n2. orderBy——排序：给显示的文本排序\n\n3. ``$parsers``  \n   当用户同控制器进行交互，并且``ngModelController``  \n   中的``$setViewValue()``方法被调用时，\n   ``$parsers``数组中的函数会以流水线的形式被逐个调用。  \n   第一个``$parse``被调用后，执行结果会传\n   递给第二个``$parse``，以此类推\n   \n   ```\n   angular.module('myApp')\n     .directive('oneToTen', function() {\n       return {\n         require: '?ngModel',\n         link: function(scope, ele, attrs, ngModel) {\n             if (!ngModel) return;\n             ngModel.$parsers.unshift(\n             function(viewValue) {\n               var i = parseInt(viewValue);\n               if (i >= 0 && i < 10) {\n               ngModel.$setValidity('oneToTen', true);\n               return viewValue;\n             } else {\n               ngModel.$setValidity('oneToTen', false);\n               return undefined;\n           }\n         });\n       }\n       };\n     });\n   ```\n   <!-- more -->\n4. **$formatters**\n  当绑定的``ngModel``值发生了变化，并经过``$parsers``  \n  数组中解析器的处理后，这个值会被传递\n  给``$formatters``流水线。同``$parsers``  \n  数组可以修改表单的合法性状态类似， ``$formatters``中的函\n  数也可以修改并格式化这些值\n  ```\n  angular.module('myApp')\n      .directive('oneToTen', function() {\n        return {\n            require: '?ngModel',\n            link: function(scope, ele, attrs, ngModel) {\n            if (!ngModel) return;\n              ngModel.$formatters.unshift(function(v) {\n                return $filter('number')(v);\n              });\n          }\n        };\n      });\n  ```\n\n5. 表单验证：``ngModelController.$我是自定义``   \n    取出 ``form_name.input_name.$我是自定义``\n    angular可以通过``form_name.input_name.XX``   \n    拿到在``directive``里面给``ngModelController``自定义的布尔值\n    从而可以通过判断来进行show/hide的表单验证\n  \n6. 用属性声明指令比较好\n\n7. 指令 \n  **@** 绑定一次性显示的字符串 \n  **=** 双向绑定会获取作用域上面的值\n  **&** 绑定事件\n  **yourAttr: '@myAttr'** 在``html``用``myAttr``，在指令中还是用``yourAttr``\n\n8. ``ng-include``\n  会创建一个作用域，根据作用域原型继承原理，子作用域能访问父级的值，而反过来就不行了\n  所以不能在父级作用域操作``ng-include``中的数据，导致无法正常进行``$watch``\n  应该给```ng-include```创建单独的controller来控制作用域\n  类似的指令还有 ```ng-controller ng-app```\n\n9. 如要避免插值字符串{&#123; &#125;}为渲染完成闪烁问题，请使用``ng-cloak``指令\n\n10. ng-attr-(suffix) \n  如使用svg的时候报错，就是用前缀来避免\n```\n<svg>\n  <circle cx=\"{{ cx }}\"></circle>\n  </svg> // 报错\n<svg>\n  <circle ng-attr-cx=\"{{ cx }}\"><circle>\n</svg>  // OK\n```\n11. 指令的生命周期开始于``$compile``结束于``link方法``\n\n12. 指令API\n  ```\n  .directive('', ['', function(){\n  \n          \t// Runs during compile\n          \treturn {\n  \n          \t  name: '',  `指令名称`\n  \n          \t  priority: 1, `加载优先级`\n  \n          \t  terminal: true, `是否让优先级以下的指令不运行`\n  \n          \t  scope: &#123; &#125;, // &#123; &#125; = isolate, true = child, false/undefined = no change\n          \t  `作用域，如果是true则不让外部继承，外部读不到\n          \t    如果是对象则是隔离作用域（作用域不传递）\n          \t    具有隔离作用域的指令最主要的使用场景是创建可复用的组件，组件可以在未知上下文中使\n                用，并且可以避免污染所处的外部作用域或不经意地污染内部作用域`\n  \n          \t  controller: function($scope, $element, $attrs, $transclude) &#123; &#125;,\n  \n          \t  `指令的控制`\n          \t  require: 'ngModel', // Array = multiple requires,   \n          \t                     // ? = optional（指找不到控制器传递null）,   \n          \t                    // ^ = check parent elements\n                               // PS:可以在link方法的第四个参数指向该指令的controller\n  \n          \t  restrict: 'A', // E = Element,   \n          \t                // A = Attribute,   \n          \t               // C = Class,  \n          \t              // M = Comment\n          \t             // 声明方式\n          \t             \n          \t  template: '', // 字符串\n          \t  \n          \t  templateUrl: '', // 指令html的地址\n          \t  \n          \t  replace: true, // 用html标签完全替代此指令\n          \t  \n          \t  transclude: true, \n          \t       // 如果为true则无法正常监听数据变化，被用来，\n          \t      //  只有当你希望创建一个可以包含任意内容的指令时， \n          \t     //  才使用transclude: true。\n          \t    //  配合ng-transclude插进去\n          \t  \n          \t  compile: function(tElement, tAttrs,   \n                          function transclude(  \n                        \n                          function(scope, cloneLinkingFn){   \n                        \n                            return function linking(scope, elm, attrs)&#123; &#125;})),\n          \t\t\n          \t\tlink: function($scope, iElm, iAttrs, controller) {\n          \t\t\t\n          \t\t}\n          \t};\n          }])\n  ```\n13. Angular生命周期\n    1. 编译阶段： 遍历整个HTML，查找处理指令，遍历指令里面所有的模板，此时还没有数据绑定，\n      ng-repeat和ng-include类似的就会在在此时进行操作，减少开销\n    2. compile：在数据放入指令之前安全操作DOM\n    3. pre-link：将作用域与DOM连接起来之前操作dom，不安全的转换DOM\n    4. post-link: 负责事件监听器，监听数据和实时的DOM操作，如果需要性能，用compile\n    5. destroy\n  \n14. ngModel \n  * 要访问``ngModelController``必须在指令里面require\n   * 不要有隔离作用域，隔离作用域会导致无法更新外部绑定的值\n     * $viewValue 获取ngModel的值\n     * $setViewValue 设置ngModel的值，需要手动触发``$digest``循环\n     * $render自定义渲染，会在``$parser``流水线执行完后调用，慎用\n     * $parsers：数组，处理加工ngModel数据，ngModel从DOM读出来的值会被当参数传入，到数据模型\n     * $formatters 数组，在数据模型变的时候函数一一调用\n     * $viewChangeListeners 无需``$watch``函数不需要返回值，视图中的值变化时一一调用\n     * $error 没有通过验证的信息\n     * $pristine 是否对控件没有交互过\n     * $dirty 用户是否交互过\n     * $valid 是否正确 $setValidity设置\n     * $invalid 是否错误\n\n15. constant会在所有配置config之前执行。config: 模块加载时会执行此函数\n\n16. run 类main函数，在注入器创建之后被执行，是第一个被执行的方法，一般篇日志路由事件监听器\n    每次路由改变时执行run方法\n    \n17. 路由\n  ng-view 最高权限指令同一元素只会运行ng-view\n  ng-view运行顺序\n    触发$routeChangeSuccess后试图会更新\n    模板会通过路由与ng-view关联\n      1. 创建一个新作用域\n      2. 移除上一个视图，同时清除作用域\n      3. 关联当前模板\n      4. 如果路由中定义的controller则与当前作用域关联起来\n      5. 触发$viewContentLoaded\n      6. 调用onload指定的函数（如果有）\n      \n  **router的resolve属性，$injector会将声明的key添加进依赖，并能注入**\n  \n  **$location相当于window.location的封装，但只针对视图，不能针对全局浏览器窗口**\n  \n18. 依赖注入\n  * 对象通常过的其控制权的方式\n    * 在内部创建依赖；\n    * 通过全局变量进行引用；\n    * 在需要的地方通过参数进行传递\n  \n  angular依赖注入使用$injector来管里依赖关系和实例化\n  包括模块，指令，控制器的注入\n  在运行时， 任何模块启动时$injector都会负责实例化，并将其需要的所有依赖传递进去\n   ```\n   angular.module('myApp', [])\n        .factory('greeter', function() {\n          return {\n            greet: function(msg) {alert(msg);}\n          }\n        })\n        .controller('MyController',\n          function($scope, greeter) {\n            $scope.sayHello = function() {\n            greeter.greet(\"Hello!\");\n          };\n        });\n        \n        <div ng-app=\"myApp\">\n          <div ng-controller=\"MyController\">\n            <button ng-click=\"sayHello()\">Hello</button>\n          </div>\n        </div\n   ```\n##### angular加载过程\n```\n  // 使用注入器加载应用\n  var injector = angular.injector(['ng', 'myApp']);\n  // 通过注入器加载$controller服务： var $controller = injector.get('$controller');\n  var scope = injector.get('$rootScope').$new();\n  // 加载控制器并传入一个作用域，同AngularJS在运行时做的一样\n  var MyController = $controller('MyController', {$scope: scope})\n```\n  * angular通过**annotate**函数将greeter从参数列表中提取出来\n    如果没有加[]进行显式的声明，那么ng就会通过参数来获取依赖关系\n  ```\n    injector.annotate(function($q, myService){ })\n    // annotate会返回被注入目标中的服务的名称，从而进行匹配\n  ```\n  * injector.invoke(func($q)) 调用方法, fn.apply(self, args)\n    将参数列表转化成实例后的函数在进行调用\n    大概如此：\n  ```\n    function Fucker() {\n      this.getFucker = function () {\n        console.log('motherfucker')\n      }\n    }\n    \n    function invoke(fn, self) {\n      // 一般是['dep1', 'dep2', func]\n      // 会找寻依赖对应的参数函数并通过方法将其实例化\n      // 调用func\n      fn.apply(self, [new Fucker()])\n    }\n    \n    invoke(function (fucker) {\n      fucker.getFucker() // motherfucker\n    })\n  ```\n19. 分析ng-include为什么会导致无法正常双向绑定\n  * ng-include指令会生成一个作用域 (child)\n  * ng-include父节点的作用域（parent）\n  * parent.flag = \"test\" 根据原型继承原理 child._proto_.flag = \"test\"\n  * 当parent.flag变成\"dev\" 则child._proto_.flag = \"dev\"\n  * 如果child.flag = \"product\" 则 child.flag 与 parent.flag 失去联系\n  * 解决这种问题需要，将要传递的属性变为对象形式\n```\n  function Parent() {\n    this.face = \"哈哈\"\n  }\n  \n  Parent.prototype = {\n    constructor: Parent,\n  \n    $new: function () {\n      var child\n  \n      this.$$childScope = function () {\n        this.$id = 112212\n      }\n      this.$$childScope.prototype = this\n      child = new this.$$childScope()\n  \n      return child\n    }\n  \n  }\n  var parentScope = new Parent()\n  \n  var childScope = parentScope.$new()\n  \nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n) // [\"哈哈\", \"哈哈\"] [\"哈哈\", \"哈哈\"]\n  \n  \nparentScope.face = \"test\"\nparentScope.fixed.face = \"test\"\nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n) // [\"test\", \"test\"] [\"test\", \"test\"]\n  \n  \nchildScope.face = \"我是谁\"\nchildScope.fixed.face = \"我是谁\"\nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n)// [\"test\", \"我是谁\"] [\"我是谁\", \"我是谁\"]\n  \n```\n20. $scope生命周期\n  * 创建\n    * 创建控制器或指令时，angular会用``$injector``创建一个作用域，并在新建的控制器指令中将作用域传递进去\n        * ``$scope``会通过``$new``创建通过原型与父级保持联系\n  * 链接\n    * 用$watch将数据监听\n  * 更新\n    * 当$watch监听到变化，触发回调\n  * 销毁\n    * 视图不需要会销毁自己\n  ","slug":"angular权威指南学习","published":1,"date":"2017-04-14T03:29:40.233Z","updated":"2017-04-13T10:48:12.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1haabo200024cv3mspsljbi","content":"<h4 id=\"angular权威指南笔记\"><a href=\"#angular权威指南笔记\" class=\"headerlink\" title=\"angular权威指南笔记\"></a>angular权威指南笔记</h4><ol>\n<li><p>$interpolate——服务插值表达式，可以设置插值表达式中的数据并<code>$interpolateProvider</code> 可以自定义 <strong>flag  =&gt; $x$</strong></p>\n</li>\n<li><p>orderBy——排序：给显示的文本排序</p>\n</li>\n<li><p><code>$parsers</code><br>当用户同控制器进行交互，并且<code>ngModelController</code><br>中的<code>$setViewValue()</code>方法被调用时，<br><code>$parsers</code>数组中的函数会以流水线的形式被逐个调用。<br>第一个<code>$parse</code>被调用后，执行结果会传<br>递给第二个<code>$parse</code>，以此类推</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>)</div><div class=\"line\">  .directive(<span class=\"string\">'oneToTen'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">require</span>: <span class=\"string\">'?ngModel'</span>,</div><div class=\"line\">      link: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope, ele, attrs, ngModel)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!ngModel) <span class=\"keyword\">return</span>;</div><div class=\"line\">          ngModel.$parsers.unshift(</div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(viewValue)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> i = parseInt(viewValue);</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; <span class=\"number\">10</span>) &#123;</div><div class=\"line\">            ngModel.$setValidity(<span class=\"string\">'oneToTen'</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> viewValue;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ngModel.$setValidity(<span class=\"string\">'oneToTen'</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> undefined;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<a id=\"more\"></a></li>\n<li><p><strong>$formatters</strong><br>当绑定的<code>ngModel</code>值发生了变化，并经过<code>$parsers</code><br>数组中解析器的处理后，这个值会被传递<br>给<code>$formatters</code>流水线。同<code>$parsers</code><br>数组可以修改表单的合法性状态类似， <code>$formatters</code>中的函<br>数也可以修改并格式化这些值</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>)</div><div class=\"line\">    .directive(<span class=\"string\">'oneToTen'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">require</span>: <span class=\"string\">'?ngModel'</span>,</div><div class=\"line\">          link: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope, ele, attrs, ngModel)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!ngModel) <span class=\"keyword\">return</span>;</div><div class=\"line\">            ngModel.$formatters.unshift(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(v)</span> </span>&#123;</div><div class=\"line\">              <span class=\"keyword\">return</span> $filter(<span class=\"string\">'number'</span>)(v);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>表单验证：<code>ngModelController.$我是自定义</code><br> 取出 <code>form_name.input_name.$我是自定义</code><br> angular可以通过<code>form_name.input_name.XX</code><br> 拿到在<code>directive</code>里面给<code>ngModelController</code>自定义的布尔值<br> 从而可以通过判断来进行show/hide的表单验证</p>\n</li>\n<li><p>用属性声明指令比较好</p>\n</li>\n<li><p>指令<br><strong>@</strong> 绑定一次性显示的字符串<br><strong>=</strong> 双向绑定会获取作用域上面的值<br><strong>&amp;</strong> 绑定事件<br><strong>yourAttr: ‘@myAttr’</strong> 在<code>html</code>用<code>myAttr</code>，在指令中还是用<code>yourAttr</code></p>\n</li>\n<li><p><code>ng-include</code><br>会创建一个作用域，根据作用域原型继承原理，子作用域能访问父级的值，而反过来就不行了<br>所以不能在父级作用域操作<code>ng-include</code>中的数据，导致无法正常进行<code>$watch</code><br>应该给<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">类似的指令还有 ```ng-controller ng-app</div></pre></td></tr></table></figure></p>\n</li>\n<li><p>如要避免插值字符串{&#123; &#125;}为渲染完成闪烁问题，请使用<code>ng-cloak</code>指令</p>\n</li>\n<li><p>ng-attr-(suffix)<br>如使用svg的时候报错，就是用前缀来避免</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123; cx &#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">circle</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span> // 报错</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">ng-attr-cx</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123; cx &#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">circle</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span>  // OK</div></pre></td></tr></table></figure>\n</li>\n<li><p>指令的生命周期开始于<code>$compile</code>结束于<code>link方法</code></p>\n</li>\n<li><p>指令API</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">''</span>, [<span class=\"string\">''</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        \t<span class=\"comment\">// Runs during compile</span></div><div class=\"line\">        \t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\"></div><div class=\"line\">        \t  name: <span class=\"string\">''</span>,  `指令名称`</div><div class=\"line\"></div><div class=\"line\">        \t  priority: <span class=\"number\">1</span>, `加载优先级`</div><div class=\"line\"></div><div class=\"line\">        \t  terminal: <span class=\"keyword\">true</span>, `是否让优先级以下的指令不运行`</div><div class=\"line\"></div><div class=\"line\">        \t  scope: &amp;<span class=\"comment\">#123; &amp;#125;, // &amp;#123; &amp;#125; = isolate, true = child, false/undefined = no change</span></div><div class=\"line\">        \t  `作用域，如果是<span class=\"keyword\">true</span>则不让外部继承，外部读不到</div><div class=\"line\">        \t    如果是对象则是隔离作用域（作用域不传递）</div><div class=\"line\">        \t    具有隔离作用域的指令最主要的使用场景是创建可复用的组件，组件可以在未知上下文中使</div><div class=\"line\">              用，并且可以避免污染所处的外部作用域或不经意地污染内部作用域`</div><div class=\"line\"></div><div class=\"line\">        \t  controller: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, $element, $attrs, $transclude)</span> &amp;#123</span>; &amp;<span class=\"comment\">#125;,</span></div><div class=\"line\"></div><div class=\"line\">        \t  `指令的控制`</div><div class=\"line\">        \t  <span class=\"keyword\">require</span>: <span class=\"string\">'ngModel'</span>, <span class=\"comment\">// Array = multiple requires,   </span></div><div class=\"line\">        \t                     <span class=\"comment\">// ? = optional（指找不到控制器传递null）,   </span></div><div class=\"line\">        \t                    <span class=\"comment\">// ^ = check parent elements</span></div><div class=\"line\">                             <span class=\"comment\">// PS:可以在link方法的第四个参数指向该指令的controller</span></div><div class=\"line\"></div><div class=\"line\">        \t  restrict: <span class=\"string\">'A'</span>, <span class=\"comment\">// E = Element,   </span></div><div class=\"line\">        \t                <span class=\"comment\">// A = Attribute,   </span></div><div class=\"line\">        \t               <span class=\"comment\">// C = Class,  </span></div><div class=\"line\">        \t              <span class=\"comment\">// M = Comment</span></div><div class=\"line\">        \t             <span class=\"comment\">// 声明方式</span></div><div class=\"line\">        \t             </div><div class=\"line\">        \t  template: <span class=\"string\">''</span>, <span class=\"comment\">// 字符串</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  templateUrl: <span class=\"string\">''</span>, <span class=\"comment\">// 指令html的地址</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  replace: <span class=\"keyword\">true</span>, <span class=\"comment\">// 用html标签完全替代此指令</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  transclude: <span class=\"keyword\">true</span>, </div><div class=\"line\">        \t       <span class=\"comment\">// 如果为true则无法正常监听数据变化，被用来，</span></div><div class=\"line\">        \t      <span class=\"comment\">//  只有当你希望创建一个可以包含任意内容的指令时， </span></div><div class=\"line\">        \t     <span class=\"comment\">//  才使用transclude: true。</span></div><div class=\"line\">        \t    <span class=\"comment\">//  配合ng-transclude插进去</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  compile: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(tElement, tAttrs,   </span></span></div><div class=\"line\">                        function transclude<span class=\"params\">(  </span></div><div class=\"line\">                      </div><div class=\"line\">                        function<span class=\"params\">(scope, cloneLinkingFn)</span>&#123;   </div><div class=\"line\">                      </div><div class=\"line\">                          return function linking<span class=\"params\">(scope, elm, attrs)</span>&amp;#<span class=\"number\">123</span>; &amp;#<span class=\"number\">125</span>;&#125;)),</div><div class=\"line\">        \t\t</div><div class=\"line\">        \t\t<span class=\"title\">link</span>: <span class=\"title\">function</span><span class=\"params\">($scope, iElm, iAttrs, controller)</span> &#123;</div><div class=\"line\">        \t\t\t</div><div class=\"line\">        \t\t&#125;</div><div class=\"line\">        \t&#125;;</div><div class=\"line\">        &#125;])</div></pre></td></tr></table></figure>\n</li>\n<li><p>Angular生命周期</p>\n<ol>\n<li>编译阶段： 遍历整个HTML，查找处理指令，遍历指令里面所有的模板，此时还没有数据绑定，<br>ng-repeat和ng-include类似的就会在在此时进行操作，减少开销</li>\n<li>compile：在数据放入指令之前安全操作DOM</li>\n<li>pre-link：将作用域与DOM连接起来之前操作dom，不安全的转换DOM</li>\n<li>post-link: 负责事件监听器，监听数据和实时的DOM操作，如果需要性能，用compile</li>\n<li>destroy</li>\n</ol>\n</li>\n<li><p>ngModel </p>\n<ul>\n<li>要访问<code>ngModelController</code>必须在指令里面require</li>\n<li>不要有隔离作用域，隔离作用域会导致无法更新外部绑定的值<ul>\n<li>$viewValue 获取ngModel的值</li>\n<li>$setViewValue 设置ngModel的值，需要手动触发<code>$digest</code>循环</li>\n<li>$render自定义渲染，会在<code>$parser</code>流水线执行完后调用，慎用</li>\n<li>$parsers：数组，处理加工ngModel数据，ngModel从DOM读出来的值会被当参数传入，到数据模型</li>\n<li>$formatters 数组，在数据模型变的时候函数一一调用</li>\n<li>$viewChangeListeners 无需<code>$watch</code>函数不需要返回值，视图中的值变化时一一调用</li>\n<li>$error 没有通过验证的信息</li>\n<li>$pristine 是否对控件没有交互过</li>\n<li>$dirty 用户是否交互过</li>\n<li>$valid 是否正确 $setValidity设置</li>\n<li>$invalid 是否错误</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>constant会在所有配置config之前执行。config: 模块加载时会执行此函数</p>\n</li>\n<li><p>run 类main函数，在注入器创建之后被执行，是第一个被执行的方法，一般篇日志路由事件监听器<br>每次路由改变时执行run方法</p>\n</li>\n<li><p>路由<br>ng-view 最高权限指令同一元素只会运行ng-view<br>ng-view运行顺序<br>触发$routeChangeSuccess后试图会更新<br>模板会通过路由与ng-view关联</p>\n<ol>\n<li>创建一个新作用域</li>\n<li>移除上一个视图，同时清除作用域</li>\n<li>关联当前模板</li>\n<li>如果路由中定义的controller则与当前作用域关联起来</li>\n<li>触发$viewContentLoaded</li>\n<li>调用onload指定的函数（如果有）</li>\n</ol>\n<p><strong>router的resolve属性，$injector会将声明的key添加进依赖，并能注入</strong></p>\n<p><strong>$location相当于window.location的封装，但只针对视图，不能针对全局浏览器窗口</strong></p>\n</li>\n<li><p>依赖注入</p>\n<ul>\n<li>对象通常过的其控制权的方式</li>\n<li>在内部创建依赖；</li>\n<li>通过全局变量进行引用；</li>\n<li>在需要的地方通过参数进行传递</li>\n</ul>\n<p>angular依赖注入使用$injector来管里依赖关系和实例化<br>包括模块，指令，控制器的注入<br>在运行时， 任何模块启动时$injector都会负责实例化，并将其需要的所有依赖传递进去</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>, [])</div><div class=\"line\">     .factory(<span class=\"string\">'greeter'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">         <span class=\"attr\">greet</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;alert(msg);&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;)</div><div class=\"line\">     .controller(<span class=\"string\">'MyController'</span>,</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, greeter</span>) </span>&#123;</div><div class=\"line\">         $scope.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">         greeter.greet(<span class=\"string\">\"Hello!\"</span>);</div><div class=\"line\">       &#125;;</div><div class=\"line\">     &#125;);</div><div class=\"line\">     </div><div class=\"line\">     <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"myApp\"</span>&gt;</span></span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"MyController\"</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"sayHello()\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span></span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"angular加载过程\"><a href=\"#angular加载过程\" class=\"headerlink\" title=\"angular加载过程\"></a>angular加载过程</h5><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span> 使用注入器加载应用</div><div class=\"line\">var injector = angular.injector([<span class=\"string\">'ng'</span>, <span class=\"string\">'myApp'</span>]);</div><div class=\"line\"><span class=\"regexp\">//</span> 通过注入器加载<span class=\"variable\">$controller</span>服务： var <span class=\"variable\">$controller</span> = injector.get(<span class=\"string\">'$controller'</span>);</div><div class=\"line\">var scope = injector.get(<span class=\"string\">'$rootScope'</span>).<span class=\"variable\">$new</span>();</div><div class=\"line\"><span class=\"regexp\">//</span> 加载控制器并传入一个作用域，同AngularJS在运行时做的一样</div><div class=\"line\">var MyController = <span class=\"variable\">$controller</span>(<span class=\"string\">'MyController'</span>, &#123;<span class=\"variable\">$scope</span>: scope&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>angular通过<strong>annotate</strong>函数将greeter从参数列表中提取出来<br>如果没有加[]进行显式的声明，那么ng就会通过参数来获取依赖关系</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">injector.annotate(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($q, myService)</span></span>&#123; &#125;)</div><div class=\"line\"><span class=\"comment\">// annotate会返回被注入目标中的服务的名称，从而进行匹配</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>injector.invoke(func($q)) 调用方法, fn.apply(self, args)<br>将参数列表转化成实例后的函数在进行调用<br>大概如此：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fucker</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.getFucker = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'motherfucker'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invoke</span>(<span class=\"params\">fn, self</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 一般是['dep1', 'dep2', func]</span></div><div class=\"line\">  <span class=\"comment\">// 会找寻依赖对应的参数函数并通过方法将其实例化</span></div><div class=\"line\">  <span class=\"comment\">// 调用func</span></div><div class=\"line\">  fn.apply(self, [<span class=\"keyword\">new</span> Fucker()])</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">invoke(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fucker</span>) </span>&#123;</div><div class=\"line\">  fucker.getFucker() <span class=\"comment\">// motherfucker</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>分析ng-include为什么会导致无法正常双向绑定</p>\n<ul>\n<li>ng-include指令会生成一个作用域 (child)</li>\n<li>ng-include父节点的作用域（parent）</li>\n<li>parent.flag = “test” 根据原型继承原理 child.<em>proto</em>.flag = “test”</li>\n<li>当parent.flag变成”dev” 则child.<em>proto</em>.flag = “dev”</li>\n<li>如果child.flag = “product” 则 child.flag 与 parent.flag 失去联系</li>\n<li>解决这种问题需要，将要传递的属性变为对象形式<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">  function Parent() &#123;</div><div class=\"line\">    this<span class=\"selector-class\">.face</span> = <span class=\"string\">\"哈哈\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  Parent<span class=\"selector-class\">.prototype</span> = &#123;</div><div class=\"line\">    constructor: Parent,</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"variable\">$new</span>: function () &#123;</div><div class=\"line\">      <span class=\"selector-tag\">var</span> child</div><div class=\"line\">  </div><div class=\"line\">      this.$<span class=\"variable\">$childScope</span> = function () &#123;</div><div class=\"line\">        this.<span class=\"variable\">$id</span> = <span class=\"number\">112212</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      this.$<span class=\"variable\">$childScope</span><span class=\"selector-class\">.prototype</span> = this</div><div class=\"line\">      child = new this.$<span class=\"variable\">$childScope</span>()</div><div class=\"line\">  </div><div class=\"line\">      return child</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-tag\">var</span> parentScope = new Parent()</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"selector-tag\">var</span> childScope = parentScope.<span class=\"variable\">$new</span>()</div><div class=\"line\">  </div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">) <span class=\"comment\">// [\"哈哈\", \"哈哈\"] [\"哈哈\", \"哈哈\"]</span></div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">parentScope<span class=\"selector-class\">.face</span> = <span class=\"string\">\"test\"</span></div><div class=\"line\">parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span> = <span class=\"string\">\"test\"</span></div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">) <span class=\"comment\">// [\"test\", \"test\"] [\"test\", \"test\"]</span></div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">childScope<span class=\"selector-class\">.face</span> = <span class=\"string\">\"我是谁\"</span></div><div class=\"line\">childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span> = <span class=\"string\">\"我是谁\"</span></div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">)<span class=\"comment\">// [\"test\", \"我是谁\"] [\"我是谁\", \"我是谁\"]</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>$scope生命周期</p>\n<ul>\n<li>创建</li>\n<li>创建控制器或指令时，angular会用<code>$injector</code>创建一个作用域，并在新建的控制器指令中将作用域传递进去<ul>\n<li><code>$scope</code>会通过<code>$new</code>创建通过原型与父级保持联系</li>\n</ul>\n</li>\n<li>链接</li>\n<li>用$watch将数据监听</li>\n<li>更新</li>\n<li>当$watch监听到变化，触发回调</li>\n<li>销毁</li>\n<li>视图不需要会销毁自己</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h4 id=\"angular权威指南笔记\"><a href=\"#angular权威指南笔记\" class=\"headerlink\" title=\"angular权威指南笔记\"></a>angular权威指南笔记</h4><ol>\n<li><p>$interpolate——服务插值表达式，可以设置插值表达式中的数据并<code>$interpolateProvider</code> 可以自定义 <strong>flag  =&gt; $x$</strong></p>\n</li>\n<li><p>orderBy——排序：给显示的文本排序</p>\n</li>\n<li><p><code>$parsers</code><br>当用户同控制器进行交互，并且<code>ngModelController</code><br>中的<code>$setViewValue()</code>方法被调用时，<br><code>$parsers</code>数组中的函数会以流水线的形式被逐个调用。<br>第一个<code>$parse</code>被调用后，执行结果会传<br>递给第二个<code>$parse</code>，以此类推</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>)</div><div class=\"line\">  .directive(<span class=\"string\">'oneToTen'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">require</span>: <span class=\"string\">'?ngModel'</span>,</div><div class=\"line\">      link: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope, ele, attrs, ngModel)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!ngModel) <span class=\"keyword\">return</span>;</div><div class=\"line\">          ngModel.$parsers.unshift(</div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(viewValue)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> i = parseInt(viewValue);</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; <span class=\"number\">10</span>) &#123;</div><div class=\"line\">            ngModel.$setValidity(<span class=\"string\">'oneToTen'</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> viewValue;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ngModel.$setValidity(<span class=\"string\">'oneToTen'</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> undefined;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure></li></ol>","more":"\n<li><p><strong>$formatters</strong><br>当绑定的<code>ngModel</code>值发生了变化，并经过<code>$parsers</code><br>数组中解析器的处理后，这个值会被传递<br>给<code>$formatters</code>流水线。同<code>$parsers</code><br>数组可以修改表单的合法性状态类似， <code>$formatters</code>中的函<br>数也可以修改并格式化这些值</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>)</div><div class=\"line\">    .directive(<span class=\"string\">'oneToTen'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">require</span>: <span class=\"string\">'?ngModel'</span>,</div><div class=\"line\">          link: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope, ele, attrs, ngModel)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!ngModel) <span class=\"keyword\">return</span>;</div><div class=\"line\">            ngModel.$formatters.unshift(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(v)</span> </span>&#123;</div><div class=\"line\">              <span class=\"keyword\">return</span> $filter(<span class=\"string\">'number'</span>)(v);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>表单验证：<code>ngModelController.$我是自定义</code><br> 取出 <code>form_name.input_name.$我是自定义</code><br> angular可以通过<code>form_name.input_name.XX</code><br> 拿到在<code>directive</code>里面给<code>ngModelController</code>自定义的布尔值<br> 从而可以通过判断来进行show/hide的表单验证</p>\n</li>\n<li><p>用属性声明指令比较好</p>\n</li>\n<li><p>指令<br><strong>@</strong> 绑定一次性显示的字符串<br><strong>=</strong> 双向绑定会获取作用域上面的值<br><strong>&amp;</strong> 绑定事件<br><strong>yourAttr: ‘@myAttr’</strong> 在<code>html</code>用<code>myAttr</code>，在指令中还是用<code>yourAttr</code></p>\n</li>\n<li><p><code>ng-include</code><br>会创建一个作用域，根据作用域原型继承原理，子作用域能访问父级的值，而反过来就不行了<br>所以不能在父级作用域操作<code>ng-include</code>中的数据，导致无法正常进行<code>$watch</code><br>应该给<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">类似的指令还有 ```ng-controller ng-app</div></pre></td></tr></table></figure></p>\n</li>\n<li><p>如要避免插值字符串{&#123; &#125;}为渲染完成闪烁问题，请使用<code>ng-cloak</code>指令</p>\n</li>\n<li><p>ng-attr-(suffix)<br>如使用svg的时候报错，就是用前缀来避免</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123; cx &#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">circle</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span> // 报错</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">ng-attr-cx</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123; cx &#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">circle</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span>  // OK</div></pre></td></tr></table></figure>\n</li>\n<li><p>指令的生命周期开始于<code>$compile</code>结束于<code>link方法</code></p>\n</li>\n<li><p>指令API</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">''</span>, [<span class=\"string\">''</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        \t<span class=\"comment\">// Runs during compile</span></div><div class=\"line\">        \t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\"></div><div class=\"line\">        \t  name: <span class=\"string\">''</span>,  `指令名称`</div><div class=\"line\"></div><div class=\"line\">        \t  priority: <span class=\"number\">1</span>, `加载优先级`</div><div class=\"line\"></div><div class=\"line\">        \t  terminal: <span class=\"keyword\">true</span>, `是否让优先级以下的指令不运行`</div><div class=\"line\"></div><div class=\"line\">        \t  scope: &amp;<span class=\"comment\">#123; &amp;#125;, // &amp;#123; &amp;#125; = isolate, true = child, false/undefined = no change</span></div><div class=\"line\">        \t  `作用域，如果是<span class=\"keyword\">true</span>则不让外部继承，外部读不到</div><div class=\"line\">        \t    如果是对象则是隔离作用域（作用域不传递）</div><div class=\"line\">        \t    具有隔离作用域的指令最主要的使用场景是创建可复用的组件，组件可以在未知上下文中使</div><div class=\"line\">              用，并且可以避免污染所处的外部作用域或不经意地污染内部作用域`</div><div class=\"line\"></div><div class=\"line\">        \t  controller: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, $element, $attrs, $transclude)</span> &amp;#123</span>; &amp;<span class=\"comment\">#125;,</span></div><div class=\"line\"></div><div class=\"line\">        \t  `指令的控制`</div><div class=\"line\">        \t  <span class=\"keyword\">require</span>: <span class=\"string\">'ngModel'</span>, <span class=\"comment\">// Array = multiple requires,   </span></div><div class=\"line\">        \t                     <span class=\"comment\">// ? = optional（指找不到控制器传递null）,   </span></div><div class=\"line\">        \t                    <span class=\"comment\">// ^ = check parent elements</span></div><div class=\"line\">                             <span class=\"comment\">// PS:可以在link方法的第四个参数指向该指令的controller</span></div><div class=\"line\"></div><div class=\"line\">        \t  restrict: <span class=\"string\">'A'</span>, <span class=\"comment\">// E = Element,   </span></div><div class=\"line\">        \t                <span class=\"comment\">// A = Attribute,   </span></div><div class=\"line\">        \t               <span class=\"comment\">// C = Class,  </span></div><div class=\"line\">        \t              <span class=\"comment\">// M = Comment</span></div><div class=\"line\">        \t             <span class=\"comment\">// 声明方式</span></div><div class=\"line\">        \t             </div><div class=\"line\">        \t  template: <span class=\"string\">''</span>, <span class=\"comment\">// 字符串</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  templateUrl: <span class=\"string\">''</span>, <span class=\"comment\">// 指令html的地址</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  replace: <span class=\"keyword\">true</span>, <span class=\"comment\">// 用html标签完全替代此指令</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  transclude: <span class=\"keyword\">true</span>, </div><div class=\"line\">        \t       <span class=\"comment\">// 如果为true则无法正常监听数据变化，被用来，</span></div><div class=\"line\">        \t      <span class=\"comment\">//  只有当你希望创建一个可以包含任意内容的指令时， </span></div><div class=\"line\">        \t     <span class=\"comment\">//  才使用transclude: true。</span></div><div class=\"line\">        \t    <span class=\"comment\">//  配合ng-transclude插进去</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  compile: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(tElement, tAttrs,   </span></span></div><div class=\"line\">                        function transclude<span class=\"params\">(  </span></div><div class=\"line\">                      </div><div class=\"line\">                        function<span class=\"params\">(scope, cloneLinkingFn)</span>&#123;   </div><div class=\"line\">                      </div><div class=\"line\">                          return function linking<span class=\"params\">(scope, elm, attrs)</span>&amp;#<span class=\"number\">123</span>; &amp;#<span class=\"number\">125</span>;&#125;)),</div><div class=\"line\">        \t\t</div><div class=\"line\">        \t\t<span class=\"title\">link</span>: <span class=\"title\">function</span><span class=\"params\">($scope, iElm, iAttrs, controller)</span> &#123;</div><div class=\"line\">        \t\t\t</div><div class=\"line\">        \t\t&#125;</div><div class=\"line\">        \t&#125;;</div><div class=\"line\">        &#125;])</div></pre></td></tr></table></figure>\n</li>\n<li><p>Angular生命周期</p>\n<ol>\n<li>编译阶段： 遍历整个HTML，查找处理指令，遍历指令里面所有的模板，此时还没有数据绑定，<br>ng-repeat和ng-include类似的就会在在此时进行操作，减少开销</li>\n<li>compile：在数据放入指令之前安全操作DOM</li>\n<li>pre-link：将作用域与DOM连接起来之前操作dom，不安全的转换DOM</li>\n<li>post-link: 负责事件监听器，监听数据和实时的DOM操作，如果需要性能，用compile</li>\n<li>destroy</li>\n</ol>\n</li>\n<li><p>ngModel </p>\n<ul>\n<li>要访问<code>ngModelController</code>必须在指令里面require</li>\n<li>不要有隔离作用域，隔离作用域会导致无法更新外部绑定的值<ul>\n<li>$viewValue 获取ngModel的值</li>\n<li>$setViewValue 设置ngModel的值，需要手动触发<code>$digest</code>循环</li>\n<li>$render自定义渲染，会在<code>$parser</code>流水线执行完后调用，慎用</li>\n<li>$parsers：数组，处理加工ngModel数据，ngModel从DOM读出来的值会被当参数传入，到数据模型</li>\n<li>$formatters 数组，在数据模型变的时候函数一一调用</li>\n<li>$viewChangeListeners 无需<code>$watch</code>函数不需要返回值，视图中的值变化时一一调用</li>\n<li>$error 没有通过验证的信息</li>\n<li>$pristine 是否对控件没有交互过</li>\n<li>$dirty 用户是否交互过</li>\n<li>$valid 是否正确 $setValidity设置</li>\n<li>$invalid 是否错误</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>constant会在所有配置config之前执行。config: 模块加载时会执行此函数</p>\n</li>\n<li><p>run 类main函数，在注入器创建之后被执行，是第一个被执行的方法，一般篇日志路由事件监听器<br>每次路由改变时执行run方法</p>\n</li>\n<li><p>路由<br>ng-view 最高权限指令同一元素只会运行ng-view<br>ng-view运行顺序<br>触发$routeChangeSuccess后试图会更新<br>模板会通过路由与ng-view关联</p>\n<ol>\n<li>创建一个新作用域</li>\n<li>移除上一个视图，同时清除作用域</li>\n<li>关联当前模板</li>\n<li>如果路由中定义的controller则与当前作用域关联起来</li>\n<li>触发$viewContentLoaded</li>\n<li>调用onload指定的函数（如果有）</li>\n</ol>\n<p><strong>router的resolve属性，$injector会将声明的key添加进依赖，并能注入</strong></p>\n<p><strong>$location相当于window.location的封装，但只针对视图，不能针对全局浏览器窗口</strong></p>\n</li>\n<li><p>依赖注入</p>\n<ul>\n<li>对象通常过的其控制权的方式</li>\n<li>在内部创建依赖；</li>\n<li>通过全局变量进行引用；</li>\n<li>在需要的地方通过参数进行传递</li>\n</ul>\n<p>angular依赖注入使用$injector来管里依赖关系和实例化<br>包括模块，指令，控制器的注入<br>在运行时， 任何模块启动时$injector都会负责实例化，并将其需要的所有依赖传递进去</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>, [])</div><div class=\"line\">     .factory(<span class=\"string\">'greeter'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">         <span class=\"attr\">greet</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;alert(msg);&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;)</div><div class=\"line\">     .controller(<span class=\"string\">'MyController'</span>,</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, greeter</span>) </span>&#123;</div><div class=\"line\">         $scope.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">         greeter.greet(<span class=\"string\">\"Hello!\"</span>);</div><div class=\"line\">       &#125;;</div><div class=\"line\">     &#125;);</div><div class=\"line\">     </div><div class=\"line\">     <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"myApp\"</span>&gt;</span></span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"MyController\"</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"sayHello()\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span></span></div></pre></td></tr></table></figure>\n</li>\n\n<h5 id=\"angular加载过程\"><a href=\"#angular加载过程\" class=\"headerlink\" title=\"angular加载过程\"></a>angular加载过程</h5><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span> 使用注入器加载应用</div><div class=\"line\">var injector = angular.injector([<span class=\"string\">'ng'</span>, <span class=\"string\">'myApp'</span>]);</div><div class=\"line\"><span class=\"regexp\">//</span> 通过注入器加载<span class=\"variable\">$controller</span>服务： var <span class=\"variable\">$controller</span> = injector.get(<span class=\"string\">'$controller'</span>);</div><div class=\"line\">var scope = injector.get(<span class=\"string\">'$rootScope'</span>).<span class=\"variable\">$new</span>();</div><div class=\"line\"><span class=\"regexp\">//</span> 加载控制器并传入一个作用域，同AngularJS在运行时做的一样</div><div class=\"line\">var MyController = <span class=\"variable\">$controller</span>(<span class=\"string\">'MyController'</span>, &#123;<span class=\"variable\">$scope</span>: scope&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>angular通过<strong>annotate</strong>函数将greeter从参数列表中提取出来<br>如果没有加[]进行显式的声明，那么ng就会通过参数来获取依赖关系</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">injector.annotate(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($q, myService)</span></span>&#123; &#125;)</div><div class=\"line\"><span class=\"comment\">// annotate会返回被注入目标中的服务的名称，从而进行匹配</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>injector.invoke(func($q)) 调用方法, fn.apply(self, args)<br>将参数列表转化成实例后的函数在进行调用<br>大概如此：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fucker</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.getFucker = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'motherfucker'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invoke</span>(<span class=\"params\">fn, self</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 一般是['dep1', 'dep2', func]</span></div><div class=\"line\">  <span class=\"comment\">// 会找寻依赖对应的参数函数并通过方法将其实例化</span></div><div class=\"line\">  <span class=\"comment\">// 调用func</span></div><div class=\"line\">  fn.apply(self, [<span class=\"keyword\">new</span> Fucker()])</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">invoke(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fucker</span>) </span>&#123;</div><div class=\"line\">  fucker.getFucker() <span class=\"comment\">// motherfucker</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>分析ng-include为什么会导致无法正常双向绑定</p>\n<ul>\n<li>ng-include指令会生成一个作用域 (child)</li>\n<li>ng-include父节点的作用域（parent）</li>\n<li>parent.flag = “test” 根据原型继承原理 child.<em>proto</em>.flag = “test”</li>\n<li>当parent.flag变成”dev” 则child.<em>proto</em>.flag = “dev”</li>\n<li>如果child.flag = “product” 则 child.flag 与 parent.flag 失去联系</li>\n<li>解决这种问题需要，将要传递的属性变为对象形式<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">  function Parent() &#123;</div><div class=\"line\">    this<span class=\"selector-class\">.face</span> = <span class=\"string\">\"哈哈\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  Parent<span class=\"selector-class\">.prototype</span> = &#123;</div><div class=\"line\">    constructor: Parent,</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"variable\">$new</span>: function () &#123;</div><div class=\"line\">      <span class=\"selector-tag\">var</span> child</div><div class=\"line\">  </div><div class=\"line\">      this.$<span class=\"variable\">$childScope</span> = function () &#123;</div><div class=\"line\">        this.<span class=\"variable\">$id</span> = <span class=\"number\">112212</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      this.$<span class=\"variable\">$childScope</span><span class=\"selector-class\">.prototype</span> = this</div><div class=\"line\">      child = new this.$<span class=\"variable\">$childScope</span>()</div><div class=\"line\">  </div><div class=\"line\">      return child</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-tag\">var</span> parentScope = new Parent()</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"selector-tag\">var</span> childScope = parentScope.<span class=\"variable\">$new</span>()</div><div class=\"line\">  </div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">) <span class=\"comment\">// [\"哈哈\", \"哈哈\"] [\"哈哈\", \"哈哈\"]</span></div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">parentScope<span class=\"selector-class\">.face</span> = <span class=\"string\">\"test\"</span></div><div class=\"line\">parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span> = <span class=\"string\">\"test\"</span></div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">) <span class=\"comment\">// [\"test\", \"test\"] [\"test\", \"test\"]</span></div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">childScope<span class=\"selector-class\">.face</span> = <span class=\"string\">\"我是谁\"</span></div><div class=\"line\">childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span> = <span class=\"string\">\"我是谁\"</span></div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">)<span class=\"comment\">// [\"test\", \"我是谁\"] [\"我是谁\", \"我是谁\"]</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>$scope生命周期</p>\n<ul>\n<li>创建</li>\n<li>创建控制器或指令时，angular会用<code>$injector</code>创建一个作用域，并在新建的控制器指令中将作用域传递进去<ul>\n<li><code>$scope</code>会通过<code>$new</code>创建通过原型与父级保持联系</li>\n</ul>\n</li>\n<li>链接</li>\n<li>用$watch将数据监听</li>\n<li>更新</li>\n<li>当$watch监听到变化，触发回调</li>\n<li>销毁</li>\n<li>视图不需要会销毁自己</li>\n</ul>\n</li>\n</ol>"},{"title":"DOM属性currentTarget","_content":"```\n<html>\n<head>\n<script type=\"text/javascript\">\nfunction getEventTrigger(event)\n  { \n  x=event.currentTarget; \nconsole.log(event)\nconsole.log(event.currentTarget)\n  }\n</script>\n</head>\n<body >\n<p id=\"p1\" onmousedown=\"getEventTrigger(event)\">\nClick on this paragraph. An alert box will\nshow which element triggered the event.</p>\n</body>\n</html>\n```\n\n### 运行此代码会发现： **console.log(event) currentTarget:null**  而直接打印currentTarget则返回当前节点\n\n#### 这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况","source":"_posts/2017/04/currentTarget.md","raw":"---\ntitle: DOM属性currentTarget\ntags: \n  - javascript\n---\n```\n<html>\n<head>\n<script type=\"text/javascript\">\nfunction getEventTrigger(event)\n  { \n  x=event.currentTarget; \nconsole.log(event)\nconsole.log(event.currentTarget)\n  }\n</script>\n</head>\n<body >\n<p id=\"p1\" onmousedown=\"getEventTrigger(event)\">\nClick on this paragraph. An alert box will\nshow which element triggered the event.</p>\n</body>\n</html>\n```\n\n### 运行此代码会发现： **console.log(event) currentTarget:null**  而直接打印currentTarget则返回当前节点\n\n#### 这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况","slug":"currentTarget","published":1,"date":"2017-04-14T03:33:47.244Z","updated":"2017-04-13T09:18:22.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1haaboh00044cv3fznl7orz","content":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getEventTrigger</span>(<span class=\"params\">event</span>)</span></div><div class=\"line\">  &#123; </div><div class=\"line\">  x=event.currentTarget; </div><div class=\"line\"><span class=\"built_in\">console</span>.log(event)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(event.currentTarget)</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p1\"</span> <span class=\"attr\">onmousedown</span>=<span class=\"string\">\"getEventTrigger(event)\"</span>&gt;</span></div><div class=\"line\">Click on this paragraph. An alert box will</div><div class=\"line\">show which element triggered the event.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"运行此代码会发现：-console-log-event-currentTarget-null-而直接打印currentTarget则返回当前节点\"><a href=\"#运行此代码会发现：-console-log-event-currentTarget-null-而直接打印currentTarget则返回当前节点\" class=\"headerlink\" title=\"运行此代码会发现： console.log(event) currentTarget:null  而直接打印currentTarget则返回当前节点\"></a>运行此代码会发现： <strong>console.log(event) currentTarget:null</strong>  而直接打印currentTarget则返回当前节点</h3><h4 id=\"这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\"><a href=\"#这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\" class=\"headerlink\" title=\"这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\"></a>这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况</h4>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getEventTrigger</span>(<span class=\"params\">event</span>)</span></div><div class=\"line\">  &#123; </div><div class=\"line\">  x=event.currentTarget; </div><div class=\"line\"><span class=\"built_in\">console</span>.log(event)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(event.currentTarget)</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p1\"</span> <span class=\"attr\">onmousedown</span>=<span class=\"string\">\"getEventTrigger(event)\"</span>&gt;</span></div><div class=\"line\">Click on this paragraph. An alert box will</div><div class=\"line\">show which element triggered the event.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"运行此代码会发现：-console-log-event-currentTarget-null-而直接打印currentTarget则返回当前节点\"><a href=\"#运行此代码会发现：-console-log-event-currentTarget-null-而直接打印currentTarget则返回当前节点\" class=\"headerlink\" title=\"运行此代码会发现： console.log(event) currentTarget:null  而直接打印currentTarget则返回当前节点\"></a>运行此代码会发现： <strong>console.log(event) currentTarget:null</strong>  而直接打印currentTarget则返回当前节点</h3><h4 id=\"这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\"><a href=\"#这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\" class=\"headerlink\" title=\"这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\"></a>这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况</h4>"},{"title":"es6版promise","_content":"\n## es6版Promise\n#### 用法\n```\n  new Promise(function(resolve, reject) {\n    resolve('resolve')\n  })\n    .then(function(result) {\n      console.log(result) // resolve\n    })\n```\n#### ``Promise``是一个构造函数，接受一个函数作为参数  \n  这个函数接受两个参数：  \n  (1) resolve 成功的时候返回的数据 （履行承诺）  \n  (2) reject 失败的时候返回的数据 （拒绝承诺）\n#### ``Promise``原型方法\n  (1) ``then``注册成功后的回调  \n  (2) ``catch``注册失败后的回调\n#### 上源代码——由于使用es6所以用babel，[点击看编译过的代码](https://github.com/slipkinem/jsTest/blob/master/promise/final/promise.dist.js)\n```$xslt\nclass util {\n  static isFunction(value) {\n    return typeof value === 'function'\n  }\n\n  static isArray(value) {\n    return Array.isArray(value)\n  }\n}\n\n/**\n * Promise\n * @constructor\n */\nclass Promise extends util {\n  constructor(executor) {\n    /**\n     * 继承绑定，作为context调用父类的constructor\n     */\n    super(executor)\n\n    if (!Promise.isFunction(executor)) throw new TypeError('参数必须是一个函数')\n    /**\n     * @description\n     * 状态分为 PENDING  可以过度到RESOLVED或REJECTED\n     *        RESOLVED\n     *        REJECTED\n     * @type {string}\n     * @private\n     */\n    this._status = 'PENDING'\n    /**\n     * 正确值\n     * @type {Object}\n     * @private\n     */\n    this._value = Object.create(null)\n    /**\n     * 错误值\n     * @type {Object}\n     * @private\n     */\n    this._reason = Object.create(null)\n    /**\n     * 储存错误回调\n     * @type {Array}\n     * @private\n     */\n    this._rejecteds = []\n    /**\n     * 正确回调的方法集 \n     * @type {Array}\n     * @private\n     */\n    this._deferreds = []\n    /**\n     * 在class中 constructor里面的函数无法直接访问this\n     * 为了形成private，所以不放外面\n     * @type {Promise}\n     * @private\n     */\n    let _this = this\n\n    /**\n     * 执行承诺的函数\n     * @param value\n     */\n    function resolve(value) {\n      /**\n       * 异步，为了让then先执行，注册进回调\n       */\n      setTimeout(() => {\n        try {\n          if (_this._status === 'PENDING') {\n            _this._status = 'RESOLVED'\n            _this._value = value\n            /**\n             * 循环执行所有的回调\n             */\n            _this._deferreds.forEach((deferred) => {\n              deferred(value)\n            })\n\n          }\n        } catch (e) {\n          reject(e)\n        }\n\n      })\n    }\n\n    function reject(reason) {\n      setTimeout(() => {\n        try {\n          if (_this._status === 'PENDING') {\n            _this._status = 'REJECTED'\n            _this._reason = reason\n\n            _this._rejecteds.forEach((rejected) => {\n              rejected(reason)\n            })\n          }\n        } catch (e) {\n          reject(e)\n        }\n      })\n    }\n\n    try {\n      executor(resolve, reject)\n    } catch (e) {\n      reject(e)\n    }\n\n  }\n\n  /**\n   * resolve方法\n   * @example Promise.resolve('test').then(function(result){ result // test })\n   * @param value\n   * @returns {Promise}\n   */\n  static resolve(value) {\n    return new Promise((resolve, reject) => {\n      resolve(value)\n    })\n  }\n\n  /**\n   * all方法 当需要许多promise一起执行的时候用，最后返回一个存有所有promise返回值的数组\n   * 当一个promise reject掉了，认为此all方法执行失败，进入reject\n   * @param promises\n   * @returns {Promise}\n   */\n  static all(promises) {\n    if (!Promise.isArray(promises)) throw new TypeError('promises 必须是一个数组')\n\n    /**\n     * 返回一个Promise\n     */\n    return new Promise((resolve, reject) => {\n      let result = [],\n        len = promises.length\n\n      /**\n       * 将所有的返回值存储起来\n       * @param value\n       */\n      function resolveAll(value) {\n        result.push(value)\n\n        if (--len === 0) {\n          resolve(result)\n        }\n      }\n\n      promises.forEach(function (promise) {\n        /**\n         * 将成功后的加入result数组\n         * 一旦有一个失败，则直接返回失败\n         */\n        promise.then(resolveAll, reject)\n      })\n\n    })\n  }\n\n  /**\n   * 方便使用，封装catch方法\n   * @param onRejected\n   */\n  catch(onRejected) {\n    this.then(null, onRejected)\n  }\n\n  /**\n   * 重点方法，then\n   * @param onFulfilled\n   * @param onRejected\n   * @returns {Promise}\n   */\n  then(onFulfilled, onRejected) {\n    /**\n     * 每次执行then都会返回一个promise供链式调用\n     */\n    return new Promise((resolve, reject) => {\n      let returnedValue = Object.create(null)\n      /**\n       * 如果是RESOLVED状态说明执行了过resolve函数，this.value是有值的\n       * e.g. Promise.resolve('resolve').then(function(result){})\n       * 最主要看onFulfilled返回值是什么\n       */\n      /**\n       * _RESOLVED\n       * @param value\n       * @private\n       */\n      function _RESOLVED(value) {\n        /**\n         * 取得onFulfilled的返回值，判断是否返回一个promise\n         * 回调方式的then\n         * @example\n         * new Promise(function(resolve, reject){\n         *  resolve('test')\n         * })\n         *  .then(function(result){\n         *    return new Promise(function(resolve, reject){\n         *      resolve(result + 'test')\n         *    })\n         *      .then()\n         *  })\n         */\n        returnedValue = Promise.isFunction(onFulfilled) && onFulfilled(value) || value\n\n        try {\n          if (returnedValue && returnedValue instanceof Promise) {\n            returnedValue.then((value) => {\n              resolve(value)\n            }, (reason) => {\n              reject(reason)\n            })\n          } else {\n            resolve(returnedValue)\n          }\n\n        } catch (e) {\n          reject(e)\n        }\n      }\n\n      /**\n       * 失败的错误\n       * @param reason\n       * @private\n       */\n      function _REJECTED(reason) {\n        returnedValue = Promise.isFunction(onRejected) && onRejected(reason) || reason\n\n        reject(returnedValue)\n      }\n\n      /**\n       * 直接调用resolve的情况\n       * @example\n       * Promise.resolve('test')\n       *  .then(function() {})\n       */\n\n      if (this._status === 'RESOLVED') {\n        _RESOLVED(this._value)\n\n      } else if (this._status === 'REJECTED') {\n        _REJECTED(this._reason)\n\n      } else if (this._status === 'PENDING') {\n        /**\n         * e.g. new Promise().then(function(result){})\n         */\n        this._deferreds.push(_RESOLVED)\n\n        this._rejecteds.push(_REJECTED)\n      }\n\n    })\n\n  }\n\n}\n/**\n * 将类返回，外面用babel编译\n * @type {Promise}\n */\nmodule.exports = Promise\n```\n","source":"_posts/2017/04/es6版promise.md","raw":"---\ntitle: es6版promise\ncategories: 小轮子\ntags: \n  - javascript\n  - es6\n  - promise\n---\n\n## es6版Promise\n#### 用法\n```\n  new Promise(function(resolve, reject) {\n    resolve('resolve')\n  })\n    .then(function(result) {\n      console.log(result) // resolve\n    })\n```\n#### ``Promise``是一个构造函数，接受一个函数作为参数  \n  这个函数接受两个参数：  \n  (1) resolve 成功的时候返回的数据 （履行承诺）  \n  (2) reject 失败的时候返回的数据 （拒绝承诺）\n#### ``Promise``原型方法\n  (1) ``then``注册成功后的回调  \n  (2) ``catch``注册失败后的回调\n#### 上源代码——由于使用es6所以用babel，[点击看编译过的代码](https://github.com/slipkinem/jsTest/blob/master/promise/final/promise.dist.js)\n```$xslt\nclass util {\n  static isFunction(value) {\n    return typeof value === 'function'\n  }\n\n  static isArray(value) {\n    return Array.isArray(value)\n  }\n}\n\n/**\n * Promise\n * @constructor\n */\nclass Promise extends util {\n  constructor(executor) {\n    /**\n     * 继承绑定，作为context调用父类的constructor\n     */\n    super(executor)\n\n    if (!Promise.isFunction(executor)) throw new TypeError('参数必须是一个函数')\n    /**\n     * @description\n     * 状态分为 PENDING  可以过度到RESOLVED或REJECTED\n     *        RESOLVED\n     *        REJECTED\n     * @type {string}\n     * @private\n     */\n    this._status = 'PENDING'\n    /**\n     * 正确值\n     * @type {Object}\n     * @private\n     */\n    this._value = Object.create(null)\n    /**\n     * 错误值\n     * @type {Object}\n     * @private\n     */\n    this._reason = Object.create(null)\n    /**\n     * 储存错误回调\n     * @type {Array}\n     * @private\n     */\n    this._rejecteds = []\n    /**\n     * 正确回调的方法集 \n     * @type {Array}\n     * @private\n     */\n    this._deferreds = []\n    /**\n     * 在class中 constructor里面的函数无法直接访问this\n     * 为了形成private，所以不放外面\n     * @type {Promise}\n     * @private\n     */\n    let _this = this\n\n    /**\n     * 执行承诺的函数\n     * @param value\n     */\n    function resolve(value) {\n      /**\n       * 异步，为了让then先执行，注册进回调\n       */\n      setTimeout(() => {\n        try {\n          if (_this._status === 'PENDING') {\n            _this._status = 'RESOLVED'\n            _this._value = value\n            /**\n             * 循环执行所有的回调\n             */\n            _this._deferreds.forEach((deferred) => {\n              deferred(value)\n            })\n\n          }\n        } catch (e) {\n          reject(e)\n        }\n\n      })\n    }\n\n    function reject(reason) {\n      setTimeout(() => {\n        try {\n          if (_this._status === 'PENDING') {\n            _this._status = 'REJECTED'\n            _this._reason = reason\n\n            _this._rejecteds.forEach((rejected) => {\n              rejected(reason)\n            })\n          }\n        } catch (e) {\n          reject(e)\n        }\n      })\n    }\n\n    try {\n      executor(resolve, reject)\n    } catch (e) {\n      reject(e)\n    }\n\n  }\n\n  /**\n   * resolve方法\n   * @example Promise.resolve('test').then(function(result){ result // test })\n   * @param value\n   * @returns {Promise}\n   */\n  static resolve(value) {\n    return new Promise((resolve, reject) => {\n      resolve(value)\n    })\n  }\n\n  /**\n   * all方法 当需要许多promise一起执行的时候用，最后返回一个存有所有promise返回值的数组\n   * 当一个promise reject掉了，认为此all方法执行失败，进入reject\n   * @param promises\n   * @returns {Promise}\n   */\n  static all(promises) {\n    if (!Promise.isArray(promises)) throw new TypeError('promises 必须是一个数组')\n\n    /**\n     * 返回一个Promise\n     */\n    return new Promise((resolve, reject) => {\n      let result = [],\n        len = promises.length\n\n      /**\n       * 将所有的返回值存储起来\n       * @param value\n       */\n      function resolveAll(value) {\n        result.push(value)\n\n        if (--len === 0) {\n          resolve(result)\n        }\n      }\n\n      promises.forEach(function (promise) {\n        /**\n         * 将成功后的加入result数组\n         * 一旦有一个失败，则直接返回失败\n         */\n        promise.then(resolveAll, reject)\n      })\n\n    })\n  }\n\n  /**\n   * 方便使用，封装catch方法\n   * @param onRejected\n   */\n  catch(onRejected) {\n    this.then(null, onRejected)\n  }\n\n  /**\n   * 重点方法，then\n   * @param onFulfilled\n   * @param onRejected\n   * @returns {Promise}\n   */\n  then(onFulfilled, onRejected) {\n    /**\n     * 每次执行then都会返回一个promise供链式调用\n     */\n    return new Promise((resolve, reject) => {\n      let returnedValue = Object.create(null)\n      /**\n       * 如果是RESOLVED状态说明执行了过resolve函数，this.value是有值的\n       * e.g. Promise.resolve('resolve').then(function(result){})\n       * 最主要看onFulfilled返回值是什么\n       */\n      /**\n       * _RESOLVED\n       * @param value\n       * @private\n       */\n      function _RESOLVED(value) {\n        /**\n         * 取得onFulfilled的返回值，判断是否返回一个promise\n         * 回调方式的then\n         * @example\n         * new Promise(function(resolve, reject){\n         *  resolve('test')\n         * })\n         *  .then(function(result){\n         *    return new Promise(function(resolve, reject){\n         *      resolve(result + 'test')\n         *    })\n         *      .then()\n         *  })\n         */\n        returnedValue = Promise.isFunction(onFulfilled) && onFulfilled(value) || value\n\n        try {\n          if (returnedValue && returnedValue instanceof Promise) {\n            returnedValue.then((value) => {\n              resolve(value)\n            }, (reason) => {\n              reject(reason)\n            })\n          } else {\n            resolve(returnedValue)\n          }\n\n        } catch (e) {\n          reject(e)\n        }\n      }\n\n      /**\n       * 失败的错误\n       * @param reason\n       * @private\n       */\n      function _REJECTED(reason) {\n        returnedValue = Promise.isFunction(onRejected) && onRejected(reason) || reason\n\n        reject(returnedValue)\n      }\n\n      /**\n       * 直接调用resolve的情况\n       * @example\n       * Promise.resolve('test')\n       *  .then(function() {})\n       */\n\n      if (this._status === 'RESOLVED') {\n        _RESOLVED(this._value)\n\n      } else if (this._status === 'REJECTED') {\n        _REJECTED(this._reason)\n\n      } else if (this._status === 'PENDING') {\n        /**\n         * e.g. new Promise().then(function(result){})\n         */\n        this._deferreds.push(_RESOLVED)\n\n        this._rejecteds.push(_REJECTED)\n      }\n\n    })\n\n  }\n\n}\n/**\n * 将类返回，外面用babel编译\n * @type {Promise}\n */\nmodule.exports = Promise\n```\n","slug":"es6版promise","published":1,"date":"2017-04-14T03:33:55.009Z","updated":"2017-04-13T11:19:32.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1haabos00064cv3vit7e52o","content":"<h2 id=\"es6版Promise\"><a href=\"#es6版Promise\" class=\"headerlink\" title=\"es6版Promise\"></a>es6版Promise</h2><h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  resolve(<span class=\"string\">'resolve'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// resolve</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"Promise是一个构造函数，接受一个函数作为参数\"><a href=\"#Promise是一个构造函数，接受一个函数作为参数\" class=\"headerlink\" title=\"Promise是一个构造函数，接受一个函数作为参数\"></a><code>Promise</code>是一个构造函数，接受一个函数作为参数</h4><p>  这个函数接受两个参数：<br>  (1) resolve 成功的时候返回的数据 （履行承诺）<br>  (2) reject 失败的时候返回的数据 （拒绝承诺）</p>\n<h4 id=\"Promise原型方法\"><a href=\"#Promise原型方法\" class=\"headerlink\" title=\"Promise原型方法\"></a><code>Promise</code>原型方法</h4><p>  (1) <code>then</code>注册成功后的回调<br>  (2) <code>catch</code>注册失败后的回调</p>\n<h4 id=\"上源代码——由于使用es6所以用babel，点击看编译过的代码\"><a href=\"#上源代码——由于使用es6所以用babel，点击看编译过的代码\" class=\"headerlink\" title=\"上源代码——由于使用es6所以用babel，点击看编译过的代码\"></a>上源代码——由于使用es6所以用babel，<a href=\"https://github.com/slipkinem/jsTest/blob/master/promise/final/promise.dist.js\" target=\"_blank\" rel=\"external\">点击看编译过的代码</a></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div></pre></td><td class=\"code\"><pre><div class=\"line\">class util &#123;</div><div class=\"line\">  static isFunction(value) &#123;</div><div class=\"line\">    return typeof value === &apos;function&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  static isArray(value) &#123;</div><div class=\"line\">    return Array.isArray(value)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Promise</div><div class=\"line\"> * @constructor</div><div class=\"line\"> */</div><div class=\"line\">class Promise extends util &#123;</div><div class=\"line\">  constructor(executor) &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 继承绑定，作为context调用父类的constructor</div><div class=\"line\">     */</div><div class=\"line\">    super(executor)</div><div class=\"line\"></div><div class=\"line\">    if (!Promise.isFunction(executor)) throw new TypeError(&apos;参数必须是一个函数&apos;)</div><div class=\"line\">    /**</div><div class=\"line\">     * @description</div><div class=\"line\">     * 状态分为 PENDING  可以过度到RESOLVED或REJECTED</div><div class=\"line\">     *        RESOLVED</div><div class=\"line\">     *        REJECTED</div><div class=\"line\">     * @type &#123;string&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._status = &apos;PENDING&apos;</div><div class=\"line\">    /**</div><div class=\"line\">     * 正确值</div><div class=\"line\">     * @type &#123;Object&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._value = Object.create(null)</div><div class=\"line\">    /**</div><div class=\"line\">     * 错误值</div><div class=\"line\">     * @type &#123;Object&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._reason = Object.create(null)</div><div class=\"line\">    /**</div><div class=\"line\">     * 储存错误回调</div><div class=\"line\">     * @type &#123;Array&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._rejecteds = []</div><div class=\"line\">    /**</div><div class=\"line\">     * 正确回调的方法集 </div><div class=\"line\">     * @type &#123;Array&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._deferreds = []</div><div class=\"line\">    /**</div><div class=\"line\">     * 在class中 constructor里面的函数无法直接访问this</div><div class=\"line\">     * 为了形成private，所以不放外面</div><div class=\"line\">     * @type &#123;Promise&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    let _this = this</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 执行承诺的函数</div><div class=\"line\">     * @param value</div><div class=\"line\">     */</div><div class=\"line\">    function resolve(value) &#123;</div><div class=\"line\">      /**</div><div class=\"line\">       * 异步，为了让then先执行，注册进回调</div><div class=\"line\">       */</div><div class=\"line\">      setTimeout(() =&gt; &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">          if (_this._status === &apos;PENDING&apos;) &#123;</div><div class=\"line\">            _this._status = &apos;RESOLVED&apos;</div><div class=\"line\">            _this._value = value</div><div class=\"line\">            /**</div><div class=\"line\">             * 循环执行所有的回调</div><div class=\"line\">             */</div><div class=\"line\">            _this._deferreds.forEach((deferred) =&gt; &#123;</div><div class=\"line\">              deferred(value)</div><div class=\"line\">            &#125;)</div><div class=\"line\"></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125; catch (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function reject(reason) &#123;</div><div class=\"line\">      setTimeout(() =&gt; &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">          if (_this._status === &apos;PENDING&apos;) &#123;</div><div class=\"line\">            _this._status = &apos;REJECTED&apos;</div><div class=\"line\">            _this._reason = reason</div><div class=\"line\"></div><div class=\"line\">            _this._rejecteds.forEach((rejected) =&gt; &#123;</div><div class=\"line\">              rejected(reason)</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125; catch (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    try &#123;</div><div class=\"line\">      executor(resolve, reject)</div><div class=\"line\">    &#125; catch (e) &#123;</div><div class=\"line\">      reject(e)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * resolve方法</div><div class=\"line\">   * @example Promise.resolve(&apos;test&apos;).then(function(result)&#123; result // test &#125;)</div><div class=\"line\">   * @param value</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  static resolve(value) &#123;</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">      resolve(value)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * all方法 当需要许多promise一起执行的时候用，最后返回一个存有所有promise返回值的数组</div><div class=\"line\">   * 当一个promise reject掉了，认为此all方法执行失败，进入reject</div><div class=\"line\">   * @param promises</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  static all(promises) &#123;</div><div class=\"line\">    if (!Promise.isArray(promises)) throw new TypeError(&apos;promises 必须是一个数组&apos;)</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 返回一个Promise</div><div class=\"line\">     */</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">      let result = [],</div><div class=\"line\">        len = promises.length</div><div class=\"line\"></div><div class=\"line\">      /**</div><div class=\"line\">       * 将所有的返回值存储起来</div><div class=\"line\">       * @param value</div><div class=\"line\">       */</div><div class=\"line\">      function resolveAll(value) &#123;</div><div class=\"line\">        result.push(value)</div><div class=\"line\"></div><div class=\"line\">        if (--len === 0) &#123;</div><div class=\"line\">          resolve(result)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      promises.forEach(function (promise) &#123;</div><div class=\"line\">        /**</div><div class=\"line\">         * 将成功后的加入result数组</div><div class=\"line\">         * 一旦有一个失败，则直接返回失败</div><div class=\"line\">         */</div><div class=\"line\">        promise.then(resolveAll, reject)</div><div class=\"line\">      &#125;)</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * 方便使用，封装catch方法</div><div class=\"line\">   * @param onRejected</div><div class=\"line\">   */</div><div class=\"line\">  catch(onRejected) &#123;</div><div class=\"line\">    this.then(null, onRejected)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * 重点方法，then</div><div class=\"line\">   * @param onFulfilled</div><div class=\"line\">   * @param onRejected</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  then(onFulfilled, onRejected) &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 每次执行then都会返回一个promise供链式调用</div><div class=\"line\">     */</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">      let returnedValue = Object.create(null)</div><div class=\"line\">      /**</div><div class=\"line\">       * 如果是RESOLVED状态说明执行了过resolve函数，this.value是有值的</div><div class=\"line\">       * e.g. Promise.resolve(&apos;resolve&apos;).then(function(result)&#123;&#125;)</div><div class=\"line\">       * 最主要看onFulfilled返回值是什么</div><div class=\"line\">       */</div><div class=\"line\">      /**</div><div class=\"line\">       * _RESOLVED</div><div class=\"line\">       * @param value</div><div class=\"line\">       * @private</div><div class=\"line\">       */</div><div class=\"line\">      function _RESOLVED(value) &#123;</div><div class=\"line\">        /**</div><div class=\"line\">         * 取得onFulfilled的返回值，判断是否返回一个promise</div><div class=\"line\">         * 回调方式的then</div><div class=\"line\">         * @example</div><div class=\"line\">         * new Promise(function(resolve, reject)&#123;</div><div class=\"line\">         *  resolve(&apos;test&apos;)</div><div class=\"line\">         * &#125;)</div><div class=\"line\">         *  .then(function(result)&#123;</div><div class=\"line\">         *    return new Promise(function(resolve, reject)&#123;</div><div class=\"line\">         *      resolve(result + &apos;test&apos;)</div><div class=\"line\">         *    &#125;)</div><div class=\"line\">         *      .then()</div><div class=\"line\">         *  &#125;)</div><div class=\"line\">         */</div><div class=\"line\">        returnedValue = Promise.isFunction(onFulfilled) &amp;&amp; onFulfilled(value) || value</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">          if (returnedValue &amp;&amp; returnedValue instanceof Promise) &#123;</div><div class=\"line\">            returnedValue.then((value) =&gt; &#123;</div><div class=\"line\">              resolve(value)</div><div class=\"line\">            &#125;, (reason) =&gt; &#123;</div><div class=\"line\">              reject(reason)</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125; else &#123;</div><div class=\"line\">            resolve(returnedValue)</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125; catch (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      /**</div><div class=\"line\">       * 失败的错误</div><div class=\"line\">       * @param reason</div><div class=\"line\">       * @private</div><div class=\"line\">       */</div><div class=\"line\">      function _REJECTED(reason) &#123;</div><div class=\"line\">        returnedValue = Promise.isFunction(onRejected) &amp;&amp; onRejected(reason) || reason</div><div class=\"line\"></div><div class=\"line\">        reject(returnedValue)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      /**</div><div class=\"line\">       * 直接调用resolve的情况</div><div class=\"line\">       * @example</div><div class=\"line\">       * Promise.resolve(&apos;test&apos;)</div><div class=\"line\">       *  .then(function() &#123;&#125;)</div><div class=\"line\">       */</div><div class=\"line\"></div><div class=\"line\">      if (this._status === &apos;RESOLVED&apos;) &#123;</div><div class=\"line\">        _RESOLVED(this._value)</div><div class=\"line\"></div><div class=\"line\">      &#125; else if (this._status === &apos;REJECTED&apos;) &#123;</div><div class=\"line\">        _REJECTED(this._reason)</div><div class=\"line\"></div><div class=\"line\">      &#125; else if (this._status === &apos;PENDING&apos;) &#123;</div><div class=\"line\">        /**</div><div class=\"line\">         * e.g. new Promise().then(function(result)&#123;&#125;)</div><div class=\"line\">         */</div><div class=\"line\">        this._deferreds.push(_RESOLVED)</div><div class=\"line\"></div><div class=\"line\">        this._rejecteds.push(_REJECTED)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">/**</div><div class=\"line\"> * 将类返回，外面用babel编译</div><div class=\"line\"> * @type &#123;Promise&#125;</div><div class=\"line\"> */</div><div class=\"line\">module.exports = Promise</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"es6版Promise\"><a href=\"#es6版Promise\" class=\"headerlink\" title=\"es6版Promise\"></a>es6版Promise</h2><h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  resolve(<span class=\"string\">'resolve'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// resolve</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"Promise是一个构造函数，接受一个函数作为参数\"><a href=\"#Promise是一个构造函数，接受一个函数作为参数\" class=\"headerlink\" title=\"Promise是一个构造函数，接受一个函数作为参数\"></a><code>Promise</code>是一个构造函数，接受一个函数作为参数</h4><p>  这个函数接受两个参数：<br>  (1) resolve 成功的时候返回的数据 （履行承诺）<br>  (2) reject 失败的时候返回的数据 （拒绝承诺）</p>\n<h4 id=\"Promise原型方法\"><a href=\"#Promise原型方法\" class=\"headerlink\" title=\"Promise原型方法\"></a><code>Promise</code>原型方法</h4><p>  (1) <code>then</code>注册成功后的回调<br>  (2) <code>catch</code>注册失败后的回调</p>\n<h4 id=\"上源代码——由于使用es6所以用babel，点击看编译过的代码\"><a href=\"#上源代码——由于使用es6所以用babel，点击看编译过的代码\" class=\"headerlink\" title=\"上源代码——由于使用es6所以用babel，点击看编译过的代码\"></a>上源代码——由于使用es6所以用babel，<a href=\"https://github.com/slipkinem/jsTest/blob/master/promise/final/promise.dist.js\">点击看编译过的代码</a></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div></pre></td><td class=\"code\"><pre><div class=\"line\">class util &#123;</div><div class=\"line\">  static isFunction(value) &#123;</div><div class=\"line\">    return typeof value === &apos;function&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  static isArray(value) &#123;</div><div class=\"line\">    return Array.isArray(value)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Promise</div><div class=\"line\"> * @constructor</div><div class=\"line\"> */</div><div class=\"line\">class Promise extends util &#123;</div><div class=\"line\">  constructor(executor) &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 继承绑定，作为context调用父类的constructor</div><div class=\"line\">     */</div><div class=\"line\">    super(executor)</div><div class=\"line\"></div><div class=\"line\">    if (!Promise.isFunction(executor)) throw new TypeError(&apos;参数必须是一个函数&apos;)</div><div class=\"line\">    /**</div><div class=\"line\">     * @description</div><div class=\"line\">     * 状态分为 PENDING  可以过度到RESOLVED或REJECTED</div><div class=\"line\">     *        RESOLVED</div><div class=\"line\">     *        REJECTED</div><div class=\"line\">     * @type &#123;string&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._status = &apos;PENDING&apos;</div><div class=\"line\">    /**</div><div class=\"line\">     * 正确值</div><div class=\"line\">     * @type &#123;Object&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._value = Object.create(null)</div><div class=\"line\">    /**</div><div class=\"line\">     * 错误值</div><div class=\"line\">     * @type &#123;Object&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._reason = Object.create(null)</div><div class=\"line\">    /**</div><div class=\"line\">     * 储存错误回调</div><div class=\"line\">     * @type &#123;Array&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._rejecteds = []</div><div class=\"line\">    /**</div><div class=\"line\">     * 正确回调的方法集 </div><div class=\"line\">     * @type &#123;Array&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._deferreds = []</div><div class=\"line\">    /**</div><div class=\"line\">     * 在class中 constructor里面的函数无法直接访问this</div><div class=\"line\">     * 为了形成private，所以不放外面</div><div class=\"line\">     * @type &#123;Promise&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    let _this = this</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 执行承诺的函数</div><div class=\"line\">     * @param value</div><div class=\"line\">     */</div><div class=\"line\">    function resolve(value) &#123;</div><div class=\"line\">      /**</div><div class=\"line\">       * 异步，为了让then先执行，注册进回调</div><div class=\"line\">       */</div><div class=\"line\">      setTimeout(() =&gt; &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">          if (_this._status === &apos;PENDING&apos;) &#123;</div><div class=\"line\">            _this._status = &apos;RESOLVED&apos;</div><div class=\"line\">            _this._value = value</div><div class=\"line\">            /**</div><div class=\"line\">             * 循环执行所有的回调</div><div class=\"line\">             */</div><div class=\"line\">            _this._deferreds.forEach((deferred) =&gt; &#123;</div><div class=\"line\">              deferred(value)</div><div class=\"line\">            &#125;)</div><div class=\"line\"></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125; catch (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function reject(reason) &#123;</div><div class=\"line\">      setTimeout(() =&gt; &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">          if (_this._status === &apos;PENDING&apos;) &#123;</div><div class=\"line\">            _this._status = &apos;REJECTED&apos;</div><div class=\"line\">            _this._reason = reason</div><div class=\"line\"></div><div class=\"line\">            _this._rejecteds.forEach((rejected) =&gt; &#123;</div><div class=\"line\">              rejected(reason)</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125; catch (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    try &#123;</div><div class=\"line\">      executor(resolve, reject)</div><div class=\"line\">    &#125; catch (e) &#123;</div><div class=\"line\">      reject(e)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * resolve方法</div><div class=\"line\">   * @example Promise.resolve(&apos;test&apos;).then(function(result)&#123; result // test &#125;)</div><div class=\"line\">   * @param value</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  static resolve(value) &#123;</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">      resolve(value)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * all方法 当需要许多promise一起执行的时候用，最后返回一个存有所有promise返回值的数组</div><div class=\"line\">   * 当一个promise reject掉了，认为此all方法执行失败，进入reject</div><div class=\"line\">   * @param promises</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  static all(promises) &#123;</div><div class=\"line\">    if (!Promise.isArray(promises)) throw new TypeError(&apos;promises 必须是一个数组&apos;)</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 返回一个Promise</div><div class=\"line\">     */</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">      let result = [],</div><div class=\"line\">        len = promises.length</div><div class=\"line\"></div><div class=\"line\">      /**</div><div class=\"line\">       * 将所有的返回值存储起来</div><div class=\"line\">       * @param value</div><div class=\"line\">       */</div><div class=\"line\">      function resolveAll(value) &#123;</div><div class=\"line\">        result.push(value)</div><div class=\"line\"></div><div class=\"line\">        if (--len === 0) &#123;</div><div class=\"line\">          resolve(result)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      promises.forEach(function (promise) &#123;</div><div class=\"line\">        /**</div><div class=\"line\">         * 将成功后的加入result数组</div><div class=\"line\">         * 一旦有一个失败，则直接返回失败</div><div class=\"line\">         */</div><div class=\"line\">        promise.then(resolveAll, reject)</div><div class=\"line\">      &#125;)</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * 方便使用，封装catch方法</div><div class=\"line\">   * @param onRejected</div><div class=\"line\">   */</div><div class=\"line\">  catch(onRejected) &#123;</div><div class=\"line\">    this.then(null, onRejected)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * 重点方法，then</div><div class=\"line\">   * @param onFulfilled</div><div class=\"line\">   * @param onRejected</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  then(onFulfilled, onRejected) &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 每次执行then都会返回一个promise供链式调用</div><div class=\"line\">     */</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">      let returnedValue = Object.create(null)</div><div class=\"line\">      /**</div><div class=\"line\">       * 如果是RESOLVED状态说明执行了过resolve函数，this.value是有值的</div><div class=\"line\">       * e.g. Promise.resolve(&apos;resolve&apos;).then(function(result)&#123;&#125;)</div><div class=\"line\">       * 最主要看onFulfilled返回值是什么</div><div class=\"line\">       */</div><div class=\"line\">      /**</div><div class=\"line\">       * _RESOLVED</div><div class=\"line\">       * @param value</div><div class=\"line\">       * @private</div><div class=\"line\">       */</div><div class=\"line\">      function _RESOLVED(value) &#123;</div><div class=\"line\">        /**</div><div class=\"line\">         * 取得onFulfilled的返回值，判断是否返回一个promise</div><div class=\"line\">         * 回调方式的then</div><div class=\"line\">         * @example</div><div class=\"line\">         * new Promise(function(resolve, reject)&#123;</div><div class=\"line\">         *  resolve(&apos;test&apos;)</div><div class=\"line\">         * &#125;)</div><div class=\"line\">         *  .then(function(result)&#123;</div><div class=\"line\">         *    return new Promise(function(resolve, reject)&#123;</div><div class=\"line\">         *      resolve(result + &apos;test&apos;)</div><div class=\"line\">         *    &#125;)</div><div class=\"line\">         *      .then()</div><div class=\"line\">         *  &#125;)</div><div class=\"line\">         */</div><div class=\"line\">        returnedValue = Promise.isFunction(onFulfilled) &amp;&amp; onFulfilled(value) || value</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">          if (returnedValue &amp;&amp; returnedValue instanceof Promise) &#123;</div><div class=\"line\">            returnedValue.then((value) =&gt; &#123;</div><div class=\"line\">              resolve(value)</div><div class=\"line\">            &#125;, (reason) =&gt; &#123;</div><div class=\"line\">              reject(reason)</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125; else &#123;</div><div class=\"line\">            resolve(returnedValue)</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125; catch (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      /**</div><div class=\"line\">       * 失败的错误</div><div class=\"line\">       * @param reason</div><div class=\"line\">       * @private</div><div class=\"line\">       */</div><div class=\"line\">      function _REJECTED(reason) &#123;</div><div class=\"line\">        returnedValue = Promise.isFunction(onRejected) &amp;&amp; onRejected(reason) || reason</div><div class=\"line\"></div><div class=\"line\">        reject(returnedValue)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      /**</div><div class=\"line\">       * 直接调用resolve的情况</div><div class=\"line\">       * @example</div><div class=\"line\">       * Promise.resolve(&apos;test&apos;)</div><div class=\"line\">       *  .then(function() &#123;&#125;)</div><div class=\"line\">       */</div><div class=\"line\"></div><div class=\"line\">      if (this._status === &apos;RESOLVED&apos;) &#123;</div><div class=\"line\">        _RESOLVED(this._value)</div><div class=\"line\"></div><div class=\"line\">      &#125; else if (this._status === &apos;REJECTED&apos;) &#123;</div><div class=\"line\">        _REJECTED(this._reason)</div><div class=\"line\"></div><div class=\"line\">      &#125; else if (this._status === &apos;PENDING&apos;) &#123;</div><div class=\"line\">        /**</div><div class=\"line\">         * e.g. new Promise().then(function(result)&#123;&#125;)</div><div class=\"line\">         */</div><div class=\"line\">        this._deferreds.push(_RESOLVED)</div><div class=\"line\"></div><div class=\"line\">        this._rejecteds.push(_REJECTED)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">/**</div><div class=\"line\"> * 将类返回，外面用babel编译</div><div class=\"line\"> * @type &#123;Promise&#125;</div><div class=\"line\"> */</div><div class=\"line\">module.exports = Promise</div></pre></td></tr></table></figure>\n"},{"title":"java SSM和vue整合","_content":"\n# SSM整合流程\n## spring spring-mvc mybatis maven\n## web前端项目的源码[vue-admin](https://github.com/slipkinem/vue-admin)\n## 数据库的sql文件[vue_admin.sql](vue_admin.sql)\n\n### IDE idea\n1. File => new Project => maven => create from archetype => **maven-archetype-webapp**  \n![1](1.png)\n2. 一直点击next直到finished，maven会自动创建一个项目目录  \n![2](2.png)\n  * 最终项目目录结构图  \n<!-- more -->\n```$xslt\n│  .gitignore\n│  pom.xml\n│  README.md\n│  tree.txt\n│  \n├─src\n│  └─main\n│      ├─java\n│      │  └─cn\n│      │      └─lvsen\n│      │          └─test\n│      │              ├─controller\n│      │              │      TableController.java\n│      │              │      UserController.java\n│      │              │      \n│      │              ├─dao\n│      │              │      TableDataMapper.java\n│      │              │      UserMapper.java\n│      │              │      \n│      │              ├─interceptor\n│      │              │      AuthInterceptor.java\n│      │              │      \n│      │              ├─mapping\n│      │              │      TableDataMapper.xml\n│      │              │      UserMapper.xml\n│      │              │      \n│      │              ├─model\n│      │              │      TableData.java\n│      │              │      TableDataExample.java\n│      │              │      User.java\n│      │              │      UserExample.java\n│      │              │      \n│      │              └─service\n│      │                  │  TableService.java\n│      │                  │  UserService.java\n│      │                  │  \n│      │                  └─impl\n│      │                          TableServiceImpl.java\n│      │                          UserServiceImpl.java\n│      │                          \n│      ├─resources\n│      │  │  generatorConfig.xml\n│      │  │  jdbc.properties\n│      │  │  logback.xml.bak\n│      │  │  \n│      │  └─spring\n│      │          spring-mvc.xml\n│      │          spring-mybatis.xml\n│      │          \n│      └─webapp\n│          │  index.html\n│          │  index.jsp\n│          │  \n│          ├─static\n│          │  ├─css\n│          │  │      app.f3c8e005c2be0a746136766675898059.css\n│          │  │      app.f3c8e005c2be0a746136766675898059.css.gz\n│          │  │      \n│          │  ├─fonts\n│          │  │      element-icons.b02bdc1.ttf\n│          │  │      \n│          │  └─js\n│          │          0.105cd4667842b0092158.js\n│          │          1.3f78774435db7aa5de2a.js\n│          │          app.3ec6fa4bebfb1bb58a2b.js\n│          │          app.3ec6fa4bebfb1bb58a2b.js.gz\n│          │          manifest.b0bb778337a7d07c6313.js\n│          │          vendor.bbf93d5282d3216eb30e.js\n│          │          vendor.bbf93d5282d3216eb30e.js.gz\n│          │          \n│          └─WEB-INF\n│                  web.xml\n│                  \n└─test\n        TestHello.java\n```\n3. 在创建的POM里面添加依赖  \n    pom.xml\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>article</groupId>\n  <artifactId>article</artifactId>\n  <packaging>war</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>article Maven Webapp</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n    <spring.version>4.2.5.RELEASE</spring.version>\n  </properties>\n\n  <dependencies>\n    <!--测试-->\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n      <scope>test</scope>\n    </dependency>\n    <!--spring-->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-core</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- jdbc连接池 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-jdbc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 事务管理 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-tx</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!--spring测试用-->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-test</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 注解扫描 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- MVC -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-webmvc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 切面，将日志记录，事务等分离开来 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-aop</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- mybatis和spring结合用 -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis-spring</artifactId>\n      <version>1.2.4</version>\n    </dependency>\n    <!-- mysql连接驱动 -->\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>5.1.38</version>\n    </dependency>\n    <!-- 连接数据库 -->\n    <dependency>\n      <groupId>commons-dbcp</groupId>\n      <artifactId>commons-dbcp</artifactId>\n      <version>1.4</version>\n    </dependency>\n  <!-- mybatis -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis</artifactId>\n      <version>3.3.1</version>\n    </dependency>\n    <!-- 转换json用 -->\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>fastjson</artifactId>\n      <version>1.2.7</version>\n    </dependency>\n    <!-- jackson转换json用 @ResponseBody默认调用jackson，将java对象转为json -->\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-core</artifactId>\n      <version>2.8.7</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-annotations</artifactId>\n      <version>2.8.0</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-databind</artifactId>\n      <version>2.8.7</version>\n    </dependency>\n    <!-- 分页插件 -->\n    <dependency>\n      <groupId>com.github.pagehelper</groupId>\n      <artifactId>pagehelper</artifactId>\n      <version>5.0.0</version>\n    </dependency>\n    <!-- javaHttp基础包 -->\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>3.1.0</version>\n    </dependency>\n    <!-- 日志 -->\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-api</artifactId>\n      <version>1.7.24</version>\n    </dependency>\n    <!-- slf4j要配合其他日志包运行，slf4j起个管理的作用 -->\n    <dependency>\n      <groupId>ch.qos.logback</groupId>\n      <artifactId>logback-classic</artifactId>\n      <version>1.1.11</version>\n    </dependency>\n\n  </dependencies>\n\n\n  <build>\n    <finalName>article</finalName>\n    <!-- 防止package打包不到XML-->\n    <resources>\n      <resource>\n        <directory>src/main/java</directory>\n        <includes>\n          <include>**/*.xml</include>\n        </includes>\n        <filtering>true</filtering>\n      </resource>\n    </resources>\n\n    <plugins>\n      <!-- mybatis生成代码插件 -->\n      <plugin>\n        <groupId>org.mybatis.generator</groupId>\n        <artifactId>mybatis-generator-maven-plugin</artifactId>\n        <version>1.3.5</version>\n        <configuration>\n          <!-- 生成文件的配置 -->\n          <configurationFile>src/main/resources/generatorConfig.xml</configurationFile>\n          <verbose>true</verbose>\n          <overwrite>true</overwrite>\n        </configuration>\n      </plugin>\n      <plugin>\n        <!-- maven插件 -->\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <source>1.6</source>\n          <target>1.6</target>\n        </configuration>\n      </plugin>\n    </plugins>\n\n  </build>\n</project>\n```\n4. 配置mybatisGeneratorConfig，需要连接数据库，\n    将准备的sql文件导入数据库中[vue_admin.sql](vue_admin.sql)  \ngeneratorConfig.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n    PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n    \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n\n  <!--<properties resource=\"jdbc.properties\"/>-->\n\n  <!--连接mysql的jar包-->\n  <classPathEntry\n      location=\"C:/Users/**/.m2/repository/mysql/mysql-connector-java/5.1.29/mysql-connector-java-5.1.29.jar\" />\n\n  <context id=\"default\" targetRuntime=\"MyBatis3\">\n    <!-- jdbc连接 -->\n    <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\"\n                    connectionURL=\"jdbc:mysql://localhost:3306/vue_admin\"\n                    userId=\"**\"\n                    password=\"**\"/>\n    <!-- 生成model =》 数据层 -->\n    <javaModelGenerator targetPackage=\"cn.lvsen.test.model\" targetProject=\"src/main/java\">\n    </javaModelGenerator>\n    <!-- 生成mapper 存有mybatis的数据库操作xml -->\n    <sqlMapGenerator targetPackage=\"cn.lvsen.test.mapping\" targetProject=\"src/main/java\">\n    </sqlMapGenerator>\n    <!-- 存有mappper的接口类，mybatis会自动生成实体类，将mapper和dao连接起来 -->\n    <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"cn.lvsen.test.dao\" targetProject=\"src/main/java\">\n    </javaClientGenerator>\n    <!-- 表的名字 -->\n    <table tableName=\"t_table\" domainObjectName=\"TableData\"/>\n    <table tableName=\"t_user\" domainObjectName=\"User\" />\n  </context>\n</generatorConfiguration>\n```\n5. 配置resources/spring/spring-mvc.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n\n  <!--扫描包，查注解-->\n  <context:component-scan base-package=\"cn.lvsen.test\"/>\n\n  <!--映射器与适配器，去掉@ResponseBody就会出问题-->\n  <mvc:annotation-driven/>\n  <!-- 静态资源放置地 -->\n  <mvc:resources mapping=\"/**\" location=\"static\" />\n  <!--<mvc:resources mapping=\"/css/**\" location=\"static\" />-->\n  <mvc:default-servlet-handler />\n  <!-- 拦截器 -->\n  <mvc:interceptors>\n    <mvc:interceptor>\n      <mvc:mapping path=\"/api/**\"/>\n      <bean class=\"cn.lvsen.test.interceptor.AuthInterceptor\"/>\n    </mvc:interceptor>\n  </mvc:interceptors>\n  <!-- 视图 -->\n  <bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"\n        p:prefix=\"/\" p:suffix=\".html\"/>\n</beans>\n```\n6. 配置resources/spring/spring-mybatis.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n  <!--引入jdbc的配置文件-->\n  <bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n    <property name=\"location\" value=\"classpath:jdbc.properties\" />\n  </bean>\n  <!--jdbc连接数据库基本配置-->\n  <bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n    <property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n    <property name=\"url\" value=\"${jdbc.url}\" />\n    <property name=\"username\" value=\"${jdbc.username}\" />\n    <property name=\"password\" value=\"${jdbc.password}\" />\n  </bean>\n  <!--spring和mybatis结合的配置-->\n  <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <property name=\"mapperLocations\" value=\"classpath:cn/lvsen/test/mapping/*Mapper.xml\" />\n    <property name=\"plugins\">\n      <array>\n        <bean class=\"com.github.pagehelper.PageInterceptor\">\n          <!--少了这句话会导致空指针异常-->\n          <property name=\"properties\">\n            <value></value>\n          </property>\n        </bean>\n      </array>\n    </property>\n  </bean>\n\n  <!--dao接口，sping会自动查找其中的类 dao ——> 数据访问层 dao映射的mapper，去掉启动报错-->\n  <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n    <property name=\"basePackage\" value=\"cn.lvsen.test.dao\"/>\n    <!--对应上面id=\"sqlSessionFactory\"-->\n    <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\" />\n  </bean>\n</beans>\n```\n\n7. spring-mybatis.xml配置时用了**jdbc.properties**这是为了方便管理连接  \n    resources/jdbc.properties的配置\n```\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/vue_admin?useUnicode=true&characterEncoding=UTF-8\njdbc.username=**\njdbc.password=**\n```\n8. web.xml配置，web.xml是这个web项目的入口  \n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://java.sun.com/xml/ns/javaee\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n         version=\"3.0\">\n  <display-name>Archetype Created Web Application</display-name>\n  <!--spring和mybatis的配置文件-->\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:spring/spring-mybatis.xml</param-value>\n  </context-param>\n\n  <!--spring监听器-->\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n\n  <!--解决乱码-->\n  <filter>\n    <filter-name>SpringEncodingFilter</filter-name>\n    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n    <init-param>\n      <param-name>encoding</param-name>\n      <param-value>UTF-8</param-value>\n    </init-param>\n    <init-param>\n      <param-name>forceEncoding</param-name>\n      <param-value>true</param-value>\n    </init-param>\n  </filter>\n  <!--映射的路径-->\n  <filter-mapping>\n    <filter-name>SpringEncodingFilter</filter-name>\n    <url-pattern>/</url-pattern>\n  </filter-mapping>\n  <!-- 声明静态资源类型，加入spring扫描 -->\n  <servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>*.html</url-pattern>\n  </servlet-mapping>\n\n  <!--spring MVC 核心分发器-->\n  <servlet>\n    <servlet-name>SpringMvc</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>classpath:spring/spring-mvc.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>SpringMvc</servlet-name>\n    <url-pattern>/</url-pattern>\n  </servlet-mapping>\n  <!-- 首页，可以多个，根据顺来显示-->\n  <welcome-file-list>\n    <welcome-file>index.html</welcome-file>\n  </welcome-file-list>\n</web-app>\n```\n\n9. SSM基本配置完了，其他功能需要的时候再加，现在新建文件夹  \n  * java/cn.xx.xx/controller  // controller层\n  * java/cn.xx.xx/service // service层\n  * java/cn.xx.xx/service/impl // service层接口的实现类\n  * webapp/index.html\n\n10. 在controller里面新建一个UserController类，  \n进行restAPI的书写,api使用url: **api/user/hello**\n```$xslt\n@Controller\n@RequestMapping(\"api/user\")\npublic class UserController {\n\n    @RequestMapping(value = \"hello\", method = RequestMethod.GET) \n    @ResponseBody // 要返回json数据\n    public Map login(HttpSession httpSession) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        \n        try {\n          map.put(\"errorCode\", 0);\n          map.put(\"message\", \"hello\");\n        } catch (Exception e) {\n            map.put(\"errorCode\", 1);\n            map.put(\"errorMessage\", \"未知错误\");\n        }\n        return map;\n    }\n```\n\n11. 一个接口写好，然后配置服务器启动项目  \n  1.![3](3.png)  \n  2.![4](4.png)  \n  3.![5](5.png)  \n  然后点击**apply** => **OK**  \n项目启动，打开地址栏，追加输入**api/user/hello**，拿到数据OK，后台走通\n\n### 前端部分\n12. 后台暂时放置，开始写前端**[前端部分代码](https://github.com/slipkinem/vue-admin)**\n#### 前端框架用的VUE，UI框架用的饿了么开源的element_ui\n  * 总概况：vue+vue-router+vue-resource+vuex+element_ui\n13. **用npm下载vue-cli**\n  * 用vue-cli生成webpack项目骨架\n  * npm install 下载所有依赖\n14. ","source":"_posts/2017/04/java-ssm.md","raw":"---\ntitle: java SSM和vue整合\ncategories: 课外学习\ntags:\n  - java\n  - ssm\n  - javascript\n---\n\n# SSM整合流程\n## spring spring-mvc mybatis maven\n## web前端项目的源码[vue-admin](https://github.com/slipkinem/vue-admin)\n## 数据库的sql文件[vue_admin.sql](vue_admin.sql)\n\n### IDE idea\n1. File => new Project => maven => create from archetype => **maven-archetype-webapp**  \n![1](1.png)\n2. 一直点击next直到finished，maven会自动创建一个项目目录  \n![2](2.png)\n  * 最终项目目录结构图  \n<!-- more -->\n```$xslt\n│  .gitignore\n│  pom.xml\n│  README.md\n│  tree.txt\n│  \n├─src\n│  └─main\n│      ├─java\n│      │  └─cn\n│      │      └─lvsen\n│      │          └─test\n│      │              ├─controller\n│      │              │      TableController.java\n│      │              │      UserController.java\n│      │              │      \n│      │              ├─dao\n│      │              │      TableDataMapper.java\n│      │              │      UserMapper.java\n│      │              │      \n│      │              ├─interceptor\n│      │              │      AuthInterceptor.java\n│      │              │      \n│      │              ├─mapping\n│      │              │      TableDataMapper.xml\n│      │              │      UserMapper.xml\n│      │              │      \n│      │              ├─model\n│      │              │      TableData.java\n│      │              │      TableDataExample.java\n│      │              │      User.java\n│      │              │      UserExample.java\n│      │              │      \n│      │              └─service\n│      │                  │  TableService.java\n│      │                  │  UserService.java\n│      │                  │  \n│      │                  └─impl\n│      │                          TableServiceImpl.java\n│      │                          UserServiceImpl.java\n│      │                          \n│      ├─resources\n│      │  │  generatorConfig.xml\n│      │  │  jdbc.properties\n│      │  │  logback.xml.bak\n│      │  │  \n│      │  └─spring\n│      │          spring-mvc.xml\n│      │          spring-mybatis.xml\n│      │          \n│      └─webapp\n│          │  index.html\n│          │  index.jsp\n│          │  \n│          ├─static\n│          │  ├─css\n│          │  │      app.f3c8e005c2be0a746136766675898059.css\n│          │  │      app.f3c8e005c2be0a746136766675898059.css.gz\n│          │  │      \n│          │  ├─fonts\n│          │  │      element-icons.b02bdc1.ttf\n│          │  │      \n│          │  └─js\n│          │          0.105cd4667842b0092158.js\n│          │          1.3f78774435db7aa5de2a.js\n│          │          app.3ec6fa4bebfb1bb58a2b.js\n│          │          app.3ec6fa4bebfb1bb58a2b.js.gz\n│          │          manifest.b0bb778337a7d07c6313.js\n│          │          vendor.bbf93d5282d3216eb30e.js\n│          │          vendor.bbf93d5282d3216eb30e.js.gz\n│          │          \n│          └─WEB-INF\n│                  web.xml\n│                  \n└─test\n        TestHello.java\n```\n3. 在创建的POM里面添加依赖  \n    pom.xml\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>article</groupId>\n  <artifactId>article</artifactId>\n  <packaging>war</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>article Maven Webapp</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n    <spring.version>4.2.5.RELEASE</spring.version>\n  </properties>\n\n  <dependencies>\n    <!--测试-->\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n      <scope>test</scope>\n    </dependency>\n    <!--spring-->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-core</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- jdbc连接池 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-jdbc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 事务管理 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-tx</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!--spring测试用-->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-test</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 注解扫描 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- MVC -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-webmvc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 切面，将日志记录，事务等分离开来 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-aop</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- mybatis和spring结合用 -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis-spring</artifactId>\n      <version>1.2.4</version>\n    </dependency>\n    <!-- mysql连接驱动 -->\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>5.1.38</version>\n    </dependency>\n    <!-- 连接数据库 -->\n    <dependency>\n      <groupId>commons-dbcp</groupId>\n      <artifactId>commons-dbcp</artifactId>\n      <version>1.4</version>\n    </dependency>\n  <!-- mybatis -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis</artifactId>\n      <version>3.3.1</version>\n    </dependency>\n    <!-- 转换json用 -->\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>fastjson</artifactId>\n      <version>1.2.7</version>\n    </dependency>\n    <!-- jackson转换json用 @ResponseBody默认调用jackson，将java对象转为json -->\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-core</artifactId>\n      <version>2.8.7</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-annotations</artifactId>\n      <version>2.8.0</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-databind</artifactId>\n      <version>2.8.7</version>\n    </dependency>\n    <!-- 分页插件 -->\n    <dependency>\n      <groupId>com.github.pagehelper</groupId>\n      <artifactId>pagehelper</artifactId>\n      <version>5.0.0</version>\n    </dependency>\n    <!-- javaHttp基础包 -->\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>3.1.0</version>\n    </dependency>\n    <!-- 日志 -->\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-api</artifactId>\n      <version>1.7.24</version>\n    </dependency>\n    <!-- slf4j要配合其他日志包运行，slf4j起个管理的作用 -->\n    <dependency>\n      <groupId>ch.qos.logback</groupId>\n      <artifactId>logback-classic</artifactId>\n      <version>1.1.11</version>\n    </dependency>\n\n  </dependencies>\n\n\n  <build>\n    <finalName>article</finalName>\n    <!-- 防止package打包不到XML-->\n    <resources>\n      <resource>\n        <directory>src/main/java</directory>\n        <includes>\n          <include>**/*.xml</include>\n        </includes>\n        <filtering>true</filtering>\n      </resource>\n    </resources>\n\n    <plugins>\n      <!-- mybatis生成代码插件 -->\n      <plugin>\n        <groupId>org.mybatis.generator</groupId>\n        <artifactId>mybatis-generator-maven-plugin</artifactId>\n        <version>1.3.5</version>\n        <configuration>\n          <!-- 生成文件的配置 -->\n          <configurationFile>src/main/resources/generatorConfig.xml</configurationFile>\n          <verbose>true</verbose>\n          <overwrite>true</overwrite>\n        </configuration>\n      </plugin>\n      <plugin>\n        <!-- maven插件 -->\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <source>1.6</source>\n          <target>1.6</target>\n        </configuration>\n      </plugin>\n    </plugins>\n\n  </build>\n</project>\n```\n4. 配置mybatisGeneratorConfig，需要连接数据库，\n    将准备的sql文件导入数据库中[vue_admin.sql](vue_admin.sql)  \ngeneratorConfig.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n    PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n    \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n\n  <!--<properties resource=\"jdbc.properties\"/>-->\n\n  <!--连接mysql的jar包-->\n  <classPathEntry\n      location=\"C:/Users/**/.m2/repository/mysql/mysql-connector-java/5.1.29/mysql-connector-java-5.1.29.jar\" />\n\n  <context id=\"default\" targetRuntime=\"MyBatis3\">\n    <!-- jdbc连接 -->\n    <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\"\n                    connectionURL=\"jdbc:mysql://localhost:3306/vue_admin\"\n                    userId=\"**\"\n                    password=\"**\"/>\n    <!-- 生成model =》 数据层 -->\n    <javaModelGenerator targetPackage=\"cn.lvsen.test.model\" targetProject=\"src/main/java\">\n    </javaModelGenerator>\n    <!-- 生成mapper 存有mybatis的数据库操作xml -->\n    <sqlMapGenerator targetPackage=\"cn.lvsen.test.mapping\" targetProject=\"src/main/java\">\n    </sqlMapGenerator>\n    <!-- 存有mappper的接口类，mybatis会自动生成实体类，将mapper和dao连接起来 -->\n    <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"cn.lvsen.test.dao\" targetProject=\"src/main/java\">\n    </javaClientGenerator>\n    <!-- 表的名字 -->\n    <table tableName=\"t_table\" domainObjectName=\"TableData\"/>\n    <table tableName=\"t_user\" domainObjectName=\"User\" />\n  </context>\n</generatorConfiguration>\n```\n5. 配置resources/spring/spring-mvc.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n\n  <!--扫描包，查注解-->\n  <context:component-scan base-package=\"cn.lvsen.test\"/>\n\n  <!--映射器与适配器，去掉@ResponseBody就会出问题-->\n  <mvc:annotation-driven/>\n  <!-- 静态资源放置地 -->\n  <mvc:resources mapping=\"/**\" location=\"static\" />\n  <!--<mvc:resources mapping=\"/css/**\" location=\"static\" />-->\n  <mvc:default-servlet-handler />\n  <!-- 拦截器 -->\n  <mvc:interceptors>\n    <mvc:interceptor>\n      <mvc:mapping path=\"/api/**\"/>\n      <bean class=\"cn.lvsen.test.interceptor.AuthInterceptor\"/>\n    </mvc:interceptor>\n  </mvc:interceptors>\n  <!-- 视图 -->\n  <bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"\n        p:prefix=\"/\" p:suffix=\".html\"/>\n</beans>\n```\n6. 配置resources/spring/spring-mybatis.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n  <!--引入jdbc的配置文件-->\n  <bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n    <property name=\"location\" value=\"classpath:jdbc.properties\" />\n  </bean>\n  <!--jdbc连接数据库基本配置-->\n  <bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n    <property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n    <property name=\"url\" value=\"${jdbc.url}\" />\n    <property name=\"username\" value=\"${jdbc.username}\" />\n    <property name=\"password\" value=\"${jdbc.password}\" />\n  </bean>\n  <!--spring和mybatis结合的配置-->\n  <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <property name=\"mapperLocations\" value=\"classpath:cn/lvsen/test/mapping/*Mapper.xml\" />\n    <property name=\"plugins\">\n      <array>\n        <bean class=\"com.github.pagehelper.PageInterceptor\">\n          <!--少了这句话会导致空指针异常-->\n          <property name=\"properties\">\n            <value></value>\n          </property>\n        </bean>\n      </array>\n    </property>\n  </bean>\n\n  <!--dao接口，sping会自动查找其中的类 dao ——> 数据访问层 dao映射的mapper，去掉启动报错-->\n  <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n    <property name=\"basePackage\" value=\"cn.lvsen.test.dao\"/>\n    <!--对应上面id=\"sqlSessionFactory\"-->\n    <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\" />\n  </bean>\n</beans>\n```\n\n7. spring-mybatis.xml配置时用了**jdbc.properties**这是为了方便管理连接  \n    resources/jdbc.properties的配置\n```\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/vue_admin?useUnicode=true&characterEncoding=UTF-8\njdbc.username=**\njdbc.password=**\n```\n8. web.xml配置，web.xml是这个web项目的入口  \n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://java.sun.com/xml/ns/javaee\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n         version=\"3.0\">\n  <display-name>Archetype Created Web Application</display-name>\n  <!--spring和mybatis的配置文件-->\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:spring/spring-mybatis.xml</param-value>\n  </context-param>\n\n  <!--spring监听器-->\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n\n  <!--解决乱码-->\n  <filter>\n    <filter-name>SpringEncodingFilter</filter-name>\n    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n    <init-param>\n      <param-name>encoding</param-name>\n      <param-value>UTF-8</param-value>\n    </init-param>\n    <init-param>\n      <param-name>forceEncoding</param-name>\n      <param-value>true</param-value>\n    </init-param>\n  </filter>\n  <!--映射的路径-->\n  <filter-mapping>\n    <filter-name>SpringEncodingFilter</filter-name>\n    <url-pattern>/</url-pattern>\n  </filter-mapping>\n  <!-- 声明静态资源类型，加入spring扫描 -->\n  <servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>*.html</url-pattern>\n  </servlet-mapping>\n\n  <!--spring MVC 核心分发器-->\n  <servlet>\n    <servlet-name>SpringMvc</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>classpath:spring/spring-mvc.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>SpringMvc</servlet-name>\n    <url-pattern>/</url-pattern>\n  </servlet-mapping>\n  <!-- 首页，可以多个，根据顺来显示-->\n  <welcome-file-list>\n    <welcome-file>index.html</welcome-file>\n  </welcome-file-list>\n</web-app>\n```\n\n9. SSM基本配置完了，其他功能需要的时候再加，现在新建文件夹  \n  * java/cn.xx.xx/controller  // controller层\n  * java/cn.xx.xx/service // service层\n  * java/cn.xx.xx/service/impl // service层接口的实现类\n  * webapp/index.html\n\n10. 在controller里面新建一个UserController类，  \n进行restAPI的书写,api使用url: **api/user/hello**\n```$xslt\n@Controller\n@RequestMapping(\"api/user\")\npublic class UserController {\n\n    @RequestMapping(value = \"hello\", method = RequestMethod.GET) \n    @ResponseBody // 要返回json数据\n    public Map login(HttpSession httpSession) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        \n        try {\n          map.put(\"errorCode\", 0);\n          map.put(\"message\", \"hello\");\n        } catch (Exception e) {\n            map.put(\"errorCode\", 1);\n            map.put(\"errorMessage\", \"未知错误\");\n        }\n        return map;\n    }\n```\n\n11. 一个接口写好，然后配置服务器启动项目  \n  1.![3](3.png)  \n  2.![4](4.png)  \n  3.![5](5.png)  \n  然后点击**apply** => **OK**  \n项目启动，打开地址栏，追加输入**api/user/hello**，拿到数据OK，后台走通\n\n### 前端部分\n12. 后台暂时放置，开始写前端**[前端部分代码](https://github.com/slipkinem/vue-admin)**\n#### 前端框架用的VUE，UI框架用的饿了么开源的element_ui\n  * 总概况：vue+vue-router+vue-resource+vuex+element_ui\n13. **用npm下载vue-cli**\n  * 用vue-cli生成webpack项目骨架\n  * npm install 下载所有依赖\n14. ","slug":"java-ssm","published":1,"date":"2017-04-14T03:29:07.892Z","updated":"2017-04-14T03:23:58.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1haabov00074cv3055f2ckn","content":"<h1 id=\"SSM整合流程\"><a href=\"#SSM整合流程\" class=\"headerlink\" title=\"SSM整合流程\"></a>SSM整合流程</h1><h2 id=\"spring-spring-mvc-mybatis-maven\"><a href=\"#spring-spring-mvc-mybatis-maven\" class=\"headerlink\" title=\"spring spring-mvc mybatis maven\"></a>spring spring-mvc mybatis maven</h2><h2 id=\"web前端项目的源码vue-admin\"><a href=\"#web前端项目的源码vue-admin\" class=\"headerlink\" title=\"web前端项目的源码vue-admin\"></a>web前端项目的源码<a href=\"https://github.com/slipkinem/vue-admin\" target=\"_blank\" rel=\"external\">vue-admin</a></h2><h2 id=\"数据库的sql文件vue-admin-sql\"><a href=\"#数据库的sql文件vue-admin-sql\" class=\"headerlink\" title=\"数据库的sql文件vue_admin.sql\"></a>数据库的sql文件<a href=\"vue_admin.sql\">vue_admin.sql</a></h2><h3 id=\"IDE-idea\"><a href=\"#IDE-idea\" class=\"headerlink\" title=\"IDE idea\"></a>IDE idea</h3><ol>\n<li>File =&gt; new Project =&gt; maven =&gt; create from archetype =&gt; <strong>maven-archetype-webapp</strong><br><img src=\"/2017/04/14/java-ssm/1.png\" alt=\"1\"></li>\n<li><p>一直点击next直到finished，maven会自动创建一个项目目录<br><img src=\"/2017/04/14/java-ssm/2.png\" alt=\"2\"></p>\n<ul>\n<li>最终项目目录结构图  <a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\">│  .gitignore</div><div class=\"line\">│  pom.xml</div><div class=\"line\">│  README.md</div><div class=\"line\">│  tree.txt</div><div class=\"line\">│  </div><div class=\"line\">├─src</div><div class=\"line\">│  └─main</div><div class=\"line\">│      ├─java</div><div class=\"line\">│      │  └─cn</div><div class=\"line\">│      │      └─lvsen</div><div class=\"line\">│      │          └─test</div><div class=\"line\">│      │              ├─controller</div><div class=\"line\">│      │              │      TableController.java</div><div class=\"line\">│      │              │      UserController.java</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─dao</div><div class=\"line\">│      │              │      TableDataMapper.java</div><div class=\"line\">│      │              │      UserMapper.java</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─interceptor</div><div class=\"line\">│      │              │      AuthInterceptor.java</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─mapping</div><div class=\"line\">│      │              │      TableDataMapper.xml</div><div class=\"line\">│      │              │      UserMapper.xml</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─model</div><div class=\"line\">│      │              │      TableData.java</div><div class=\"line\">│      │              │      TableDataExample.java</div><div class=\"line\">│      │              │      User.java</div><div class=\"line\">│      │              │      UserExample.java</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              └─service</div><div class=\"line\">│      │                  │  TableService.java</div><div class=\"line\">│      │                  │  UserService.java</div><div class=\"line\">│      │                  │  </div><div class=\"line\">│      │                  └─impl</div><div class=\"line\">│      │                          TableServiceImpl.java</div><div class=\"line\">│      │                          UserServiceImpl.java</div><div class=\"line\">│      │                          </div><div class=\"line\">│      ├─resources</div><div class=\"line\">│      │  │  generatorConfig.xml</div><div class=\"line\">│      │  │  jdbc.properties</div><div class=\"line\">│      │  │  logback.xml.bak</div><div class=\"line\">│      │  │  </div><div class=\"line\">│      │  └─spring</div><div class=\"line\">│      │          spring-mvc.xml</div><div class=\"line\">│      │          spring-mybatis.xml</div><div class=\"line\">│      │          </div><div class=\"line\">│      └─webapp</div><div class=\"line\">│          │  index.html</div><div class=\"line\">│          │  index.jsp</div><div class=\"line\">│          │  </div><div class=\"line\">│          ├─static</div><div class=\"line\">│          │  ├─css</div><div class=\"line\">│          │  │      app.f3c8e005c2be0a746136766675898059.css</div><div class=\"line\">│          │  │      app.f3c8e005c2be0a746136766675898059.css.gz</div><div class=\"line\">│          │  │      </div><div class=\"line\">│          │  ├─fonts</div><div class=\"line\">│          │  │      element-icons.b02bdc1.ttf</div><div class=\"line\">│          │  │      </div><div class=\"line\">│          │  └─js</div><div class=\"line\">│          │          0.105cd4667842b0092158.js</div><div class=\"line\">│          │          1.3f78774435db7aa5de2a.js</div><div class=\"line\">│          │          app.3ec6fa4bebfb1bb58a2b.js</div><div class=\"line\">│          │          app.3ec6fa4bebfb1bb58a2b.js.gz</div><div class=\"line\">│          │          manifest.b0bb778337a7d07c6313.js</div><div class=\"line\">│          │          vendor.bbf93d5282d3216eb30e.js</div><div class=\"line\">│          │          vendor.bbf93d5282d3216eb30e.js.gz</div><div class=\"line\">│          │          </div><div class=\"line\">│          └─WEB-INF</div><div class=\"line\">│                  web.xml</div><div class=\"line\">│                  </div><div class=\"line\">└─test</div><div class=\"line\">        TestHello.java</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>在创建的POM里面添加依赖<br> pom.xml</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span></div><div class=\"line\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>article Maven Webapp<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>4.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--测试--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--spring--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jdbc连接池 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 事务管理 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--spring测试用--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 注解扫描 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- MVC --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 切面，将日志记录，事务等分离开来 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- mybatis和spring结合用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- mysql连接驱动 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.38<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 连接数据库 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- mybatis --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 转换json用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jackson转换json用 @ResponseBody默认调用jackson，将java对象转为json --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 分页插件 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- javaHttp基础包 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 日志 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.24<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j要配合其他日志包运行，slf4j起个管理的作用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 防止package打包不到XML--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!-- mybatis生成代码插件 --&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!-- 生成文件的配置 --&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class=\"tag\">&lt;/<span class=\"name\">configurationFile</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">verbose</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">verbose</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">overwrite</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">overwrite</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- maven插件 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置mybatisGeneratorConfig，需要连接数据库，<br> 将准备的sql文件导入数据库中<a href=\"vue_admin.sql\">vue_admin.sql</a><br>generatorConfig.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration</span></div><div class=\"line\">    PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</div><div class=\"line\">    \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--&lt;properties resource=\"jdbc.properties\"/&gt;--&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--连接mysql的jar包--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">classPathEntry</span></span></div><div class=\"line\">      <span class=\"attr\">location</span>=<span class=\"string\">\"C:/Users/**/.m2/repository/mysql/mysql-connector-java/5.1.29/mysql-connector-java-5.1.29.jar\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jdbc连接 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span></span></div><div class=\"line\">                    <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"jdbc:mysql://localhost:3306/vue_admin\"</span></div><div class=\"line\">                    <span class=\"attr\">userId</span>=<span class=\"string\">\"**\"</span></div><div class=\"line\">                    <span class=\"attr\">password</span>=<span class=\"string\">\"**\"</span>/&gt;</div><div class=\"line\">    <span class=\"comment\">&lt;!-- 生成model =》 数据层 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.model\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 生成mapper 存有mybatis的数据库操作xml --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.mapping\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 存有mappper的接口类，mybatis会自动生成实体类，将mapper和dao连接起来 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.dao\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 表的名字 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_table\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"TableData\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_user\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"User\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置resources/spring/spring-mvc.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></div><div class=\"line\">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--扫描包，查注解--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"cn.lvsen.test\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--映射器与适配器，去掉@ResponseBody就会出问题--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 静态资源放置地 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/**\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"static\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--&lt;mvc:resources mapping=\"/css/**\" location=\"static\" /&gt;--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span> /&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 拦截器 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/api/**\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.lvsen.test.interceptor.AuthInterceptor\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 视图 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"viewResolver\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span></span></div><div class=\"line\">        <span class=\"attr\">p:prefix</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">p:suffix</span>=<span class=\"string\">\".html\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置resources/spring/spring-mybatis.xml</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</div><div class=\"line\">  <span class=\"comment\">&lt;!--引入jdbc的配置文件--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"propertyConfigurer\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"location\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:jdbc.properties\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--jdbc连接数据库基本配置--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.driver&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.url&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.username&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.password&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring和mybatis结合的配置--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:cn/lvsen/test/mapping/*Mapper.xml\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"plugins\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.github.pagehelper.PageInterceptor\"</span>&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!--少了这句话会导致空指针异常--&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"properties\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--dao接口，sping会自动查找其中的类 dao ——&gt; 数据访问层 dao映射的mapper，去掉启动报错--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"cn.lvsen.test.dao\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--对应上面id=\"sqlSessionFactory\"--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>spring-mybatis.xml配置时用了<strong>jdbc.properties</strong>这是为了方便管理连接<br> resources/jdbc.properties的配置</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">jdbc.<span class=\"attr\">driver=com.mysql.jdbc.Driver</span></div><div class=\"line\">jdbc.<span class=\"attr\">url=jdbc:mysql://localhost:3306/vue_admin?useUnicode=true&amp;characterEncoding=UTF-8</span></div><div class=\"line\">jdbc.<span class=\"attr\">username=**</span></div><div class=\"line\">jdbc.<span class=\"attr\">password=**</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>web.xml配置，web.xml是这个web项目的入口  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span> <span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span></div><div class=\"line\">         <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>Archetype Created Web Application<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring和mybatis的配置文件--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-mybatis.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring监听器--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--解决乱码--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>SpringEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>forceEncoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--映射的路径--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>SpringEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 声明静态资源类型，加入spring扫描 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.html<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring MVC 核心分发器--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>SpringMvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>SpringMvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 首页，可以多个，根据顺来显示--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.html<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>SSM基本配置完了，其他功能需要的时候再加，现在新建文件夹  </p>\n<ul>\n<li>java/cn.xx.xx/controller  // controller层</li>\n<li>java/cn.xx.xx/service // service层</li>\n<li>java/cn.xx.xx/service/impl // service层接口的实现类</li>\n<li>webapp/index.html</li>\n</ul>\n</li>\n<li><p>在controller里面新建一个UserController类，<br>进行restAPI的书写,api使用url: <strong>api/user/hello</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Controller</div><div class=\"line\">@RequestMapping(&quot;api/user&quot;)</div><div class=\"line\">public class UserController &#123;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(value = &quot;hello&quot;, method = RequestMethod.GET) </div><div class=\"line\">    @ResponseBody // 要返回json数据</div><div class=\"line\">    public Map login(HttpSession httpSession) &#123;</div><div class=\"line\">        Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</div><div class=\"line\">        </div><div class=\"line\">        try &#123;</div><div class=\"line\">          map.put(&quot;errorCode&quot;, 0);</div><div class=\"line\">          map.put(&quot;message&quot;, &quot;hello&quot;);</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            map.put(&quot;errorCode&quot;, 1);</div><div class=\"line\">            map.put(&quot;errorMessage&quot;, &quot;未知错误&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return map;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>一个接口写好，然后配置服务器启动项目<br>1.<img src=\"/2017/04/14/java-ssm/3.png\" alt=\"3\"><br>2.<img src=\"/2017/04/14/java-ssm/4.png\" alt=\"4\"><br>3.<img src=\"/2017/04/14/java-ssm/5.png\" alt=\"5\"><br>然后点击<strong>apply</strong> =&gt; <strong>OK</strong><br>项目启动，打开地址栏，追加输入<strong>api/user/hello</strong>，拿到数据OK，后台走通</p>\n</li>\n</ol>\n<h3 id=\"前端部分\"><a href=\"#前端部分\" class=\"headerlink\" title=\"前端部分\"></a>前端部分</h3><ol>\n<li>后台暂时放置，开始写前端<strong><a href=\"https://github.com/slipkinem/vue-admin\" target=\"_blank\" rel=\"external\">前端部分代码</a></strong><h4 id=\"前端框架用的VUE，UI框架用的饿了么开源的element-ui\"><a href=\"#前端框架用的VUE，UI框架用的饿了么开源的element-ui\" class=\"headerlink\" title=\"前端框架用的VUE，UI框架用的饿了么开源的element_ui\"></a>前端框架用的VUE，UI框架用的饿了么开源的element_ui</h4><ul>\n<li>总概况：vue+vue-router+vue-resource+vuex+element_ui</li>\n</ul>\n</li>\n<li><strong>用npm下载vue-cli</strong><ul>\n<li>用vue-cli生成webpack项目骨架</li>\n<li>npm install 下载所有依赖</li>\n</ul>\n</li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"SSM整合流程\"><a href=\"#SSM整合流程\" class=\"headerlink\" title=\"SSM整合流程\"></a>SSM整合流程</h1><h2 id=\"spring-spring-mvc-mybatis-maven\"><a href=\"#spring-spring-mvc-mybatis-maven\" class=\"headerlink\" title=\"spring spring-mvc mybatis maven\"></a>spring spring-mvc mybatis maven</h2><h2 id=\"web前端项目的源码vue-admin\"><a href=\"#web前端项目的源码vue-admin\" class=\"headerlink\" title=\"web前端项目的源码vue-admin\"></a>web前端项目的源码<a href=\"https://github.com/slipkinem/vue-admin\">vue-admin</a></h2><h2 id=\"数据库的sql文件vue-admin-sql\"><a href=\"#数据库的sql文件vue-admin-sql\" class=\"headerlink\" title=\"数据库的sql文件vue_admin.sql\"></a>数据库的sql文件<a href=\"vue_admin.sql\">vue_admin.sql</a></h2><h3 id=\"IDE-idea\"><a href=\"#IDE-idea\" class=\"headerlink\" title=\"IDE idea\"></a>IDE idea</h3><ol>\n<li>File =&gt; new Project =&gt; maven =&gt; create from archetype =&gt; <strong>maven-archetype-webapp</strong><br><img src=\"/2017/04/14/java-ssm/1.png\" alt=\"1\"></li>\n<li><p>一直点击next直到finished，maven会自动创建一个项目目录<br><img src=\"/2017/04/14/java-ssm/2.png\" alt=\"2\"></p>\n<ul>\n<li>最终项目目录结构图</li></ul></li></ol>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\">│  .gitignore</div><div class=\"line\">│  pom.xml</div><div class=\"line\">│  README.md</div><div class=\"line\">│  tree.txt</div><div class=\"line\">│  </div><div class=\"line\">├─src</div><div class=\"line\">│  └─main</div><div class=\"line\">│      ├─java</div><div class=\"line\">│      │  └─cn</div><div class=\"line\">│      │      └─lvsen</div><div class=\"line\">│      │          └─test</div><div class=\"line\">│      │              ├─controller</div><div class=\"line\">│      │              │      TableController.java</div><div class=\"line\">│      │              │      UserController.java</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─dao</div><div class=\"line\">│      │              │      TableDataMapper.java</div><div class=\"line\">│      │              │      UserMapper.java</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─interceptor</div><div class=\"line\">│      │              │      AuthInterceptor.java</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─mapping</div><div class=\"line\">│      │              │      TableDataMapper.xml</div><div class=\"line\">│      │              │      UserMapper.xml</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─model</div><div class=\"line\">│      │              │      TableData.java</div><div class=\"line\">│      │              │      TableDataExample.java</div><div class=\"line\">│      │              │      User.java</div><div class=\"line\">│      │              │      UserExample.java</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              └─service</div><div class=\"line\">│      │                  │  TableService.java</div><div class=\"line\">│      │                  │  UserService.java</div><div class=\"line\">│      │                  │  </div><div class=\"line\">│      │                  └─impl</div><div class=\"line\">│      │                          TableServiceImpl.java</div><div class=\"line\">│      │                          UserServiceImpl.java</div><div class=\"line\">│      │                          </div><div class=\"line\">│      ├─resources</div><div class=\"line\">│      │  │  generatorConfig.xml</div><div class=\"line\">│      │  │  jdbc.properties</div><div class=\"line\">│      │  │  logback.xml.bak</div><div class=\"line\">│      │  │  </div><div class=\"line\">│      │  └─spring</div><div class=\"line\">│      │          spring-mvc.xml</div><div class=\"line\">│      │          spring-mybatis.xml</div><div class=\"line\">│      │          </div><div class=\"line\">│      └─webapp</div><div class=\"line\">│          │  index.html</div><div class=\"line\">│          │  index.jsp</div><div class=\"line\">│          │  </div><div class=\"line\">│          ├─static</div><div class=\"line\">│          │  ├─css</div><div class=\"line\">│          │  │      app.f3c8e005c2be0a746136766675898059.css</div><div class=\"line\">│          │  │      app.f3c8e005c2be0a746136766675898059.css.gz</div><div class=\"line\">│          │  │      </div><div class=\"line\">│          │  ├─fonts</div><div class=\"line\">│          │  │      element-icons.b02bdc1.ttf</div><div class=\"line\">│          │  │      </div><div class=\"line\">│          │  └─js</div><div class=\"line\">│          │          0.105cd4667842b0092158.js</div><div class=\"line\">│          │          1.3f78774435db7aa5de2a.js</div><div class=\"line\">│          │          app.3ec6fa4bebfb1bb58a2b.js</div><div class=\"line\">│          │          app.3ec6fa4bebfb1bb58a2b.js.gz</div><div class=\"line\">│          │          manifest.b0bb778337a7d07c6313.js</div><div class=\"line\">│          │          vendor.bbf93d5282d3216eb30e.js</div><div class=\"line\">│          │          vendor.bbf93d5282d3216eb30e.js.gz</div><div class=\"line\">│          │          </div><div class=\"line\">│          └─WEB-INF</div><div class=\"line\">│                  web.xml</div><div class=\"line\">│                  </div><div class=\"line\">└─test</div><div class=\"line\">        TestHello.java</div></pre></td></tr></table></figure>\n\n\n\n<li><p>在创建的POM里面添加依赖<br> pom.xml</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span></div><div class=\"line\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>article Maven Webapp<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>4.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--测试--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--spring--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jdbc连接池 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 事务管理 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--spring测试用--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 注解扫描 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- MVC --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 切面，将日志记录，事务等分离开来 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- mybatis和spring结合用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- mysql连接驱动 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.38<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 连接数据库 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- mybatis --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 转换json用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jackson转换json用 @ResponseBody默认调用jackson，将java对象转为json --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 分页插件 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- javaHttp基础包 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 日志 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.24<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j要配合其他日志包运行，slf4j起个管理的作用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 防止package打包不到XML--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!-- mybatis生成代码插件 --&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!-- 生成文件的配置 --&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class=\"tag\">&lt;/<span class=\"name\">configurationFile</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">verbose</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">verbose</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">overwrite</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">overwrite</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- maven插件 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置mybatisGeneratorConfig，需要连接数据库，<br> 将准备的sql文件导入数据库中<a href=\"vue_admin.sql\">vue_admin.sql</a><br>generatorConfig.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration</span></div><div class=\"line\">    PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</div><div class=\"line\">    \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--&lt;properties resource=\"jdbc.properties\"/&gt;--&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--连接mysql的jar包--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">classPathEntry</span></span></div><div class=\"line\">      <span class=\"attr\">location</span>=<span class=\"string\">\"C:/Users/**/.m2/repository/mysql/mysql-connector-java/5.1.29/mysql-connector-java-5.1.29.jar\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jdbc连接 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span></span></div><div class=\"line\">                    <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"jdbc:mysql://localhost:3306/vue_admin\"</span></div><div class=\"line\">                    <span class=\"attr\">userId</span>=<span class=\"string\">\"**\"</span></div><div class=\"line\">                    <span class=\"attr\">password</span>=<span class=\"string\">\"**\"</span>/&gt;</div><div class=\"line\">    <span class=\"comment\">&lt;!-- 生成model =》 数据层 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.model\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 生成mapper 存有mybatis的数据库操作xml --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.mapping\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 存有mappper的接口类，mybatis会自动生成实体类，将mapper和dao连接起来 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.dao\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 表的名字 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_table\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"TableData\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_user\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"User\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置resources/spring/spring-mvc.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></div><div class=\"line\">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--扫描包，查注解--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"cn.lvsen.test\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--映射器与适配器，去掉@ResponseBody就会出问题--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 静态资源放置地 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/**\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"static\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--&lt;mvc:resources mapping=\"/css/**\" location=\"static\" /&gt;--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span> /&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 拦截器 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/api/**\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.lvsen.test.interceptor.AuthInterceptor\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 视图 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"viewResolver\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span></span></div><div class=\"line\">        <span class=\"attr\">p:prefix</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">p:suffix</span>=<span class=\"string\">\".html\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置resources/spring/spring-mybatis.xml</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</div><div class=\"line\">  <span class=\"comment\">&lt;!--引入jdbc的配置文件--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"propertyConfigurer\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"location\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:jdbc.properties\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--jdbc连接数据库基本配置--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.driver&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.url&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.username&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.password&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring和mybatis结合的配置--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:cn/lvsen/test/mapping/*Mapper.xml\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"plugins\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.github.pagehelper.PageInterceptor\"</span>&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!--少了这句话会导致空指针异常--&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"properties\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--dao接口，sping会自动查找其中的类 dao ——&gt; 数据访问层 dao映射的mapper，去掉启动报错--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"cn.lvsen.test.dao\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--对应上面id=\"sqlSessionFactory\"--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>spring-mybatis.xml配置时用了<strong>jdbc.properties</strong>这是为了方便管理连接<br> resources/jdbc.properties的配置</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">jdbc.<span class=\"attr\">driver=com.mysql.jdbc.Driver</span></div><div class=\"line\">jdbc.<span class=\"attr\">url=jdbc:mysql://localhost:3306/vue_admin?useUnicode=true&amp;characterEncoding=UTF-8</span></div><div class=\"line\">jdbc.<span class=\"attr\">username=**</span></div><div class=\"line\">jdbc.<span class=\"attr\">password=**</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>web.xml配置，web.xml是这个web项目的入口  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span> <span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span></div><div class=\"line\">         <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>Archetype Created Web Application<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring和mybatis的配置文件--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-mybatis.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring监听器--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--解决乱码--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>SpringEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>forceEncoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--映射的路径--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>SpringEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 声明静态资源类型，加入spring扫描 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.html<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring MVC 核心分发器--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>SpringMvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>SpringMvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 首页，可以多个，根据顺来显示--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.html<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>SSM基本配置完了，其他功能需要的时候再加，现在新建文件夹  </p>\n<ul>\n<li>java/cn.xx.xx/controller  // controller层</li>\n<li>java/cn.xx.xx/service // service层</li>\n<li>java/cn.xx.xx/service/impl // service层接口的实现类</li>\n<li>webapp/index.html</li>\n</ul>\n</li>\n<li><p>在controller里面新建一个UserController类，<br>进行restAPI的书写,api使用url: <strong>api/user/hello</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Controller</div><div class=\"line\">@RequestMapping(&quot;api/user&quot;)</div><div class=\"line\">public class UserController &#123;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(value = &quot;hello&quot;, method = RequestMethod.GET) </div><div class=\"line\">    @ResponseBody // 要返回json数据</div><div class=\"line\">    public Map login(HttpSession httpSession) &#123;</div><div class=\"line\">        Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</div><div class=\"line\">        </div><div class=\"line\">        try &#123;</div><div class=\"line\">          map.put(&quot;errorCode&quot;, 0);</div><div class=\"line\">          map.put(&quot;message&quot;, &quot;hello&quot;);</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            map.put(&quot;errorCode&quot;, 1);</div><div class=\"line\">            map.put(&quot;errorMessage&quot;, &quot;未知错误&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return map;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>一个接口写好，然后配置服务器启动项目<br>1.<img src=\"/2017/04/14/java-ssm/3.png\" alt=\"3\"><br>2.<img src=\"/2017/04/14/java-ssm/4.png\" alt=\"4\"><br>3.<img src=\"/2017/04/14/java-ssm/5.png\" alt=\"5\"><br>然后点击<strong>apply</strong> =&gt; <strong>OK</strong><br>项目启动，打开地址栏，追加输入<strong>api/user/hello</strong>，拿到数据OK，后台走通</p>\n</li>\n\n<h3 id=\"前端部分\"><a href=\"#前端部分\" class=\"headerlink\" title=\"前端部分\"></a>前端部分</h3><ol>\n<li>后台暂时放置，开始写前端<strong><a href=\"https://github.com/slipkinem/vue-admin\">前端部分代码</a></strong><h4 id=\"前端框架用的VUE，UI框架用的饿了么开源的element-ui\"><a href=\"#前端框架用的VUE，UI框架用的饿了么开源的element-ui\" class=\"headerlink\" title=\"前端框架用的VUE，UI框架用的饿了么开源的element_ui\"></a>前端框架用的VUE，UI框架用的饿了么开源的element_ui</h4><ul>\n<li>总概况：vue+vue-router+vue-resource+vuex+element_ui</li>\n</ul>\n</li>\n<li><strong>用npm下载vue-cli</strong><ul>\n<li>用vue-cli生成webpack项目骨架</li>\n<li>npm install 下载所有依赖</li>\n</ul>\n</li>\n<li></li>\n</ol>"},{"title":"java用jdbc，servelet的一个小问题","_content":"\n1. 在用jdbc连接数据库的时候碰见一个tomcat抛得错误，  \n``java.lang.ClassNotFoundException: com.mysql.jdbc.Driver`` ，  \n感觉不对，我已经在idea的Modules里面添加了mysql.jar的包，在测试的时候连接是正常的。  \n原来要将mysql驱动包复制到tomcat的lib文件夹。  \n2. 在连接驱动包的时候碰见这种写法``Class.forName(\"com.mysql.jdbc.Driver\")``  \n原来这种写法是注册mysql依赖包，等同于``DriverManager.registerDriver(new com.mysql.jdbc.Driver());``\n3. maven：为了让依赖好管理， mybatis：为了让DML更简单，spring：为了让servlet更好用","source":"_posts/2017/04/java用jdbc-servelet时的问题.md","raw":"---\ntitle: java用jdbc，servelet的一个小问题\ncategories: exception\ntags:\n  - java\n---\n\n1. 在用jdbc连接数据库的时候碰见一个tomcat抛得错误，  \n``java.lang.ClassNotFoundException: com.mysql.jdbc.Driver`` ，  \n感觉不对，我已经在idea的Modules里面添加了mysql.jar的包，在测试的时候连接是正常的。  \n原来要将mysql驱动包复制到tomcat的lib文件夹。  \n2. 在连接驱动包的时候碰见这种写法``Class.forName(\"com.mysql.jdbc.Driver\")``  \n原来这种写法是注册mysql依赖包，等同于``DriverManager.registerDriver(new com.mysql.jdbc.Driver());``\n3. maven：为了让依赖好管理， mybatis：为了让DML更简单，spring：为了让servlet更好用","slug":"java用jdbc-servelet时的问题","published":1,"date":"2017-04-14T03:34:50.157Z","updated":"2017-04-13T09:49:59.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1haabp200094cv38pmkt6jn","content":"<ol>\n<li>在用jdbc连接数据库的时候碰见一个tomcat抛得错误，<br><code>java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</code> ，<br>感觉不对，我已经在idea的Modules里面添加了mysql.jar的包，在测试的时候连接是正常的。<br>原来要将mysql驱动包复制到tomcat的lib文件夹。  </li>\n<li>在连接驱动包的时候碰见这种写法<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code><br>原来这种写法是注册mysql依赖包，等同于<code>DriverManager.registerDriver(new com.mysql.jdbc.Driver());</code></li>\n<li>maven：为了让依赖好管理， mybatis：为了让DML更简单，spring：为了让servlet更好用</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>在用jdbc连接数据库的时候碰见一个tomcat抛得错误，<br><code>java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</code> ，<br>感觉不对，我已经在idea的Modules里面添加了mysql.jar的包，在测试的时候连接是正常的。<br>原来要将mysql驱动包复制到tomcat的lib文件夹。  </li>\n<li>在连接驱动包的时候碰见这种写法<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code><br>原来这种写法是注册mysql依赖包，等同于<code>DriverManager.registerDriver(new com.mysql.jdbc.Driver());</code></li>\n<li>maven：为了让依赖好管理， mybatis：为了让DML更简单，spring：为了让servlet更好用</li>\n</ol>\n"},{"title":"所谓publish-subscribe","_content":"## 所谓观察者模式 publish/subscribe\n1. subscribe事件订阅/事件监听 就是将事件和事件的callback，  \n添加到一个需要监听执行事件队列里面\n    {\n      eventName: [callback1, callback1],\n      eventName: [callback]\n    }\n2. 接收到publish发布事件就是将subscribe的事件从队列拿出来执行\n3. 在外看来就像是一直在监测这个事件，然后接收到publish发布的，  \n执行监测的事件callback","source":"_posts/2017/04/所谓publish-subscribe.md","raw":"---\ntitle: 所谓publish-subscribe\ncategories: 课外学习\ntags: \n  - 设计模式\n  - javascript\n---\n## 所谓观察者模式 publish/subscribe\n1. subscribe事件订阅/事件监听 就是将事件和事件的callback，  \n添加到一个需要监听执行事件队列里面\n    {\n      eventName: [callback1, callback1],\n      eventName: [callback]\n    }\n2. 接收到publish发布事件就是将subscribe的事件从队列拿出来执行\n3. 在外看来就像是一直在监测这个事件，然后接收到publish发布的，  \n执行监测的事件callback","slug":"所谓publish-subscribe","published":1,"date":"2017-04-14T03:31:40.278Z","updated":"2017-04-13T09:21:55.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1haabph000b4cv3uije7500","content":"<h2 id=\"所谓观察者模式-publish-subscribe\"><a href=\"#所谓观察者模式-publish-subscribe\" class=\"headerlink\" title=\"所谓观察者模式 publish/subscribe\"></a>所谓观察者模式 publish/subscribe</h2><ol>\n<li>subscribe事件订阅/事件监听 就是将事件和事件的callback，<br>添加到一个需要监听执行事件队列里面<br> {<br>   eventName: [callback1, callback1],<br>   eventName: [callback]<br> }</li>\n<li>接收到publish发布事件就是将subscribe的事件从队列拿出来执行</li>\n<li>在外看来就像是一直在监测这个事件，然后接收到publish发布的，<br>执行监测的事件callback</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"所谓观察者模式-publish-subscribe\"><a href=\"#所谓观察者模式-publish-subscribe\" class=\"headerlink\" title=\"所谓观察者模式 publish/subscribe\"></a>所谓观察者模式 publish/subscribe</h2><ol>\n<li>subscribe事件订阅/事件监听 就是将事件和事件的callback，<br>添加到一个需要监听执行事件队列里面<br> {<br>   eventName: [callback1, callback1],<br>   eventName: [callback]<br> }</li>\n<li>接收到publish发布事件就是将subscribe的事件从队列拿出来执行</li>\n<li>在外看来就像是一直在监测这个事件，然后接收到publish发布的，<br>执行监测的事件callback</li>\n</ol>\n"},{"title":"vue-cli创建的任务和后台交互cookie及restAPI处理","_content":"#### 在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie，  \n经检查是cookie的path作用域的原因，可以这样解决。\n```\n let options = proxyTable[ctx]\n\n  if (typeof options === 'string') {\n    options = {\n      target: options,\n      changeOrigin: true,\n\n      onProxyRes(proxyRes, req, res) {\n        Array.prototype.slice.call(proxyRes.headers['set-cookie'] || '')  \n        .map(item => {\n          item = item.replace(/Path=\\/.*?;/, 'Path=/;')\n        })\n      }\n\n    }\n  }\n```\n<!-- more -->\n这段代码就是将proxyRes.headers['set-cookie']的path=/xx 转变成 path=/\n\n\n### 有时候在做代理请求的时候，需要拦截处理req的设置，  \n查看**http-proxy-middleware**的文档，可以用filter做拦截，代码：\n```\napp.use(proxyMiddleware((pathName, req) => {\n    pathName = req.originalUrl = req.url = `${rootAPI}${req.url}`\n\n    return pathName.match(ctx)\n  }, options))\n```\n\n#### 最后vue proxy这块的总代码：\n```\nObject.keys(proxyTable).forEach(ctx => {\n  let options = proxyTable[ctx]\n\n  if (typeof options === 'string') {\n    options = {\n      target: options,\n      changeOrigin: true,\n      onProxyRes(proxyRes, req, res) {\n        Array.prototype.slice.call(proxyRes.headers['set-cookie'] || '')  \n        .map(item => {\n          item = item.replace(/Path=\\/.*?;/, 'Path=/;')\n        })\n      }\n    }\n  }\n\n  app.use(proxyMiddleware((pathName, req) => {\n    pathName = req.originalUrl = req.url = `${rootAPI}${req.url}`    \n    // 可以在此处进行处理request请求\n\n    return pathName.match(ctx)\n  }, options))\n\n})\n```\n","source":"_posts/2017/04/vue-cli创建的任务和后台交互cookie及restAPI处理.md","raw":"---\ntitle: vue-cli创建的任务和后台交互cookie及restAPI处理\ncategories: 课外学习\ntags:\n  - vue\n  - cookie\n  - node.js\n  - javascript\n---\n#### 在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie，  \n经检查是cookie的path作用域的原因，可以这样解决。\n```\n let options = proxyTable[ctx]\n\n  if (typeof options === 'string') {\n    options = {\n      target: options,\n      changeOrigin: true,\n\n      onProxyRes(proxyRes, req, res) {\n        Array.prototype.slice.call(proxyRes.headers['set-cookie'] || '')  \n        .map(item => {\n          item = item.replace(/Path=\\/.*?;/, 'Path=/;')\n        })\n      }\n\n    }\n  }\n```\n<!-- more -->\n这段代码就是将proxyRes.headers['set-cookie']的path=/xx 转变成 path=/\n\n\n### 有时候在做代理请求的时候，需要拦截处理req的设置，  \n查看**http-proxy-middleware**的文档，可以用filter做拦截，代码：\n```\napp.use(proxyMiddleware((pathName, req) => {\n    pathName = req.originalUrl = req.url = `${rootAPI}${req.url}`\n\n    return pathName.match(ctx)\n  }, options))\n```\n\n#### 最后vue proxy这块的总代码：\n```\nObject.keys(proxyTable).forEach(ctx => {\n  let options = proxyTable[ctx]\n\n  if (typeof options === 'string') {\n    options = {\n      target: options,\n      changeOrigin: true,\n      onProxyRes(proxyRes, req, res) {\n        Array.prototype.slice.call(proxyRes.headers['set-cookie'] || '')  \n        .map(item => {\n          item = item.replace(/Path=\\/.*?;/, 'Path=/;')\n        })\n      }\n    }\n  }\n\n  app.use(proxyMiddleware((pathName, req) => {\n    pathName = req.originalUrl = req.url = `${rootAPI}${req.url}`    \n    // 可以在此处进行处理request请求\n\n    return pathName.match(ctx)\n  }, options))\n\n})\n```\n","slug":"vue-cli创建的任务和后台交互cookie及restAPI处理","published":1,"date":"2017-04-14T03:35:15.757Z","updated":"2017-04-13T09:21:40.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1haabps000e4cv3bupii18s","content":"<h4 id=\"在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie，\"><a href=\"#在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie，\" class=\"headerlink\" title=\"在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie，\"></a>在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie，</h4><p>经检查是cookie的path作用域的原因，可以这样解决。<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">let <span class=\"keyword\">options</span> = proxyTable[ctx]</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">if</span> (typeof <span class=\"keyword\">options</span> === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">options</span> = &#123;</div><div class=\"line\">     target: <span class=\"keyword\">options</span>,</div><div class=\"line\">     changeOrigin: <span class=\"keyword\">true</span>,</div><div class=\"line\"></div><div class=\"line\">     onProxyRes(proxyRes, req, res) &#123;</div><div class=\"line\">       Array.prototype.slice.<span class=\"keyword\">call</span>(proxyRes.headers[<span class=\"string\">'set-cookie'</span>] || <span class=\"string\">''</span>)  </div><div class=\"line\">       .map(item =&gt; &#123;</div><div class=\"line\">         item = item.replace(<span class=\"regexp\">/Path=\\/.*?;/</span>, <span class=\"string\">'Path=/;'</span>)</div><div class=\"line\">       &#125;)</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>这段代码就是将proxyRes.headers[‘set-cookie’]的path=/xx 转变成 path=/</p>\n<h3 id=\"有时候在做代理请求的时候，需要拦截处理req的设置，\"><a href=\"#有时候在做代理请求的时候，需要拦截处理req的设置，\" class=\"headerlink\" title=\"有时候在做代理请求的时候，需要拦截处理req的设置，\"></a>有时候在做代理请求的时候，需要拦截处理req的设置，</h3><p>查看<strong>http-proxy-middleware</strong>的文档，可以用filter做拦截，代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(proxyMiddleware(<span class=\"function\">(<span class=\"params\">pathName, req</span>) =&gt;</span> &#123;</div><div class=\"line\">    pathName = req.originalUrl = req.url = <span class=\"string\">`<span class=\"subst\">$&#123;rootAPI&#125;</span><span class=\"subst\">$&#123;req.url&#125;</span>`</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pathName.match(ctx)</div><div class=\"line\">  &#125;, options))</div></pre></td></tr></table></figure></p>\n<h4 id=\"最后vue-proxy这块的总代码：\"><a href=\"#最后vue-proxy这块的总代码：\" class=\"headerlink\" title=\"最后vue proxy这块的总代码：\"></a>最后vue proxy这块的总代码：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.keys(proxyTable).forEach(<span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> options = proxyTable[ctx]</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">    options = &#123;</div><div class=\"line\">      <span class=\"attr\">target</span>: options,</div><div class=\"line\">      <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      onProxyRes(proxyRes, req, res) &#123;</div><div class=\"line\">        <span class=\"built_in\">Array</span>.prototype.slice.call(proxyRes.headers[<span class=\"string\">'set-cookie'</span>] || <span class=\"string\">''</span>)  </div><div class=\"line\">        .map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</div><div class=\"line\">          item = item.replace(<span class=\"regexp\">/Path=\\/.*?;/</span>, <span class=\"string\">'Path=/;'</span>)</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  app.use(proxyMiddleware(<span class=\"function\">(<span class=\"params\">pathName, req</span>) =&gt;</span> &#123;</div><div class=\"line\">    pathName = req.originalUrl = req.url = <span class=\"string\">`<span class=\"subst\">$&#123;rootAPI&#125;</span><span class=\"subst\">$&#123;req.url&#125;</span>`</span>    </div><div class=\"line\">    <span class=\"comment\">// 可以在此处进行处理request请求</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pathName.match(ctx)</div><div class=\"line\">  &#125;, options))</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie，\"><a href=\"#在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie，\" class=\"headerlink\" title=\"在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie，\"></a>在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie，</h4><p>经检查是cookie的path作用域的原因，可以这样解决。<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">let <span class=\"keyword\">options</span> = proxyTable[ctx]</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">if</span> (typeof <span class=\"keyword\">options</span> === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">options</span> = &#123;</div><div class=\"line\">     target: <span class=\"keyword\">options</span>,</div><div class=\"line\">     changeOrigin: <span class=\"keyword\">true</span>,</div><div class=\"line\"></div><div class=\"line\">     onProxyRes(proxyRes, req, res) &#123;</div><div class=\"line\">       Array.prototype.slice.<span class=\"keyword\">call</span>(proxyRes.headers[<span class=\"string\">'set-cookie'</span>] || <span class=\"string\">''</span>)  </div><div class=\"line\">       .map(item =&gt; &#123;</div><div class=\"line\">         item = item.replace(<span class=\"regexp\">/Path=\\/.*?;/</span>, <span class=\"string\">'Path=/;'</span>)</div><div class=\"line\">       &#125;)</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>","more":"<p>这段代码就是将proxyRes.headers[‘set-cookie’]的path=/xx 转变成 path=/</p>\n<h3 id=\"有时候在做代理请求的时候，需要拦截处理req的设置，\"><a href=\"#有时候在做代理请求的时候，需要拦截处理req的设置，\" class=\"headerlink\" title=\"有时候在做代理请求的时候，需要拦截处理req的设置，\"></a>有时候在做代理请求的时候，需要拦截处理req的设置，</h3><p>查看<strong>http-proxy-middleware</strong>的文档，可以用filter做拦截，代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(proxyMiddleware(<span class=\"function\">(<span class=\"params\">pathName, req</span>) =&gt;</span> &#123;</div><div class=\"line\">    pathName = req.originalUrl = req.url = <span class=\"string\">`<span class=\"subst\">$&#123;rootAPI&#125;</span><span class=\"subst\">$&#123;req.url&#125;</span>`</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pathName.match(ctx)</div><div class=\"line\">  &#125;, options))</div></pre></td></tr></table></figure></p>\n<h4 id=\"最后vue-proxy这块的总代码：\"><a href=\"#最后vue-proxy这块的总代码：\" class=\"headerlink\" title=\"最后vue proxy这块的总代码：\"></a>最后vue proxy这块的总代码：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.keys(proxyTable).forEach(<span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> options = proxyTable[ctx]</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">    options = &#123;</div><div class=\"line\">      <span class=\"attr\">target</span>: options,</div><div class=\"line\">      <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      onProxyRes(proxyRes, req, res) &#123;</div><div class=\"line\">        <span class=\"built_in\">Array</span>.prototype.slice.call(proxyRes.headers[<span class=\"string\">'set-cookie'</span>] || <span class=\"string\">''</span>)  </div><div class=\"line\">        .map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</div><div class=\"line\">          item = item.replace(<span class=\"regexp\">/Path=\\/.*?;/</span>, <span class=\"string\">'Path=/;'</span>)</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  app.use(proxyMiddleware(<span class=\"function\">(<span class=\"params\">pathName, req</span>) =&gt;</span> &#123;</div><div class=\"line\">    pathName = req.originalUrl = req.url = <span class=\"string\">`<span class=\"subst\">$&#123;rootAPI&#125;</span><span class=\"subst\">$&#123;req.url&#125;</span>`</span>    </div><div class=\"line\">    <span class=\"comment\">// 可以在此处进行处理request请求</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pathName.match(ctx)</div><div class=\"line\">  &#125;, options))</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/2017/04/java-ssm/1.png","post":"cj1haabov00074cv3055f2ckn","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/2.png","post":"cj1haabov00074cv3055f2ckn","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/3.png","post":"cj1haabov00074cv3055f2ckn","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/4.png","post":"cj1haabov00074cv3055f2ckn","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/5.png","post":"cj1haabov00074cv3055f2ckn","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/vue_admin.sql","post":"cj1haabov00074cv3055f2ckn","slug":"vue_admin.sql","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cj1haabov00074cv3055f2ckn","category_id":"cj1haabop00054cv34ngnrq80","_id":"cj1haabpp000d4cv3g81mmhjd"},{"post_id":"cj1haabo200024cv3mspsljbi","category_id":"cj1haabop00054cv34ngnrq80","_id":"cj1haabq0000h4cv3mmpk5qmi"},{"post_id":"cj1haabph000b4cv3uije7500","category_id":"cj1haabop00054cv34ngnrq80","_id":"cj1haabq7000k4cv34oq0jy7z"},{"post_id":"cj1haabos00064cv3vit7e52o","category_id":"cj1haabpf000a4cv3banvk5hi","_id":"cj1haabq9000l4cv3u72u2wx5"},{"post_id":"cj1haabps000e4cv3bupii18s","category_id":"cj1haabop00054cv34ngnrq80","_id":"cj1haabqc000n4cv38idgbc3r"},{"post_id":"cj1haabp200094cv38pmkt6jn","category_id":"cj1haabpx000g4cv3ypcgasa7","_id":"cj1haabqd000p4cv38w09s3aw"}],"PostTag":[{"post_id":"cj1haabnm00014cv3dmwit9v6","tag_id":"cj1haaboa00034cv3av3dcg3t","_id":"cj1haabpw000f4cv3ajf9sw5v"},{"post_id":"cj1haabnm00014cv3dmwit9v6","tag_id":"cj1haaboz00084cv3j9l7efqd","_id":"cj1haabq1000i4cv3escu45kc"},{"post_id":"cj1haabo200024cv3mspsljbi","tag_id":"cj1haaboa00034cv3av3dcg3t","_id":"cj1haabqd000o4cv3rmwxkknw"},{"post_id":"cj1haabo200024cv3mspsljbi","tag_id":"cj1haaboz00084cv3j9l7efqd","_id":"cj1haabqe000q4cv38faai6cr"},{"post_id":"cj1haaboh00044cv3fznl7orz","tag_id":"cj1haaboz00084cv3j9l7efqd","_id":"cj1haabqm000s4cv322a6clzj"},{"post_id":"cj1haabos00064cv3vit7e52o","tag_id":"cj1haaboz00084cv3j9l7efqd","_id":"cj1haabqu000w4cv3hmdr1twb"},{"post_id":"cj1haabos00064cv3vit7e52o","tag_id":"cj1haabqn000t4cv3ma78oyew","_id":"cj1haabqv000x4cv3a79ls96y"},{"post_id":"cj1haabos00064cv3vit7e52o","tag_id":"cj1haabqp000u4cv3n3s4borz","_id":"cj1haabqx000z4cv3w9e1ttnl"},{"post_id":"cj1haabov00074cv3055f2ckn","tag_id":"cj1haabqr000v4cv3grvmpdb6","_id":"cj1haabr400124cv34tqnpm7r"},{"post_id":"cj1haabov00074cv3055f2ckn","tag_id":"cj1haabqv000y4cv3aapr806i","_id":"cj1haabr500134cv318uvl3tv"},{"post_id":"cj1haabov00074cv3055f2ckn","tag_id":"cj1haaboz00084cv3j9l7efqd","_id":"cj1haabra00154cv3hz287mcg"},{"post_id":"cj1haabp200094cv38pmkt6jn","tag_id":"cj1haabqr000v4cv3grvmpdb6","_id":"cj1haabrb00164cv3m1zbt8pa"},{"post_id":"cj1haabph000b4cv3uije7500","tag_id":"cj1haabr900144cv37kis1p4j","_id":"cj1haabrp00184cv3evx5exo8"},{"post_id":"cj1haabph000b4cv3uije7500","tag_id":"cj1haaboz00084cv3j9l7efqd","_id":"cj1haabrq00194cv3pzvi6355"},{"post_id":"cj1haabps000e4cv3bupii18s","tag_id":"cj1haabrh00174cv3pb76ne9z","_id":"cj1haabrw001c4cv37h1qa4nq"},{"post_id":"cj1haabps000e4cv3bupii18s","tag_id":"cj1haabrr001a4cv3ybe51ftt","_id":"cj1haabrx001d4cv3uzme3k74"},{"post_id":"cj1haabps000e4cv3bupii18s","tag_id":"cj1haabrv001b4cv3vxvo6709","_id":"cj1haabrx001e4cv3nrcf6exz"},{"post_id":"cj1haabps000e4cv3bupii18s","tag_id":"cj1haaboz00084cv3j9l7efqd","_id":"cj1haabry001f4cv33wvhlgtp"}],"Tag":[{"name":"angular","_id":"cj1haaboa00034cv3av3dcg3t"},{"name":"javascript","_id":"cj1haaboz00084cv3j9l7efqd"},{"name":"es6","_id":"cj1haabqn000t4cv3ma78oyew"},{"name":"promise","_id":"cj1haabqp000u4cv3n3s4borz"},{"name":"java","_id":"cj1haabqr000v4cv3grvmpdb6"},{"name":"ssm","_id":"cj1haabqv000y4cv3aapr806i"},{"name":"设计模式","_id":"cj1haabr900144cv37kis1p4j"},{"name":"vue","_id":"cj1haabrh00174cv3pb76ne9z"},{"name":"cookie","_id":"cj1haabrr001a4cv3ybe51ftt"},{"name":"node.js","_id":"cj1haabrv001b4cv3vxvo6709"}]}}