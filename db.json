{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.png","path":"favicon.png","modified":1,"renderable":0},{"_id":"themes/Yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/Coding.png","path":"img/Coding.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/Quora.png","path":"img/Quora.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/博客园.png","path":"img/博客园.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/知乎.png","path":"img/知乎.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/niconico.png","path":"img/niconico.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/简书.png","path":"img/简书.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"1533fd65f74b1ef555eb1963554acd81646db80c","modified":1492049981290},{"_id":"source/favicon.png","hash":"d67c4be2feb621b601ca0a00753882b1fa274c37","modified":1492056430770},{"_id":"themes/Yelee/_config.yml","hash":"e5b02cdfed81aa46a14d557ef9eff8874e05ab7e","modified":1502957096974},{"_id":"themes/Yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1492066092696},{"_id":"themes/Yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1492066093268},{"_id":"themes/Yelee/languages/default.yml","hash":"3bdad891c90029447b4fbaedbbb11b8a59d06418","modified":1492066092707},{"_id":"themes/Yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1492066092712},{"_id":"themes/Yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1492066092718},{"_id":"themes/Yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1492066092723},{"_id":"themes/Yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1492066092729},{"_id":"themes/Yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1492066093241},{"_id":"themes/Yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1492066093239},{"_id":"themes/Yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1492066093243},{"_id":"themes/Yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1492066093259},{"_id":"themes/Yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1492066093262},{"_id":"themes/Yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1492066093264},{"_id":"themes/Yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1492066093270},{"_id":"source/tags/index.md","hash":"ef90c2343f9637a103be80cabe86537b7125f7a4","modified":1492071497369},{"_id":"themes/Yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1492066093257},{"_id":"themes/Yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1492066092767},{"_id":"themes/Yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1492066092760},{"_id":"themes/Yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1492066092788},{"_id":"themes/Yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1492066092851},{"_id":"themes/Yelee/layout/_partial/footer.ejs","hash":"419eef7ab3114083d7e430176865ac0407469fea","modified":1492069102585},{"_id":"themes/Yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1492066092829},{"_id":"themes/Yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1492066093043},{"_id":"themes/Yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1492066092965},{"_id":"themes/Yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1492066093051},{"_id":"themes/Yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1492066093098},{"_id":"themes/Yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1492066093091},{"_id":"themes/Yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1492066093076},{"_id":"themes/Yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1492066093118},{"_id":"themes/Yelee/layout/_partial/open-in-new-tab.ejs","hash":"a59d4c768009dd621e741a29cf6446ebc2668fe9","modified":1492066093111},{"_id":"themes/Yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1492066093176},{"_id":"themes/Yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1492066093124},{"_id":"themes/Yelee/layout/_partial/tab-title-change.ejs","hash":"7c4a7177e0c77de2d7607ca29fc395abebd34db7","modified":1492066093193},{"_id":"themes/Yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1492066093218},{"_id":"themes/Yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1492066093304},{"_id":"themes/Yelee/layout/_partial/head.ejs","hash":"a738c50e20873ed807ec7d05c2d90392bd93748d","modified":1503034059941},{"_id":"themes/Yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1492066093310},{"_id":"themes/Yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1492066093324},{"_id":"themes/Yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1492066093494},{"_id":"themes/Yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1492066093500},{"_id":"themes/Yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1492066093496},{"_id":"themes/Yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1492066093498},{"_id":"themes/Yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1492066093502},{"_id":"themes/Yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1492066093506},{"_id":"themes/Yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1492066093316},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1492066093507},{"_id":"themes/Yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1492066093503},{"_id":"themes/Yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1492066093512},{"_id":"themes/Yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1492066093517},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1492066093515},{"_id":"themes/Yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1492066093509},{"_id":"themes/Yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1492066093524},{"_id":"themes/Yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1492066093521},{"_id":"themes/Yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1492066093514},{"_id":"themes/Yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1492066093522},{"_id":"themes/Yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1492066093526},{"_id":"themes/Yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1492066093340},{"_id":"themes/Yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1492066093237},{"_id":"themes/Yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1492066093487},{"_id":"themes/Yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1492066093492},{"_id":"themes/Yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1492066093527},{"_id":"themes/Yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1492066093519},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","hash":"248ac34a37522bc1c992fec49c126bc08c8cca66","modified":1494841632861},{"_id":"themes/Yelee/source/js/main.js","hash":"a297e3993f47a789c31ddfa20fb22eae1b1b01a4","modified":1492572489630},{"_id":"themes/Yelee/source/js/instagram.js","hash":"34839591bea55c8e4818280ba2e99aeeba7a551b","modified":1494841632884},{"_id":"themes/Yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1492066093579},{"_id":"themes/Yelee/source/js/search.js","hash":"001e324844e63f3bfb6f60d173b9c6954127be0b","modified":1492066093611},{"_id":"themes/Yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1492066093330},{"_id":"themes/Yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1492066093336},{"_id":"themes/Yelee/source/img/avatar.png","hash":"5811c3e9286afa5821274f837c884ad19ec10ec1","modified":1492067210265},{"_id":"source/_posts/2017/04/angular-rootScope-new.md","hash":"c90d113242d5a36c78067ac951393d7179c9dcde","modified":1494841632761},{"_id":"source/_posts/2017/04/currentTarget.md","hash":"62c6975e7ac323720a0e429d845340725fb82eda","modified":1494841632790},{"_id":"source/_posts/2017/04/es6版promise.md","hash":"913b2cbd92d95cbc3e8950173c55eca85cc37598","modified":1494841632803},{"_id":"source/_posts/2017/04/java-ssm.md","hash":"30d28a44ed0adb5ef88bfe015f2d46cedc582903","modified":1494841632811},{"_id":"source/_posts/2017/04/java用jdbc-servelet时的问题.md","hash":"c57a9a42e414690b2e6023a150402902a9bf7a81","modified":1494841632817},{"_id":"source/_posts/2017/04/react-native进入姿势.md","hash":"c538fa1519802b0e7652b6458eadc1f4eeb0bfe1","modified":1494841632825},{"_id":"themes/Yelee/source/js/toc.js","hash":"973c1a4e2c9de8f4f662b99623027658fe6d94c2","modified":1492066093628},{"_id":"source/_posts/2017/04/vue-cli创建的任务和后台交互cookie及restAPI处理.md","hash":"3f3180a2f2421d2aa1252424d999d67157670742","modified":1494841632837},{"_id":"themes/Yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1492066093595},{"_id":"source/_posts/2017/04/学习计划.md","hash":"f41943b4fe1fd67d91b86459bb8fec1fcec05841","modified":1492590848659},{"_id":"source/_posts/2017/05/angular2-约定优于配置.md","hash":"bde6742036a84ef9d8e3c2c441543c8895be8e85","modified":1494842023969},{"_id":"source/_posts/2017/04/angular权威指南学习.md","hash":"3337dcdab1bb9fbffd3c2a694a8c2fa6a843b566","modified":1494841632776},{"_id":"source/_posts/2017/08/js设计模式笔记-享元模式.md","hash":"7bef2e0ac43e83cbfb09ef8005ceeba9bf94441b","modified":1503379577006},{"_id":"source/_posts/2017/04/所谓publish-subscribe.md","hash":"9538eba1f6d576d390fe161415b0318ae230a28c","modified":1494841632842},{"_id":"source/_posts/2017/07/jsDemo.md","hash":"e9934ed31719b1f8d006ae3479ab196f2de48831","modified":1502957096965},{"_id":"source/_posts/2017/08/js设计模式笔记-代理模式.md","hash":"921889f12f9b33a1a5b66af274d40de848c4340e","modified":1503042259411},{"_id":"source/_posts/2017/06/简单的代码，了解观察者模式和Promise.md","hash":"a0d8158b60b4d4b4c933b4c408fcbfd003e2e21e","modified":1502957096954},{"_id":"source/_posts/2017/08/js设计模式笔记-工厂模式.md","hash":"4851ece3963bb4081a53fbea01795e3815c3a53d","modified":1503041728798},{"_id":"source/_posts/2017/08/js设计模式笔记-外观模式.md","hash":"5b33a8a5d8d9329f0753567b3fdfee6012f9c4c8","modified":1503042059051},{"_id":"source/_posts/2017/08/js设计模式笔记-单例模式.md","hash":"fdd4e006dbd7f5896f726f01488f404f5692b0d0","modified":1503042011419},{"_id":"source/_posts/2017/08/js设计模式笔记-建造者模式.md","hash":"fdf9a9f9af7b2bb1b15981175e38a3dcdf8359e5","modified":1503041869956},{"_id":"source/_posts/2017/08/js设计模式笔记-原型模式.md","hash":"d31e4b5e7a2c4935a05b99b7c2d4fe7d9cad5d6f","modified":1503041918977},{"_id":"source/_posts/2017/08/js设计模式笔记-组合模式.md","hash":"e0d9b1254c5afa442f7281de50c18aeca7e0987b","modified":1503379445742},{"_id":"source/_posts/2017/08/js设计模式笔记-桥接模式.md","hash":"908e81635c5cc917f31e9b671396d3037aa5ebb5","modified":1503311570845},{"_id":"source/_posts/2017/08/js设计模式笔记-抽象工厂模式.md","hash":"f658cd96264fea9e7435f7d07a673e46475bed8b","modified":1503041798195},{"_id":"source/_posts/2017/08/js设计模式笔记-装饰者模式.md","hash":"540eb4d468b10938917ff586c6a1d2619892c14e","modified":1503042758193},{"_id":"source/_posts/2017/08/说说HTTP缓存.md","hash":"76267dec4c9c37df7a3769c2339a5aafe306784a","modified":1503034726199},{"_id":"source/_posts/2017/08/js设计模式笔记-简介.md","hash":"ebb7df1120540f0ac51c927ede4767120b015745","modified":1503041348474},{"_id":"source/_posts/2017/08/读书整理.md","hash":"d2b1c8b77b2174651607ed90092d669f49943a5e","modified":1502958663612},{"_id":"source/_posts/2017/08/js设计模式笔记-面向对象.md","hash":"d30f47e691cddbd8b0fa71b1bf91d595ecbc8c83","modified":1503045978593},{"_id":"source/_posts/2017/08/js设计模式笔记-适配器模式.md","hash":"9820be74b52a0f216e54878cff7ed44d214966b1","modified":1503042174616},{"_id":"themes/Yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1492066092862},{"_id":"themes/Yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1492066092908},{"_id":"themes/Yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1492066093126},{"_id":"themes/Yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1492066092924},{"_id":"themes/Yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1492066093168},{"_id":"themes/Yelee/layout/_partial/comments/count-comment.ejs","hash":"ada2032e401b73b312c50b75bdbb8ee71d5a291e","modified":1492066092890},{"_id":"themes/Yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1492066093170},{"_id":"themes/Yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1492066092945},{"_id":"themes/Yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1492066093171},{"_id":"themes/Yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1492066093137},{"_id":"themes/Yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1492066093478},{"_id":"themes/Yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1492066093353},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1492066093298},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1492066093285},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1492066093291},{"_id":"themes/Yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1492066093157},{"_id":"themes/Yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1492066093475},{"_id":"themes/Yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1492066093412},{"_id":"themes/Yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1492066093347},{"_id":"themes/Yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1492066093421},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1492066093278},{"_id":"themes/Yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1492066093404},{"_id":"themes/Yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1492066093440},{"_id":"themes/Yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1492066093435},{"_id":"themes/Yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1492066093442},{"_id":"themes/Yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1492066093447},{"_id":"themes/Yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1492066093411},{"_id":"themes/Yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1492066093462},{"_id":"themes/Yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1492066093456},{"_id":"themes/Yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1492066093427},{"_id":"themes/Yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1492066093473},{"_id":"themes/Yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1492066093405},{"_id":"themes/Yelee/source/css/_partial/toc.styl","hash":"8f2a057dc072285093e37f1f645e9cb53608642f","modified":1492066093468},{"_id":"source/_posts/2017/04/java-ssm/4.png","hash":"c0edf633d13647c58505e34a6d07a580fa16c191","modified":1491558259886},{"_id":"source/_posts/2017/04/java-ssm/2.png","hash":"d4f1a8ab49b39a9d545bc4602fc7df3da82e73a9","modified":1491026261612},{"_id":"source/_posts/2017/04/react-native进入姿势/android_home.jpg","hash":"02c602230f05459012852ac4e9246a0f2a678724","modified":1492999859511},{"_id":"source/_posts/2017/04/react-native进入姿势/androids.jpg","hash":"bd16273b6779fd21edb9950fbeb300a2d60fc1d4","modified":1492999859519},{"_id":"source/_posts/2017/04/react-native进入姿势/avd.jpg","hash":"703932588892a1106dd4a49fafa51b04417e17eb","modified":1492999859528},{"_id":"source/_posts/2017/04/react-native进入姿势/bigSuccess.jpg","hash":"214f160249b72b167f12c270a6e252ef560d9aee","modified":1493006243651},{"_id":"source/_posts/2017/04/react-native进入姿势/directory.jpg","hash":"0f5b27633fbf246666c7a8a48774f218822fa700","modified":1492999859544},{"_id":"source/_posts/2017/04/react-native进入姿势/dev.jpg","hash":"fe80e50f459c3fd8f6115c51ad5d6488fd97d1f2","modified":1493002328857},{"_id":"source/_posts/2017/04/java-ssm/3.png","hash":"ea2ffedd4e90499d7d04c35dd51bab286a09384f","modified":1491558215160},{"_id":"source/_posts/2017/04/react-native进入姿势/devSuccess.jpg","hash":"927b89dbc14e03db051301be427345d932074747","modified":1493002616428},{"_id":"source/_posts/2017/04/java-ssm/5.png","hash":"e7ad6205ac081db9eff107c473ae624bb6455066","modified":1491558277864},{"_id":"source/_posts/2017/04/react-native进入姿势/err.jpg","hash":"ac55d8d73b695e5d9ae9cc4b32503431016bc62e","modified":1492999859551},{"_id":"source/_posts/2017/04/react-native进入姿势/host.jpg","hash":"665a525df62b01c1b687ddc02dc48fa4fe9952c0","modified":1493002457379},{"_id":"source/_posts/2017/04/react-native进入姿势/reload.jpg","hash":"a0b2846c342b37f8b5309b97de382efc1e9f74f0","modified":1493002541325},{"_id":"source/_posts/2017/04/react-native进入姿势/success.jpg","hash":"b721df0d0031b3fd0924ef355678c492242b2ee0","modified":1492999859587},{"_id":"source/_posts/2017/04/react-native进入姿势/sdk.png","hash":"9c038793e927a1e277876d62737474ee30fdd474","modified":1493000777880},{"_id":"source/_posts/2017/04/react-native进入姿势/snap3555.jpg","hash":"09165ad61e411491e7177b7a1dc80cdf3fef2dac","modified":1492999859572},{"_id":"source/_posts/2017/04/react-native进入姿势/verr.jpg","hash":"c656ccd38ce2e758b511a1db44e1b750140b8ecc","modified":1492999859603},{"_id":"source/_posts/2017/04/react-native进入姿势/wox.jpg","hash":"db4d2161f5bebb9001847c9eae6a4323c66957ab","modified":1492999859609},{"_id":"source/_posts/2017/04/vue-cli创建的任务和后台交互cookie及restAPI处理/chrome下cookie.png","hash":"aae80c3ba9c633514aa76c06ea2a9a133f1d0d53","modified":1492498624193},{"_id":"source/_posts/2017/04/react-native进入姿势/init.gradle","hash":"3a2a983667380f44591e5b45f194e61ee2edecc4","modified":1492999859565},{"_id":"source/_posts/2017/04/react-native进入姿势/tools.jpg","hash":"ddd968eacb4cc09a8773db8b48b1b8c252d0d241","modified":1492999859594},{"_id":"source/_posts/2017/04/java-ssm/vue_admin.sql","hash":"6f5c032a12ac4e8cf476245458f3ce5edef78a0e","modified":1491554194128},{"_id":"themes/Yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1492066093359},{"_id":"themes/Yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1492066093369},{"_id":"themes/Yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1492066093388},{"_id":"themes/Yelee/source/css/_partial/customise/heading.styl","hash":"c29799f09ebd87767fd9cc3b1fa795db44a94670","modified":1492066093379},{"_id":"source/_posts/2017/08/说说HTTP缓存/disk.png","hash":"03b34a426eaccd0df9cdcd4c0956d3384761ddcc","modified":1503026046317},{"_id":"source/_posts/2017/08/说说HTTP缓存/github.png","hash":"f68640017e7ea8db378f23761a047cbddf2a5d7b","modified":1503021017073},{"_id":"themes/Yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1492066093374},{"_id":"themes/Yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1492066093394},{"_id":"themes/Yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1492066093399},{"_id":"source/_posts/2017/04/java-ssm/1.png","hash":"2a9a86a509ca8408742c8fb96ed413d7a274f2f4","modified":1491026164014},{"_id":"source/_posts/2017/04/react-native进入姿势/configerr.jpg","hash":"d08820b1ef81a6e345f48eb0e263761b929249f6","modified":1492999859536},{"_id":"source/_posts/2017/04/react-native进入姿势/gen.jpg","hash":"cbad7d84feda78aabf14f6fe5e1380a61ae927e1","modified":1492999859559},{"_id":"source/_posts/2017/04/react-native进入姿势/netErr.jpg","hash":"64ed9702db921dd52a2c3e8effa4cfc6bbbf92d0","modified":1493002141039},{"_id":"source/_posts/2017/04/react-native进入姿势/snap3556.jpg","hash":"055b1d875370f4f8d382b8de97839493d73e918b","modified":1492999859580},{"_id":"source/_posts/2017/08/说说HTTP缓存/githubRequest.png","hash":"42a94c3d5362510b7d738e0542b2e964c0a8b38e","modified":1503021269061},{"_id":"source/_posts/2017/08/说说HTTP缓存/cache-control.png","hash":"e9866b54d4768300b874e545b0d9a49ecfb64eec","modified":1503026740481},{"_id":"source/_posts/2017/08/说说HTTP缓存/liucheng.png","hash":"1143ee3a2f14b583e88345c1ab81e7f79f66f045","modified":1503026692654}],"Category":[{"name":"小轮子","_id":"cj6n5eb7f0006n8v37rkg3i6b"},{"name":"课外学习","_id":"cj6n5eb7l000bn8v3r8a5h9s0"},{"name":"exception","_id":"cj6n5eb7z000in8v3fnszmd0h"},{"name":"自学历程","_id":"cj6n5eb85000nn8v3fu4su447"}],"Data":[],"Page":[{"title":"tags","date":"2017-04-13T08:18:17.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-04-13 16:18:17\n---\n","updated":"2017-04-13T08:18:17.369Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj6n5eb4o0000n8v3dyhvwrug","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"angular-$rootScope.$new()","date":"2017-04-22T01:32:15.000Z","_content":"## Scope实例上面有这么一个属性：$new()\n### $new(isolate, parent)\n``所有scope都是通过$new创建``\n#### 参数解释\n\n1. 参数一（isolate）设置是否为孤立作用域\n\n  - 如果是`true`，则建立孤立作用域，孤立作用域直接和祖级作用域联系 `child = new Scope(); child.$root = this.$root`\n  - 如果是`false`，则判断此`$rootScope`有没有子作用域，如果没有则建立一个子作用域构造函数，并且将这个子作用域的原型指向`this（`$rootScope => Scope的实例`）`,然后将`child = new this.$$ChildScope() child.__proto__ = Scope.prototype`\n2. 参数二设置要`new`的作用域的`parent`，如果不设置则将`parent = this`， 也就是将`new`的`child`挂载到`this(此$rootScope)上面，然后给`parent`的子作用域排序，有个判断如果设置了`isolate`并且`parent != this`,**则作用域不监听$destory事件**\n\n3.  e.g:\n`var scope = $rootScope.$new()`\n##### 没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。\n`\n","source":"_posts/2017/04/angular-rootScope-new.md","raw":"---\ntitle: angular-$rootScope.$new()\ndate: 2017-04-22 09:32:15\ntags: \n  - angular\n  - javascript\n---\n## Scope实例上面有这么一个属性：$new()\n### $new(isolate, parent)\n``所有scope都是通过$new创建``\n#### 参数解释\n\n1. 参数一（isolate）设置是否为孤立作用域\n\n  - 如果是`true`，则建立孤立作用域，孤立作用域直接和祖级作用域联系 `child = new Scope(); child.$root = this.$root`\n  - 如果是`false`，则判断此`$rootScope`有没有子作用域，如果没有则建立一个子作用域构造函数，并且将这个子作用域的原型指向`this（`$rootScope => Scope的实例`）`,然后将`child = new this.$$ChildScope() child.__proto__ = Scope.prototype`\n2. 参数二设置要`new`的作用域的`parent`，如果不设置则将`parent = this`， 也就是将`new`的`child`挂载到`this(此$rootScope)上面，然后给`parent`的子作用域排序，有个判断如果设置了`isolate`并且`parent != this`,**则作用域不监听$destory事件**\n\n3.  e.g:\n`var scope = $rootScope.$new()`\n##### 没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。\n`\n","slug":"angular-rootScope-new","published":1,"updated":"2017-05-15T09:47:12.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb6l0001n8v3jbinuvw3","content":"<h2 id=\"Scope实例上面有这么一个属性：-new\"><a href=\"#Scope实例上面有这么一个属性：-new\" class=\"headerlink\" title=\"Scope实例上面有这么一个属性：$new()\"></a>Scope实例上面有这么一个属性：$new()</h2><h3 id=\"new-isolate-parent\"><a href=\"#new-isolate-parent\" class=\"headerlink\" title=\"$new(isolate, parent)\"></a>$new(isolate, parent)</h3><p><code>所有scope都是通过$new创建</code></p>\n<h4 id=\"参数解释\"><a href=\"#参数解释\" class=\"headerlink\" title=\"参数解释\"></a>参数解释</h4><ol>\n<li><p>参数一（isolate）设置是否为孤立作用域</p>\n<ul>\n<li>如果是<code>true</code>，则建立孤立作用域，孤立作用域直接和祖级作用域联系 <code>child = new Scope(); child.$root = this.$root</code></li>\n<li>如果是<code>false</code>，则判断此<code>$rootScope</code>有没有子作用域，如果没有则建立一个子作用域构造函数，并且将这个子作用域的原型指向<code>this（</code>$rootScope =&gt; Scope的实例<code>）</code>,然后将<code>child = new this.$$ChildScope() child.__proto__ = Scope.prototype</code></li>\n</ul>\n</li>\n<li><p>参数二设置要<code>new</code>的作用域的<code>parent</code>，如果不设置则将<code>parent = this</code>， 也就是将<code>new</code>的<code>child</code>挂载到<code>this(此$rootScope)上面，然后给</code>parent<code>的子作用域排序，有个判断如果设置了</code>isolate<code>并且</code>parent != this`,<strong>则作用域不监听$destory事件</strong></p>\n</li>\n<li><p>e.g:<br><code>var scope = $rootScope.$new()</code></p>\n<h5 id=\"没有指定参数，则1-将scope的父级指向-rootScope-2-将scope创建为-rootScope的子作用域，并在原型上继承-rootScope的所有属性方法，返回。\"><a href=\"#没有指定参数，则1-将scope的父级指向-rootScope-2-将scope创建为-rootScope的子作用域，并在原型上继承-rootScope的所有属性方法，返回。\" class=\"headerlink\" title=\"没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。\"></a>没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。</h5><p>`</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Scope实例上面有这么一个属性：-new\"><a href=\"#Scope实例上面有这么一个属性：-new\" class=\"headerlink\" title=\"Scope实例上面有这么一个属性：$new()\"></a>Scope实例上面有这么一个属性：$new()</h2><h3 id=\"new-isolate-parent\"><a href=\"#new-isolate-parent\" class=\"headerlink\" title=\"$new(isolate, parent)\"></a>$new(isolate, parent)</h3><p><code>所有scope都是通过$new创建</code></p>\n<h4 id=\"参数解释\"><a href=\"#参数解释\" class=\"headerlink\" title=\"参数解释\"></a>参数解释</h4><ol>\n<li><p>参数一（isolate）设置是否为孤立作用域</p>\n<ul>\n<li>如果是<code>true</code>，则建立孤立作用域，孤立作用域直接和祖级作用域联系 <code>child = new Scope(); child.$root = this.$root</code></li>\n<li>如果是<code>false</code>，则判断此<code>$rootScope</code>有没有子作用域，如果没有则建立一个子作用域构造函数，并且将这个子作用域的原型指向<code>this（</code>$rootScope =&gt; Scope的实例<code>）</code>,然后将<code>child = new this.$$ChildScope() child.__proto__ = Scope.prototype</code></li>\n</ul>\n</li>\n<li><p>参数二设置要<code>new</code>的作用域的<code>parent</code>，如果不设置则将<code>parent = this</code>， 也就是将<code>new</code>的<code>child</code>挂载到<code>this(此$rootScope)上面，然后给</code>parent<code>的子作用域排序，有个判断如果设置了</code>isolate<code>并且</code>parent != this`,<strong>则作用域不监听$destory事件</strong></p>\n</li>\n<li><p>e.g:<br><code>var scope = $rootScope.$new()</code></p>\n<h5 id=\"没有指定参数，则1-将scope的父级指向-rootScope-2-将scope创建为-rootScope的子作用域，并在原型上继承-rootScope的所有属性方法，返回。\"><a href=\"#没有指定参数，则1-将scope的父级指向-rootScope-2-将scope创建为-rootScope的子作用域，并在原型上继承-rootScope的所有属性方法，返回。\" class=\"headerlink\" title=\"没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。\"></a>没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。</h5><p>`</p>\n</li>\n</ol>\n"},{"title":"DOM属性currentTarget","date":"2017-04-19T07:18:24.000Z","_content":"```\n<html>\n<head>\n<script type=\"text/javascript\">\nfunction getEventTrigger(event)\n  { \n  x=event.currentTarget; \nconsole.log(event)\nconsole.log(event.currentTarget)\n  }\n</script>\n</head>\n<body >\n<p id=\"p1\" onmousedown=\"getEventTrigger(event)\">\nClick on this paragraph. An alert box will\nshow which element triggered the event.</p>\n</body>\n</html>\n```\n\n### 运行此代码会发现： **console.log(event) currentTarget:null**  而直接打印currentTarget则返回当前节点\n\n#### 这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况","source":"_posts/2017/04/currentTarget.md","raw":"---\ntitle: DOM属性currentTarget\ndate: 2017-04-19 15:18:24\ntags: \n  - javascript\n  - dom\n---\n```\n<html>\n<head>\n<script type=\"text/javascript\">\nfunction getEventTrigger(event)\n  { \n  x=event.currentTarget; \nconsole.log(event)\nconsole.log(event.currentTarget)\n  }\n</script>\n</head>\n<body >\n<p id=\"p1\" onmousedown=\"getEventTrigger(event)\">\nClick on this paragraph. An alert box will\nshow which element triggered the event.</p>\n</body>\n</html>\n```\n\n### 运行此代码会发现： **console.log(event) currentTarget:null**  而直接打印currentTarget则返回当前节点\n\n#### 这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况","slug":"currentTarget","published":1,"updated":"2017-05-15T09:47:12.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb710002n8v37iqb1vjm","content":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getEventTrigger</span>(<span class=\"params\">event</span>)</span></div><div class=\"line\">  &#123; </div><div class=\"line\">  x=event.currentTarget; </div><div class=\"line\"><span class=\"built_in\">console</span>.log(event)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(event.currentTarget)</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p1\"</span> <span class=\"attr\">onmousedown</span>=<span class=\"string\">\"getEventTrigger(event)\"</span>&gt;</span></div><div class=\"line\">Click on this paragraph. An alert box will</div><div class=\"line\">show which element triggered the event.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"运行此代码会发现：-console-log-event-currentTarget-null-而直接打印currentTarget则返回当前节点\"><a href=\"#运行此代码会发现：-console-log-event-currentTarget-null-而直接打印currentTarget则返回当前节点\" class=\"headerlink\" title=\"运行此代码会发现： console.log(event) currentTarget:null  而直接打印currentTarget则返回当前节点\"></a>运行此代码会发现： <strong>console.log(event) currentTarget:null</strong>  而直接打印currentTarget则返回当前节点</h3><h4 id=\"这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\"><a href=\"#这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\" class=\"headerlink\" title=\"这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\"></a>这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况</h4>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getEventTrigger</span>(<span class=\"params\">event</span>)</span></div><div class=\"line\">  &#123; </div><div class=\"line\">  x=event.currentTarget; </div><div class=\"line\"><span class=\"built_in\">console</span>.log(event)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(event.currentTarget)</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p1\"</span> <span class=\"attr\">onmousedown</span>=<span class=\"string\">\"getEventTrigger(event)\"</span>&gt;</span></div><div class=\"line\">Click on this paragraph. An alert box will</div><div class=\"line\">show which element triggered the event.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"运行此代码会发现：-console-log-event-currentTarget-null-而直接打印currentTarget则返回当前节点\"><a href=\"#运行此代码会发现：-console-log-event-currentTarget-null-而直接打印currentTarget则返回当前节点\" class=\"headerlink\" title=\"运行此代码会发现： console.log(event) currentTarget:null  而直接打印currentTarget则返回当前节点\"></a>运行此代码会发现： <strong>console.log(event) currentTarget:null</strong>  而直接打印currentTarget则返回当前节点</h3><h4 id=\"这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\"><a href=\"#这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\" class=\"headerlink\" title=\"这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况\"></a>这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况</h4>"},{"title":"es6版promise","date":"2017-04-18T02:34:21.000Z","_content":"\n## es6版Promise\n#### 用法\n```\n  new Promise(function(resolve, reject) {\n    resolve('resolve')\n  })\n    .then(function(result) {\n      console.log(result) // resolve\n    })\n```\n#### ``Promise``是一个构造函数，接受一个函数作为参数  \n  这个函数接受两个参数：  \n  (1) resolve 成功的时候返回的数据 （履行承诺）  \n  (2) reject 失败的时候返回的数据 （拒绝承诺）\n#### ``Promise``原型方法\n  (1) ``then``注册成功后的回调  \n  (2) ``catch``注册失败后的回调  \n<!-- more -->\n#### 上源代码——由于使用es6所以用babel，[点击看编译过的代码](https://github.com/slipkinem/jsTest/blob/master/promise/final/promise.dist.js)\n```$xslt\nclass util {\n  static isFunction(value) {\n    return typeof value === 'function'\n  }\n\n  static isArray(value) {\n    return Array.isArray(value)\n  }\n}\n\n/**\n * Promise\n * @constructor\n */\nclass Promise extends util {\n  constructor(executor) {\n    /**\n     * 继承绑定，作为context调用父类的constructor\n     */\n    super(executor)\n\n    if (!Promise.isFunction(executor)) throw new TypeError('参数必须是一个函数')\n    /**\n     * @description\n     * 状态分为 PENDING  可以过度到RESOLVED或REJECTED\n     *        RESOLVED\n     *        REJECTED\n     * @type {string}\n     * @private\n     */\n    this._status = 'PENDING'\n    /**\n     * 正确值\n     * @type {Object}\n     * @private\n     */\n    this._value = Object.create(null)\n    /**\n     * 错误值\n     * @type {Object}\n     * @private\n     */\n    this._reason = Object.create(null)\n    /**\n     * 储存错误回调\n     * @type {Array}\n     * @private\n     */\n    this._rejecteds = []\n    /**\n     * 正确回调的方法集 \n     * @type {Array}\n     * @private\n     */\n    this._deferreds = []\n    /**\n     * 在class中 constructor里面的函数无法直接访问this\n     * 为了形成private，所以不放外面\n     * @type {Promise}\n     * @private\n     */\n    let _this = this\n\n    /**\n     * 执行承诺的函数\n     * @param value\n     */\n    function resolve(value) {\n      /**\n       * 异步，为了让then先执行，注册进回调\n       */\n      setTimeout(() => {\n        try {\n          if (_this._status === 'PENDING') {\n            _this._status = 'RESOLVED'\n            _this._value = value\n            /**\n             * 循环执行所有的回调\n             */\n            _this._deferreds.forEach((deferred) => {\n              deferred(value)\n            })\n\n          }\n        } catch (e) {\n          reject(e)\n        }\n\n      })\n    }\n\n    function reject(reason) {\n      setTimeout(() => {\n        try {\n          if (_this._status === 'PENDING') {\n            _this._status = 'REJECTED'\n            _this._reason = reason\n\n            _this._rejecteds.forEach((rejected) => {\n              rejected(reason)\n            })\n          }\n        } catch (e) {\n          reject(e)\n        }\n      })\n    }\n\n    try {\n      executor(resolve, reject)\n    } catch (e) {\n      reject(e)\n    }\n\n  }\n\n  /**\n   * resolve方法\n   * @example Promise.resolve('test').then(function(result){ result // test })\n   * @param value\n   * @returns {Promise}\n   */\n  static resolve(value) {\n    return new Promise((resolve, reject) => {\n      resolve(value)\n    })\n  }\n\n  /**\n   * all方法 当需要许多promise一起执行的时候用，最后返回一个存有所有promise返回值的数组\n   * 当一个promise reject掉了，认为此all方法执行失败，进入reject\n   * @param promises\n   * @returns {Promise}\n   */\n  static all(promises) {\n    if (!Promise.isArray(promises)) throw new TypeError('promises 必须是一个数组')\n\n    /**\n     * 返回一个Promise\n     */\n    return new Promise((resolve, reject) => {\n      let result = [],\n        len = promises.length\n\n      /**\n       * 将所有的返回值存储起来\n       * @param value\n       */\n      function resolveAll(value) {\n        result.push(value)\n\n        if (--len === 0) {\n          resolve(result)\n        }\n      }\n\n      promises.forEach(function (promise) {\n        /**\n         * 将成功后的加入result数组\n         * 一旦有一个失败，则直接返回失败\n         */\n        promise.then(resolveAll, reject)\n      })\n\n    })\n  }\n\n  /**\n   * 方便使用，封装catch方法\n   * @param onRejected\n   */\n  catch(onRejected) {\n    this.then(null, onRejected)\n  }\n\n  /**\n   * 重点方法，then\n   * @param onFulfilled\n   * @param onRejected\n   * @returns {Promise}\n   */\n  then(onFulfilled, onRejected) {\n    /**\n     * 每次执行then都会返回一个promise供链式调用\n     */\n    return new Promise((resolve, reject) => {\n      let returnedValue = Object.create(null)\n      /**\n       * 如果是RESOLVED状态说明执行了过resolve函数，this.value是有值的\n       * e.g. Promise.resolve('resolve').then(function(result){})\n       * 最主要看onFulfilled返回值是什么\n       */\n      /**\n       * _RESOLVED\n       * @param value\n       * @private\n       */\n      function _RESOLVED(value) {\n        /**\n         * 取得onFulfilled的返回值，判断是否返回一个promise\n         * 回调方式的then\n         * @example\n         * new Promise(function(resolve, reject){\n         *  resolve('test')\n         * })\n         *  .then(function(result){\n         *    return new Promise(function(resolve, reject){\n         *      resolve(result + 'test')\n         *    })\n         *      .then()\n         *  })\n         */\n        returnedValue = Promise.isFunction(onFulfilled) && onFulfilled(value) || value\n\n        try {\n          if (returnedValue && returnedValue instanceof Promise) {\n            returnedValue.then((value) => {\n              resolve(value)\n            }, (reason) => {\n              reject(reason)\n            })\n          } else {\n            resolve(returnedValue)\n          }\n\n        } catch (e) {\n          reject(e)\n        }\n      }\n\n      /**\n       * 失败的错误\n       * @param reason\n       * @private\n       */\n      function _REJECTED(reason) {\n        returnedValue = Promise.isFunction(onRejected) && onRejected(reason) || reason\n\n        reject(returnedValue)\n      }\n\n      /**\n       * 直接调用resolve的情况\n       * @example\n       * Promise.resolve('test')\n       *  .then(function() {})\n       */\n\n      if (this._status === 'RESOLVED') {\n        _RESOLVED(this._value)\n\n      } else if (this._status === 'REJECTED') {\n        _REJECTED(this._reason)\n\n      } else if (this._status === 'PENDING') {\n        /**\n         * e.g. new Promise().then(function(result){})\n         */\n        this._deferreds.push(_RESOLVED)\n\n        this._rejecteds.push(_REJECTED)\n      }\n\n    })\n\n  }\n\n}\n/**\n * 将类返回，外面用babel编译\n * @type {Promise}\n */\nmodule.exports = Promise\n```\n","source":"_posts/2017/04/es6版promise.md","raw":"---\ntitle: es6版promise\ncategories: 小轮子\ndate: 2017-04-18 10:34:21\ntags: \n  - javascript\n  - es6\n  - promise\n---\n\n## es6版Promise\n#### 用法\n```\n  new Promise(function(resolve, reject) {\n    resolve('resolve')\n  })\n    .then(function(result) {\n      console.log(result) // resolve\n    })\n```\n#### ``Promise``是一个构造函数，接受一个函数作为参数  \n  这个函数接受两个参数：  \n  (1) resolve 成功的时候返回的数据 （履行承诺）  \n  (2) reject 失败的时候返回的数据 （拒绝承诺）\n#### ``Promise``原型方法\n  (1) ``then``注册成功后的回调  \n  (2) ``catch``注册失败后的回调  \n<!-- more -->\n#### 上源代码——由于使用es6所以用babel，[点击看编译过的代码](https://github.com/slipkinem/jsTest/blob/master/promise/final/promise.dist.js)\n```$xslt\nclass util {\n  static isFunction(value) {\n    return typeof value === 'function'\n  }\n\n  static isArray(value) {\n    return Array.isArray(value)\n  }\n}\n\n/**\n * Promise\n * @constructor\n */\nclass Promise extends util {\n  constructor(executor) {\n    /**\n     * 继承绑定，作为context调用父类的constructor\n     */\n    super(executor)\n\n    if (!Promise.isFunction(executor)) throw new TypeError('参数必须是一个函数')\n    /**\n     * @description\n     * 状态分为 PENDING  可以过度到RESOLVED或REJECTED\n     *        RESOLVED\n     *        REJECTED\n     * @type {string}\n     * @private\n     */\n    this._status = 'PENDING'\n    /**\n     * 正确值\n     * @type {Object}\n     * @private\n     */\n    this._value = Object.create(null)\n    /**\n     * 错误值\n     * @type {Object}\n     * @private\n     */\n    this._reason = Object.create(null)\n    /**\n     * 储存错误回调\n     * @type {Array}\n     * @private\n     */\n    this._rejecteds = []\n    /**\n     * 正确回调的方法集 \n     * @type {Array}\n     * @private\n     */\n    this._deferreds = []\n    /**\n     * 在class中 constructor里面的函数无法直接访问this\n     * 为了形成private，所以不放外面\n     * @type {Promise}\n     * @private\n     */\n    let _this = this\n\n    /**\n     * 执行承诺的函数\n     * @param value\n     */\n    function resolve(value) {\n      /**\n       * 异步，为了让then先执行，注册进回调\n       */\n      setTimeout(() => {\n        try {\n          if (_this._status === 'PENDING') {\n            _this._status = 'RESOLVED'\n            _this._value = value\n            /**\n             * 循环执行所有的回调\n             */\n            _this._deferreds.forEach((deferred) => {\n              deferred(value)\n            })\n\n          }\n        } catch (e) {\n          reject(e)\n        }\n\n      })\n    }\n\n    function reject(reason) {\n      setTimeout(() => {\n        try {\n          if (_this._status === 'PENDING') {\n            _this._status = 'REJECTED'\n            _this._reason = reason\n\n            _this._rejecteds.forEach((rejected) => {\n              rejected(reason)\n            })\n          }\n        } catch (e) {\n          reject(e)\n        }\n      })\n    }\n\n    try {\n      executor(resolve, reject)\n    } catch (e) {\n      reject(e)\n    }\n\n  }\n\n  /**\n   * resolve方法\n   * @example Promise.resolve('test').then(function(result){ result // test })\n   * @param value\n   * @returns {Promise}\n   */\n  static resolve(value) {\n    return new Promise((resolve, reject) => {\n      resolve(value)\n    })\n  }\n\n  /**\n   * all方法 当需要许多promise一起执行的时候用，最后返回一个存有所有promise返回值的数组\n   * 当一个promise reject掉了，认为此all方法执行失败，进入reject\n   * @param promises\n   * @returns {Promise}\n   */\n  static all(promises) {\n    if (!Promise.isArray(promises)) throw new TypeError('promises 必须是一个数组')\n\n    /**\n     * 返回一个Promise\n     */\n    return new Promise((resolve, reject) => {\n      let result = [],\n        len = promises.length\n\n      /**\n       * 将所有的返回值存储起来\n       * @param value\n       */\n      function resolveAll(value) {\n        result.push(value)\n\n        if (--len === 0) {\n          resolve(result)\n        }\n      }\n\n      promises.forEach(function (promise) {\n        /**\n         * 将成功后的加入result数组\n         * 一旦有一个失败，则直接返回失败\n         */\n        promise.then(resolveAll, reject)\n      })\n\n    })\n  }\n\n  /**\n   * 方便使用，封装catch方法\n   * @param onRejected\n   */\n  catch(onRejected) {\n    this.then(null, onRejected)\n  }\n\n  /**\n   * 重点方法，then\n   * @param onFulfilled\n   * @param onRejected\n   * @returns {Promise}\n   */\n  then(onFulfilled, onRejected) {\n    /**\n     * 每次执行then都会返回一个promise供链式调用\n     */\n    return new Promise((resolve, reject) => {\n      let returnedValue = Object.create(null)\n      /**\n       * 如果是RESOLVED状态说明执行了过resolve函数，this.value是有值的\n       * e.g. Promise.resolve('resolve').then(function(result){})\n       * 最主要看onFulfilled返回值是什么\n       */\n      /**\n       * _RESOLVED\n       * @param value\n       * @private\n       */\n      function _RESOLVED(value) {\n        /**\n         * 取得onFulfilled的返回值，判断是否返回一个promise\n         * 回调方式的then\n         * @example\n         * new Promise(function(resolve, reject){\n         *  resolve('test')\n         * })\n         *  .then(function(result){\n         *    return new Promise(function(resolve, reject){\n         *      resolve(result + 'test')\n         *    })\n         *      .then()\n         *  })\n         */\n        returnedValue = Promise.isFunction(onFulfilled) && onFulfilled(value) || value\n\n        try {\n          if (returnedValue && returnedValue instanceof Promise) {\n            returnedValue.then((value) => {\n              resolve(value)\n            }, (reason) => {\n              reject(reason)\n            })\n          } else {\n            resolve(returnedValue)\n          }\n\n        } catch (e) {\n          reject(e)\n        }\n      }\n\n      /**\n       * 失败的错误\n       * @param reason\n       * @private\n       */\n      function _REJECTED(reason) {\n        returnedValue = Promise.isFunction(onRejected) && onRejected(reason) || reason\n\n        reject(returnedValue)\n      }\n\n      /**\n       * 直接调用resolve的情况\n       * @example\n       * Promise.resolve('test')\n       *  .then(function() {})\n       */\n\n      if (this._status === 'RESOLVED') {\n        _RESOLVED(this._value)\n\n      } else if (this._status === 'REJECTED') {\n        _REJECTED(this._reason)\n\n      } else if (this._status === 'PENDING') {\n        /**\n         * e.g. new Promise().then(function(result){})\n         */\n        this._deferreds.push(_RESOLVED)\n\n        this._rejecteds.push(_REJECTED)\n      }\n\n    })\n\n  }\n\n}\n/**\n * 将类返回，外面用babel编译\n * @type {Promise}\n */\nmodule.exports = Promise\n```\n","slug":"es6版promise","published":1,"updated":"2017-05-15T09:47:12.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb780004n8v34vrgt57f","content":"<h2 id=\"es6版Promise\"><a href=\"#es6版Promise\" class=\"headerlink\" title=\"es6版Promise\"></a>es6版Promise</h2><h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  resolve(<span class=\"string\">'resolve'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// resolve</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"Promise是一个构造函数，接受一个函数作为参数\"><a href=\"#Promise是一个构造函数，接受一个函数作为参数\" class=\"headerlink\" title=\"Promise是一个构造函数，接受一个函数作为参数\"></a><code>Promise</code>是一个构造函数，接受一个函数作为参数</h4><p>  这个函数接受两个参数：<br>  (1) resolve 成功的时候返回的数据 （履行承诺）<br>  (2) reject 失败的时候返回的数据 （拒绝承诺）</p>\n<h4 id=\"Promise原型方法\"><a href=\"#Promise原型方法\" class=\"headerlink\" title=\"Promise原型方法\"></a><code>Promise</code>原型方法</h4><p>  (1) <code>then</code>注册成功后的回调<br>  (2) <code>catch</code>注册失败后的回调<br><a id=\"more\"></a></p>\n<h4 id=\"上源代码——由于使用es6所以用babel，点击看编译过的代码\"><a href=\"#上源代码——由于使用es6所以用babel，点击看编译过的代码\" class=\"headerlink\" title=\"上源代码——由于使用es6所以用babel，点击看编译过的代码\"></a>上源代码——由于使用es6所以用babel，<a href=\"https://github.com/slipkinem/jsTest/blob/master/promise/final/promise.dist.js\" target=\"_blank\" rel=\"external\">点击看编译过的代码</a></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div></pre></td><td class=\"code\"><pre><div class=\"line\">class util &#123;</div><div class=\"line\">  static isFunction(value) &#123;</div><div class=\"line\">    return typeof value === &apos;function&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  static isArray(value) &#123;</div><div class=\"line\">    return Array.isArray(value)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Promise</div><div class=\"line\"> * @constructor</div><div class=\"line\"> */</div><div class=\"line\">class Promise extends util &#123;</div><div class=\"line\">  constructor(executor) &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 继承绑定，作为context调用父类的constructor</div><div class=\"line\">     */</div><div class=\"line\">    super(executor)</div><div class=\"line\"></div><div class=\"line\">    if (!Promise.isFunction(executor)) throw new TypeError(&apos;参数必须是一个函数&apos;)</div><div class=\"line\">    /**</div><div class=\"line\">     * @description</div><div class=\"line\">     * 状态分为 PENDING  可以过度到RESOLVED或REJECTED</div><div class=\"line\">     *        RESOLVED</div><div class=\"line\">     *        REJECTED</div><div class=\"line\">     * @type &#123;string&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._status = &apos;PENDING&apos;</div><div class=\"line\">    /**</div><div class=\"line\">     * 正确值</div><div class=\"line\">     * @type &#123;Object&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._value = Object.create(null)</div><div class=\"line\">    /**</div><div class=\"line\">     * 错误值</div><div class=\"line\">     * @type &#123;Object&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._reason = Object.create(null)</div><div class=\"line\">    /**</div><div class=\"line\">     * 储存错误回调</div><div class=\"line\">     * @type &#123;Array&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._rejecteds = []</div><div class=\"line\">    /**</div><div class=\"line\">     * 正确回调的方法集 </div><div class=\"line\">     * @type &#123;Array&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._deferreds = []</div><div class=\"line\">    /**</div><div class=\"line\">     * 在class中 constructor里面的函数无法直接访问this</div><div class=\"line\">     * 为了形成private，所以不放外面</div><div class=\"line\">     * @type &#123;Promise&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    let _this = this</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 执行承诺的函数</div><div class=\"line\">     * @param value</div><div class=\"line\">     */</div><div class=\"line\">    function resolve(value) &#123;</div><div class=\"line\">      /**</div><div class=\"line\">       * 异步，为了让then先执行，注册进回调</div><div class=\"line\">       */</div><div class=\"line\">      setTimeout(() =&gt; &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">          if (_this._status === &apos;PENDING&apos;) &#123;</div><div class=\"line\">            _this._status = &apos;RESOLVED&apos;</div><div class=\"line\">            _this._value = value</div><div class=\"line\">            /**</div><div class=\"line\">             * 循环执行所有的回调</div><div class=\"line\">             */</div><div class=\"line\">            _this._deferreds.forEach((deferred) =&gt; &#123;</div><div class=\"line\">              deferred(value)</div><div class=\"line\">            &#125;)</div><div class=\"line\"></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125; catch (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function reject(reason) &#123;</div><div class=\"line\">      setTimeout(() =&gt; &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">          if (_this._status === &apos;PENDING&apos;) &#123;</div><div class=\"line\">            _this._status = &apos;REJECTED&apos;</div><div class=\"line\">            _this._reason = reason</div><div class=\"line\"></div><div class=\"line\">            _this._rejecteds.forEach((rejected) =&gt; &#123;</div><div class=\"line\">              rejected(reason)</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125; catch (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    try &#123;</div><div class=\"line\">      executor(resolve, reject)</div><div class=\"line\">    &#125; catch (e) &#123;</div><div class=\"line\">      reject(e)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * resolve方法</div><div class=\"line\">   * @example Promise.resolve(&apos;test&apos;).then(function(result)&#123; result // test &#125;)</div><div class=\"line\">   * @param value</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  static resolve(value) &#123;</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">      resolve(value)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * all方法 当需要许多promise一起执行的时候用，最后返回一个存有所有promise返回值的数组</div><div class=\"line\">   * 当一个promise reject掉了，认为此all方法执行失败，进入reject</div><div class=\"line\">   * @param promises</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  static all(promises) &#123;</div><div class=\"line\">    if (!Promise.isArray(promises)) throw new TypeError(&apos;promises 必须是一个数组&apos;)</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 返回一个Promise</div><div class=\"line\">     */</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">      let result = [],</div><div class=\"line\">        len = promises.length</div><div class=\"line\"></div><div class=\"line\">      /**</div><div class=\"line\">       * 将所有的返回值存储起来</div><div class=\"line\">       * @param value</div><div class=\"line\">       */</div><div class=\"line\">      function resolveAll(value) &#123;</div><div class=\"line\">        result.push(value)</div><div class=\"line\"></div><div class=\"line\">        if (--len === 0) &#123;</div><div class=\"line\">          resolve(result)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      promises.forEach(function (promise) &#123;</div><div class=\"line\">        /**</div><div class=\"line\">         * 将成功后的加入result数组</div><div class=\"line\">         * 一旦有一个失败，则直接返回失败</div><div class=\"line\">         */</div><div class=\"line\">        promise.then(resolveAll, reject)</div><div class=\"line\">      &#125;)</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * 方便使用，封装catch方法</div><div class=\"line\">   * @param onRejected</div><div class=\"line\">   */</div><div class=\"line\">  catch(onRejected) &#123;</div><div class=\"line\">    this.then(null, onRejected)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * 重点方法，then</div><div class=\"line\">   * @param onFulfilled</div><div class=\"line\">   * @param onRejected</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  then(onFulfilled, onRejected) &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 每次执行then都会返回一个promise供链式调用</div><div class=\"line\">     */</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">      let returnedValue = Object.create(null)</div><div class=\"line\">      /**</div><div class=\"line\">       * 如果是RESOLVED状态说明执行了过resolve函数，this.value是有值的</div><div class=\"line\">       * e.g. Promise.resolve(&apos;resolve&apos;).then(function(result)&#123;&#125;)</div><div class=\"line\">       * 最主要看onFulfilled返回值是什么</div><div class=\"line\">       */</div><div class=\"line\">      /**</div><div class=\"line\">       * _RESOLVED</div><div class=\"line\">       * @param value</div><div class=\"line\">       * @private</div><div class=\"line\">       */</div><div class=\"line\">      function _RESOLVED(value) &#123;</div><div class=\"line\">        /**</div><div class=\"line\">         * 取得onFulfilled的返回值，判断是否返回一个promise</div><div class=\"line\">         * 回调方式的then</div><div class=\"line\">         * @example</div><div class=\"line\">         * new Promise(function(resolve, reject)&#123;</div><div class=\"line\">         *  resolve(&apos;test&apos;)</div><div class=\"line\">         * &#125;)</div><div class=\"line\">         *  .then(function(result)&#123;</div><div class=\"line\">         *    return new Promise(function(resolve, reject)&#123;</div><div class=\"line\">         *      resolve(result + &apos;test&apos;)</div><div class=\"line\">         *    &#125;)</div><div class=\"line\">         *      .then()</div><div class=\"line\">         *  &#125;)</div><div class=\"line\">         */</div><div class=\"line\">        returnedValue = Promise.isFunction(onFulfilled) &amp;&amp; onFulfilled(value) || value</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">          if (returnedValue &amp;&amp; returnedValue instanceof Promise) &#123;</div><div class=\"line\">            returnedValue.then((value) =&gt; &#123;</div><div class=\"line\">              resolve(value)</div><div class=\"line\">            &#125;, (reason) =&gt; &#123;</div><div class=\"line\">              reject(reason)</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125; else &#123;</div><div class=\"line\">            resolve(returnedValue)</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125; catch (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      /**</div><div class=\"line\">       * 失败的错误</div><div class=\"line\">       * @param reason</div><div class=\"line\">       * @private</div><div class=\"line\">       */</div><div class=\"line\">      function _REJECTED(reason) &#123;</div><div class=\"line\">        returnedValue = Promise.isFunction(onRejected) &amp;&amp; onRejected(reason) || reason</div><div class=\"line\"></div><div class=\"line\">        reject(returnedValue)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      /**</div><div class=\"line\">       * 直接调用resolve的情况</div><div class=\"line\">       * @example</div><div class=\"line\">       * Promise.resolve(&apos;test&apos;)</div><div class=\"line\">       *  .then(function() &#123;&#125;)</div><div class=\"line\">       */</div><div class=\"line\"></div><div class=\"line\">      if (this._status === &apos;RESOLVED&apos;) &#123;</div><div class=\"line\">        _RESOLVED(this._value)</div><div class=\"line\"></div><div class=\"line\">      &#125; else if (this._status === &apos;REJECTED&apos;) &#123;</div><div class=\"line\">        _REJECTED(this._reason)</div><div class=\"line\"></div><div class=\"line\">      &#125; else if (this._status === &apos;PENDING&apos;) &#123;</div><div class=\"line\">        /**</div><div class=\"line\">         * e.g. new Promise().then(function(result)&#123;&#125;)</div><div class=\"line\">         */</div><div class=\"line\">        this._deferreds.push(_RESOLVED)</div><div class=\"line\"></div><div class=\"line\">        this._rejecteds.push(_REJECTED)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">/**</div><div class=\"line\"> * 将类返回，外面用babel编译</div><div class=\"line\"> * @type &#123;Promise&#125;</div><div class=\"line\"> */</div><div class=\"line\">module.exports = Promise</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"es6版Promise\"><a href=\"#es6版Promise\" class=\"headerlink\" title=\"es6版Promise\"></a>es6版Promise</h2><h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  resolve(<span class=\"string\">'resolve'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// resolve</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"Promise是一个构造函数，接受一个函数作为参数\"><a href=\"#Promise是一个构造函数，接受一个函数作为参数\" class=\"headerlink\" title=\"Promise是一个构造函数，接受一个函数作为参数\"></a><code>Promise</code>是一个构造函数，接受一个函数作为参数</h4><p>  这个函数接受两个参数：<br>  (1) resolve 成功的时候返回的数据 （履行承诺）<br>  (2) reject 失败的时候返回的数据 （拒绝承诺）</p>\n<h4 id=\"Promise原型方法\"><a href=\"#Promise原型方法\" class=\"headerlink\" title=\"Promise原型方法\"></a><code>Promise</code>原型方法</h4><p>  (1) <code>then</code>注册成功后的回调<br>  (2) <code>catch</code>注册失败后的回调<br></p>","more":"<p></p>\n<h4 id=\"上源代码——由于使用es6所以用babel，点击看编译过的代码\"><a href=\"#上源代码——由于使用es6所以用babel，点击看编译过的代码\" class=\"headerlink\" title=\"上源代码——由于使用es6所以用babel，点击看编译过的代码\"></a>上源代码——由于使用es6所以用babel，<a href=\"https://github.com/slipkinem/jsTest/blob/master/promise/final/promise.dist.js\">点击看编译过的代码</a></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div></pre></td><td class=\"code\"><pre><div class=\"line\">class util &#123;</div><div class=\"line\">  static isFunction(value) &#123;</div><div class=\"line\">    return typeof value === &apos;function&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  static isArray(value) &#123;</div><div class=\"line\">    return Array.isArray(value)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Promise</div><div class=\"line\"> * @constructor</div><div class=\"line\"> */</div><div class=\"line\">class Promise extends util &#123;</div><div class=\"line\">  constructor(executor) &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 继承绑定，作为context调用父类的constructor</div><div class=\"line\">     */</div><div class=\"line\">    super(executor)</div><div class=\"line\"></div><div class=\"line\">    if (!Promise.isFunction(executor)) throw new TypeError(&apos;参数必须是一个函数&apos;)</div><div class=\"line\">    /**</div><div class=\"line\">     * @description</div><div class=\"line\">     * 状态分为 PENDING  可以过度到RESOLVED或REJECTED</div><div class=\"line\">     *        RESOLVED</div><div class=\"line\">     *        REJECTED</div><div class=\"line\">     * @type &#123;string&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._status = &apos;PENDING&apos;</div><div class=\"line\">    /**</div><div class=\"line\">     * 正确值</div><div class=\"line\">     * @type &#123;Object&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._value = Object.create(null)</div><div class=\"line\">    /**</div><div class=\"line\">     * 错误值</div><div class=\"line\">     * @type &#123;Object&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._reason = Object.create(null)</div><div class=\"line\">    /**</div><div class=\"line\">     * 储存错误回调</div><div class=\"line\">     * @type &#123;Array&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._rejecteds = []</div><div class=\"line\">    /**</div><div class=\"line\">     * 正确回调的方法集 </div><div class=\"line\">     * @type &#123;Array&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    this._deferreds = []</div><div class=\"line\">    /**</div><div class=\"line\">     * 在class中 constructor里面的函数无法直接访问this</div><div class=\"line\">     * 为了形成private，所以不放外面</div><div class=\"line\">     * @type &#123;Promise&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    let _this = this</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 执行承诺的函数</div><div class=\"line\">     * @param value</div><div class=\"line\">     */</div><div class=\"line\">    function resolve(value) &#123;</div><div class=\"line\">      /**</div><div class=\"line\">       * 异步，为了让then先执行，注册进回调</div><div class=\"line\">       */</div><div class=\"line\">      setTimeout(() =&gt; &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">          if (_this._status === &apos;PENDING&apos;) &#123;</div><div class=\"line\">            _this._status = &apos;RESOLVED&apos;</div><div class=\"line\">            _this._value = value</div><div class=\"line\">            /**</div><div class=\"line\">             * 循环执行所有的回调</div><div class=\"line\">             */</div><div class=\"line\">            _this._deferreds.forEach((deferred) =&gt; &#123;</div><div class=\"line\">              deferred(value)</div><div class=\"line\">            &#125;)</div><div class=\"line\"></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125; catch (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function reject(reason) &#123;</div><div class=\"line\">      setTimeout(() =&gt; &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">          if (_this._status === &apos;PENDING&apos;) &#123;</div><div class=\"line\">            _this._status = &apos;REJECTED&apos;</div><div class=\"line\">            _this._reason = reason</div><div class=\"line\"></div><div class=\"line\">            _this._rejecteds.forEach((rejected) =&gt; &#123;</div><div class=\"line\">              rejected(reason)</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125; catch (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    try &#123;</div><div class=\"line\">      executor(resolve, reject)</div><div class=\"line\">    &#125; catch (e) &#123;</div><div class=\"line\">      reject(e)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * resolve方法</div><div class=\"line\">   * @example Promise.resolve(&apos;test&apos;).then(function(result)&#123; result // test &#125;)</div><div class=\"line\">   * @param value</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  static resolve(value) &#123;</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">      resolve(value)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * all方法 当需要许多promise一起执行的时候用，最后返回一个存有所有promise返回值的数组</div><div class=\"line\">   * 当一个promise reject掉了，认为此all方法执行失败，进入reject</div><div class=\"line\">   * @param promises</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  static all(promises) &#123;</div><div class=\"line\">    if (!Promise.isArray(promises)) throw new TypeError(&apos;promises 必须是一个数组&apos;)</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 返回一个Promise</div><div class=\"line\">     */</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">      let result = [],</div><div class=\"line\">        len = promises.length</div><div class=\"line\"></div><div class=\"line\">      /**</div><div class=\"line\">       * 将所有的返回值存储起来</div><div class=\"line\">       * @param value</div><div class=\"line\">       */</div><div class=\"line\">      function resolveAll(value) &#123;</div><div class=\"line\">        result.push(value)</div><div class=\"line\"></div><div class=\"line\">        if (--len === 0) &#123;</div><div class=\"line\">          resolve(result)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      promises.forEach(function (promise) &#123;</div><div class=\"line\">        /**</div><div class=\"line\">         * 将成功后的加入result数组</div><div class=\"line\">         * 一旦有一个失败，则直接返回失败</div><div class=\"line\">         */</div><div class=\"line\">        promise.then(resolveAll, reject)</div><div class=\"line\">      &#125;)</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * 方便使用，封装catch方法</div><div class=\"line\">   * @param onRejected</div><div class=\"line\">   */</div><div class=\"line\">  catch(onRejected) &#123;</div><div class=\"line\">    this.then(null, onRejected)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * 重点方法，then</div><div class=\"line\">   * @param onFulfilled</div><div class=\"line\">   * @param onRejected</div><div class=\"line\">   * @returns &#123;Promise&#125;</div><div class=\"line\">   */</div><div class=\"line\">  then(onFulfilled, onRejected) &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 每次执行then都会返回一个promise供链式调用</div><div class=\"line\">     */</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">      let returnedValue = Object.create(null)</div><div class=\"line\">      /**</div><div class=\"line\">       * 如果是RESOLVED状态说明执行了过resolve函数，this.value是有值的</div><div class=\"line\">       * e.g. Promise.resolve(&apos;resolve&apos;).then(function(result)&#123;&#125;)</div><div class=\"line\">       * 最主要看onFulfilled返回值是什么</div><div class=\"line\">       */</div><div class=\"line\">      /**</div><div class=\"line\">       * _RESOLVED</div><div class=\"line\">       * @param value</div><div class=\"line\">       * @private</div><div class=\"line\">       */</div><div class=\"line\">      function _RESOLVED(value) &#123;</div><div class=\"line\">        /**</div><div class=\"line\">         * 取得onFulfilled的返回值，判断是否返回一个promise</div><div class=\"line\">         * 回调方式的then</div><div class=\"line\">         * @example</div><div class=\"line\">         * new Promise(function(resolve, reject)&#123;</div><div class=\"line\">         *  resolve(&apos;test&apos;)</div><div class=\"line\">         * &#125;)</div><div class=\"line\">         *  .then(function(result)&#123;</div><div class=\"line\">         *    return new Promise(function(resolve, reject)&#123;</div><div class=\"line\">         *      resolve(result + &apos;test&apos;)</div><div class=\"line\">         *    &#125;)</div><div class=\"line\">         *      .then()</div><div class=\"line\">         *  &#125;)</div><div class=\"line\">         */</div><div class=\"line\">        returnedValue = Promise.isFunction(onFulfilled) &amp;&amp; onFulfilled(value) || value</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">          if (returnedValue &amp;&amp; returnedValue instanceof Promise) &#123;</div><div class=\"line\">            returnedValue.then((value) =&gt; &#123;</div><div class=\"line\">              resolve(value)</div><div class=\"line\">            &#125;, (reason) =&gt; &#123;</div><div class=\"line\">              reject(reason)</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125; else &#123;</div><div class=\"line\">            resolve(returnedValue)</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125; catch (e) &#123;</div><div class=\"line\">          reject(e)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      /**</div><div class=\"line\">       * 失败的错误</div><div class=\"line\">       * @param reason</div><div class=\"line\">       * @private</div><div class=\"line\">       */</div><div class=\"line\">      function _REJECTED(reason) &#123;</div><div class=\"line\">        returnedValue = Promise.isFunction(onRejected) &amp;&amp; onRejected(reason) || reason</div><div class=\"line\"></div><div class=\"line\">        reject(returnedValue)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      /**</div><div class=\"line\">       * 直接调用resolve的情况</div><div class=\"line\">       * @example</div><div class=\"line\">       * Promise.resolve(&apos;test&apos;)</div><div class=\"line\">       *  .then(function() &#123;&#125;)</div><div class=\"line\">       */</div><div class=\"line\"></div><div class=\"line\">      if (this._status === &apos;RESOLVED&apos;) &#123;</div><div class=\"line\">        _RESOLVED(this._value)</div><div class=\"line\"></div><div class=\"line\">      &#125; else if (this._status === &apos;REJECTED&apos;) &#123;</div><div class=\"line\">        _REJECTED(this._reason)</div><div class=\"line\"></div><div class=\"line\">      &#125; else if (this._status === &apos;PENDING&apos;) &#123;</div><div class=\"line\">        /**</div><div class=\"line\">         * e.g. new Promise().then(function(result)&#123;&#125;)</div><div class=\"line\">         */</div><div class=\"line\">        this._deferreds.push(_RESOLVED)</div><div class=\"line\"></div><div class=\"line\">        this._rejecteds.push(_REJECTED)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">/**</div><div class=\"line\"> * 将类返回，外面用babel编译</div><div class=\"line\"> * @type &#123;Promise&#125;</div><div class=\"line\"> */</div><div class=\"line\">module.exports = Promise</div></pre></td></tr></table></figure>"},{"title":"java SSM和vue整合","date":"2017-04-25T06:18:45.000Z","_content":"\n# SSM整合流程\n## spring spring-mvc mybatis maven\n * web前端项目的源码[vue-admin](https://github.com/slipkinem/vue-admin)\n * 数据库的sql文件[vue_admin.sql](vue_admin.sql)\n\n### IDE idea\n1. File => new Project => maven => create from archetype => **maven-archetype-webapp**  \n![1](1.png)\n2. 一直点击next直到finished，maven会自动创建一个项目目录  \n![2](2.png)\n  * 最终项目目录结构图  \n<!-- more -->\n```$xslt\n│  .gitignore\n│  pom.xml\n│  README.md\n│  tree.txt\n│  \n├─src\n│  └─main\n│      ├─java\n│      │  └─cn\n│      │      └─lvsen\n│      │          └─test\n│      │              ├─controller\n│      │              │      TableController.java\n│      │              │      UserController.java\n│      │              │      \n│      │              ├─dao\n│      │              │      TableDataMapper.java\n│      │              │      UserMapper.java\n│      │              │      \n│      │              ├─interceptor\n│      │              │      AuthInterceptor.java\n│      │              │      \n│      │              ├─mapping\n│      │              │      TableDataMapper.xml\n│      │              │      UserMapper.xml\n│      │              │      \n│      │              ├─model\n│      │              │      TableData.java\n│      │              │      TableDataExample.java\n│      │              │      User.java\n│      │              │      UserExample.java\n│      │              │      \n│      │              └─service\n│      │                  │  TableService.java\n│      │                  │  UserService.java\n│      │                  │  \n│      │                  └─impl\n│      │                          TableServiceImpl.java\n│      │                          UserServiceImpl.java\n│      │                          \n│      ├─resources\n│      │  │  generatorConfig.xml\n│      │  │  jdbc.properties\n│      │  │  logback.xml.bak\n│      │  │  \n│      │  └─spring\n│      │          spring-mvc.xml\n│      │          spring-mybatis.xml\n│      │          \n│      └─webapp\n│          │  index.html\n│          │  index.jsp\n│          │  \n│          ├─static\n│          │  ├─css\n│          │  │      app.f3c8e005c2be0a746136766675898059.css\n│          │  │      app.f3c8e005c2be0a746136766675898059.css.gz\n│          │  │      \n│          │  ├─fonts\n│          │  │      element-icons.b02bdc1.ttf\n│          │  │      \n│          │  └─js\n│          │          0.105cd4667842b0092158.js\n│          │          1.3f78774435db7aa5de2a.js\n│          │          app.3ec6fa4bebfb1bb58a2b.js\n│          │          app.3ec6fa4bebfb1bb58a2b.js.gz\n│          │          manifest.b0bb778337a7d07c6313.js\n│          │          vendor.bbf93d5282d3216eb30e.js\n│          │          vendor.bbf93d5282d3216eb30e.js.gz\n│          │          \n│          └─WEB-INF\n│                  web.xml\n│                  \n└─test\n        TestHello.java\n```\n3. 在创建的POM里面添加依赖  \n    pom.xml\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>article</groupId>\n  <artifactId>article</artifactId>\n  <packaging>war</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>article Maven Webapp</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n    <spring.version>4.2.5.RELEASE</spring.version>\n  </properties>\n\n  <dependencies>\n    <!--测试-->\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n      <scope>test</scope>\n    </dependency>\n    <!--spring-->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-core</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- jdbc连接池 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-jdbc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 事务管理 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-tx</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!--spring测试用-->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-test</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 注解扫描 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- MVC -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-webmvc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 切面，将日志记录，事务等分离开来 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-aop</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- mybatis和spring结合用 -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis-spring</artifactId>\n      <version>1.2.4</version>\n    </dependency>\n    <!-- mysql连接驱动 -->\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>5.1.38</version>\n    </dependency>\n    <!-- 连接数据库 -->\n    <dependency>\n      <groupId>commons-dbcp</groupId>\n      <artifactId>commons-dbcp</artifactId>\n      <version>1.4</version>\n    </dependency>\n  <!-- mybatis -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis</artifactId>\n      <version>3.3.1</version>\n    </dependency>\n    <!-- 转换json用 -->\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>fastjson</artifactId>\n      <version>1.2.7</version>\n    </dependency>\n    <!-- jackson转换json用 @ResponseBody默认调用jackson，将java对象转为json -->\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-core</artifactId>\n      <version>2.8.7</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-annotations</artifactId>\n      <version>2.8.0</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-databind</artifactId>\n      <version>2.8.7</version>\n    </dependency>\n    <!-- 分页插件 -->\n    <dependency>\n      <groupId>com.github.pagehelper</groupId>\n      <artifactId>pagehelper</artifactId>\n      <version>5.0.0</version>\n    </dependency>\n    <!-- javaHttp基础包 -->\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>3.1.0</version>\n    </dependency>\n    <!-- 日志 -->\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-api</artifactId>\n      <version>1.7.24</version>\n    </dependency>\n    <!-- slf4j要配合其他日志包运行，slf4j起个管理的作用 -->\n    <dependency>\n      <groupId>ch.qos.logback</groupId>\n      <artifactId>logback-classic</artifactId>\n      <version>1.1.11</version>\n    </dependency>\n\n  </dependencies>\n\n\n  <build>\n    <finalName>article</finalName>\n    <!-- 防止package打包不到XML-->\n    <resources>\n      <resource>\n        <directory>src/main/java</directory>\n        <includes>\n          <include>**/*.xml</include>\n        </includes>\n        <filtering>true</filtering>\n      </resource>\n    </resources>\n\n    <plugins>\n      <!-- mybatis生成代码插件 -->\n      <plugin>\n        <groupId>org.mybatis.generator</groupId>\n        <artifactId>mybatis-generator-maven-plugin</artifactId>\n        <version>1.3.5</version>\n        <configuration>\n          <!-- 生成文件的配置 -->\n          <configurationFile>src/main/resources/generatorConfig.xml</configurationFile>\n          <verbose>true</verbose>\n          <overwrite>true</overwrite>\n        </configuration>\n      </plugin>\n      <plugin>\n        <!-- maven插件 -->\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <source>1.6</source>\n          <target>1.6</target>\n        </configuration>\n      </plugin>\n    </plugins>\n\n  </build>\n</project>\n```\n4. 配置mybatisGeneratorConfig，需要连接数据库，\n    将准备的sql文件导入数据库中[vue_admin.sql](vue_admin.sql)  \ngeneratorConfig.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n    PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n    \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n\n  <!--<properties resource=\"jdbc.properties\"/>-->\n\n  <!--连接mysql的jar包-->\n  <classPathEntry\n      location=\"C:/Users/**/.m2/repository/mysql/mysql-connector-java/5.1.29/mysql-connector-java-5.1.29.jar\" />\n\n  <context id=\"default\" targetRuntime=\"MyBatis3\">\n    <!-- jdbc连接 -->\n    <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\"\n                    connectionURL=\"jdbc:mysql://localhost:3306/vue_admin\"\n                    userId=\"**\"\n                    password=\"**\"/>\n    <!-- 生成model =》 数据层 -->\n    <javaModelGenerator targetPackage=\"cn.lvsen.test.model\" targetProject=\"src/main/java\">\n    </javaModelGenerator>\n    <!-- 生成mapper 存有mybatis的数据库操作xml -->\n    <sqlMapGenerator targetPackage=\"cn.lvsen.test.mapping\" targetProject=\"src/main/java\">\n    </sqlMapGenerator>\n    <!-- 存有mappper的接口类，mybatis会自动生成实体类，将mapper和dao连接起来 -->\n    <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"cn.lvsen.test.dao\" targetProject=\"src/main/java\">\n    </javaClientGenerator>\n    <!-- 表的名字 -->\n    <table tableName=\"t_table\" domainObjectName=\"TableData\"/>\n    <table tableName=\"t_user\" domainObjectName=\"User\" />\n  </context>\n</generatorConfiguration>\n```\n5. 配置resources/spring/spring-mvc.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n\n  <!--扫描包，查注解-->\n  <context:component-scan base-package=\"cn.lvsen.test\"/>\n\n  <!--映射器与适配器，去掉@ResponseBody就会出问题-->\n  <mvc:annotation-driven/>\n  <!-- 静态资源放置地 -->\n  <mvc:resources mapping=\"/**\" location=\"static\" />\n  <!--<mvc:resources mapping=\"/css/**\" location=\"static\" />-->\n  <mvc:default-servlet-handler />\n  <!-- 拦截器 -->\n  <mvc:interceptors>\n    <mvc:interceptor>\n      <mvc:mapping path=\"/api/**\"/>\n      <bean class=\"cn.lvsen.test.interceptor.AuthInterceptor\"/>\n    </mvc:interceptor>\n  </mvc:interceptors>\n  <!-- 视图 -->\n  <bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"\n        p:prefix=\"/\" p:suffix=\".html\"/>\n</beans>\n```\n6. 配置resources/spring/spring-mybatis.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n  <!--引入jdbc的配置文件-->\n  <bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n    <property name=\"location\" value=\"classpath:jdbc.properties\" />\n  </bean>\n  <!--jdbc连接数据库基本配置-->\n  <bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n    <property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n    <property name=\"url\" value=\"${jdbc.url}\" />\n    <property name=\"username\" value=\"${jdbc.username}\" />\n    <property name=\"password\" value=\"${jdbc.password}\" />\n  </bean>\n  <!--spring和mybatis结合的配置-->\n  <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <property name=\"mapperLocations\" value=\"classpath:cn/lvsen/test/mapping/*Mapper.xml\" />\n    <property name=\"plugins\">\n      <array>\n        <bean class=\"com.github.pagehelper.PageInterceptor\">\n          <!--少了这句话会导致空指针异常-->\n          <property name=\"properties\">\n            <value></value>\n          </property>\n        </bean>\n      </array>\n    </property>\n  </bean>\n\n  <!--dao接口，sping会自动查找其中的类 dao ——> 数据访问层 dao映射的mapper，去掉启动报错-->\n  <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n    <property name=\"basePackage\" value=\"cn.lvsen.test.dao\"/>\n    <!--对应上面id=\"sqlSessionFactory\"-->\n    <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\" />\n  </bean>\n</beans>\n```\n\n7. spring-mybatis.xml配置时用了**jdbc.properties**这是为了方便管理连接  \n    resources/jdbc.properties的配置\n```\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/vue_admin?useUnicode=true&characterEncoding=UTF-8\njdbc.username=**\njdbc.password=**\n```\n8. web.xml配置，web.xml是这个web项目的入口  \n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://java.sun.com/xml/ns/javaee\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n         version=\"3.0\">\n  <display-name>Archetype Created Web Application</display-name>\n  <!--spring和mybatis的配置文件-->\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:spring/spring-mybatis.xml</param-value>\n  </context-param>\n\n  <!--spring监听器-->\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n\n  <!--解决乱码-->\n  <filter>\n    <filter-name>SpringEncodingFilter</filter-name>\n    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n    <init-param>\n      <param-name>encoding</param-name>\n      <param-value>UTF-8</param-value>\n    </init-param>\n    <init-param>\n      <param-name>forceEncoding</param-name>\n      <param-value>true</param-value>\n    </init-param>\n  </filter>\n  <!--映射的路径-->\n  <filter-mapping>\n    <filter-name>SpringEncodingFilter</filter-name>\n    <url-pattern>/</url-pattern>\n  </filter-mapping>\n  <!-- 声明静态资源类型，加入spring扫描 -->\n  <servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>*.html</url-pattern>\n  </servlet-mapping>\n\n  <!--spring MVC 核心分发器-->\n  <servlet>\n    <servlet-name>SpringMvc</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>classpath:spring/spring-mvc.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>SpringMvc</servlet-name>\n    <url-pattern>/</url-pattern>\n  </servlet-mapping>\n  <!-- 首页，可以多个，根据顺来显示-->\n  <welcome-file-list>\n    <welcome-file>index.html</welcome-file>\n  </welcome-file-list>\n</web-app>\n```\n\n9. SSM基本配置完了，其他功能需要的时候再加，现在新建文件夹  \n  * java/cn.xx.xx/controller  // controller层\n  * java/cn.xx.xx/service // service层\n  * java/cn.xx.xx/service/impl // service层接口的实现类\n  * webapp/index.html\n\n10. 在controller里面新建一个UserController类，  \n进行restAPI的书写,api使用url: **api/user/hello**\n```$xslt\n@Controller\n@RequestMapping(\"api/user\")\npublic class UserController {\n\n    @RequestMapping(value = \"hello\", method = RequestMethod.GET) \n    @ResponseBody // 要返回json数据\n    public Map login(HttpSession httpSession) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        \n        try {\n          map.put(\"errorCode\", 0);\n          map.put(\"message\", \"hello\");\n        } catch (Exception e) {\n            map.put(\"errorCode\", 1);\n            map.put(\"errorMessage\", \"未知错误\");\n        }\n        return map;\n    }\n```\n\n11. 一个接口写好，然后配置服务器启动项目  \n  1.![3](3.png)  \n  2.![4](4.png)  \n  3.![5](5.png)  \n  然后点击**apply** => **OK**  \n项目启动，打开地址栏，追加输入**api/user/hello**，拿到数据OK，后台走通\n\n### 前端部分\n12. 后台暂时放置，开始写前端**[前端部分代码](https://github.com/slipkinem/vue-admin)**\n#### 前端框架用的VUE，UI框架用的饿了么开源的element_ui\n  * 总概况：vue+vue-router+vue-resource+vuex+element_ui\n13. **用npm下载vue-cli**\n  * 用vue-cli生成webpack项目骨架\n  * npm install 下载所有依赖\n14. ","source":"_posts/2017/04/java-ssm.md","raw":"---\ntitle: java SSM和vue整合\ncategories: 课外学习\ndate: 2017-04-25 14:18:45\ntags:\n  - java\n  - ssm\n  - javascript\n---\n\n# SSM整合流程\n## spring spring-mvc mybatis maven\n * web前端项目的源码[vue-admin](https://github.com/slipkinem/vue-admin)\n * 数据库的sql文件[vue_admin.sql](vue_admin.sql)\n\n### IDE idea\n1. File => new Project => maven => create from archetype => **maven-archetype-webapp**  \n![1](1.png)\n2. 一直点击next直到finished，maven会自动创建一个项目目录  \n![2](2.png)\n  * 最终项目目录结构图  \n<!-- more -->\n```$xslt\n│  .gitignore\n│  pom.xml\n│  README.md\n│  tree.txt\n│  \n├─src\n│  └─main\n│      ├─java\n│      │  └─cn\n│      │      └─lvsen\n│      │          └─test\n│      │              ├─controller\n│      │              │      TableController.java\n│      │              │      UserController.java\n│      │              │      \n│      │              ├─dao\n│      │              │      TableDataMapper.java\n│      │              │      UserMapper.java\n│      │              │      \n│      │              ├─interceptor\n│      │              │      AuthInterceptor.java\n│      │              │      \n│      │              ├─mapping\n│      │              │      TableDataMapper.xml\n│      │              │      UserMapper.xml\n│      │              │      \n│      │              ├─model\n│      │              │      TableData.java\n│      │              │      TableDataExample.java\n│      │              │      User.java\n│      │              │      UserExample.java\n│      │              │      \n│      │              └─service\n│      │                  │  TableService.java\n│      │                  │  UserService.java\n│      │                  │  \n│      │                  └─impl\n│      │                          TableServiceImpl.java\n│      │                          UserServiceImpl.java\n│      │                          \n│      ├─resources\n│      │  │  generatorConfig.xml\n│      │  │  jdbc.properties\n│      │  │  logback.xml.bak\n│      │  │  \n│      │  └─spring\n│      │          spring-mvc.xml\n│      │          spring-mybatis.xml\n│      │          \n│      └─webapp\n│          │  index.html\n│          │  index.jsp\n│          │  \n│          ├─static\n│          │  ├─css\n│          │  │      app.f3c8e005c2be0a746136766675898059.css\n│          │  │      app.f3c8e005c2be0a746136766675898059.css.gz\n│          │  │      \n│          │  ├─fonts\n│          │  │      element-icons.b02bdc1.ttf\n│          │  │      \n│          │  └─js\n│          │          0.105cd4667842b0092158.js\n│          │          1.3f78774435db7aa5de2a.js\n│          │          app.3ec6fa4bebfb1bb58a2b.js\n│          │          app.3ec6fa4bebfb1bb58a2b.js.gz\n│          │          manifest.b0bb778337a7d07c6313.js\n│          │          vendor.bbf93d5282d3216eb30e.js\n│          │          vendor.bbf93d5282d3216eb30e.js.gz\n│          │          \n│          └─WEB-INF\n│                  web.xml\n│                  \n└─test\n        TestHello.java\n```\n3. 在创建的POM里面添加依赖  \n    pom.xml\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>article</groupId>\n  <artifactId>article</artifactId>\n  <packaging>war</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>article Maven Webapp</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n    <spring.version>4.2.5.RELEASE</spring.version>\n  </properties>\n\n  <dependencies>\n    <!--测试-->\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n      <scope>test</scope>\n    </dependency>\n    <!--spring-->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-core</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- jdbc连接池 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-jdbc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 事务管理 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-tx</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!--spring测试用-->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-test</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 注解扫描 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- MVC -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-webmvc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- 切面，将日志记录，事务等分离开来 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-aop</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <!-- mybatis和spring结合用 -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis-spring</artifactId>\n      <version>1.2.4</version>\n    </dependency>\n    <!-- mysql连接驱动 -->\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>5.1.38</version>\n    </dependency>\n    <!-- 连接数据库 -->\n    <dependency>\n      <groupId>commons-dbcp</groupId>\n      <artifactId>commons-dbcp</artifactId>\n      <version>1.4</version>\n    </dependency>\n  <!-- mybatis -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis</artifactId>\n      <version>3.3.1</version>\n    </dependency>\n    <!-- 转换json用 -->\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>fastjson</artifactId>\n      <version>1.2.7</version>\n    </dependency>\n    <!-- jackson转换json用 @ResponseBody默认调用jackson，将java对象转为json -->\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-core</artifactId>\n      <version>2.8.7</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-annotations</artifactId>\n      <version>2.8.0</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-databind</artifactId>\n      <version>2.8.7</version>\n    </dependency>\n    <!-- 分页插件 -->\n    <dependency>\n      <groupId>com.github.pagehelper</groupId>\n      <artifactId>pagehelper</artifactId>\n      <version>5.0.0</version>\n    </dependency>\n    <!-- javaHttp基础包 -->\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>3.1.0</version>\n    </dependency>\n    <!-- 日志 -->\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-api</artifactId>\n      <version>1.7.24</version>\n    </dependency>\n    <!-- slf4j要配合其他日志包运行，slf4j起个管理的作用 -->\n    <dependency>\n      <groupId>ch.qos.logback</groupId>\n      <artifactId>logback-classic</artifactId>\n      <version>1.1.11</version>\n    </dependency>\n\n  </dependencies>\n\n\n  <build>\n    <finalName>article</finalName>\n    <!-- 防止package打包不到XML-->\n    <resources>\n      <resource>\n        <directory>src/main/java</directory>\n        <includes>\n          <include>**/*.xml</include>\n        </includes>\n        <filtering>true</filtering>\n      </resource>\n    </resources>\n\n    <plugins>\n      <!-- mybatis生成代码插件 -->\n      <plugin>\n        <groupId>org.mybatis.generator</groupId>\n        <artifactId>mybatis-generator-maven-plugin</artifactId>\n        <version>1.3.5</version>\n        <configuration>\n          <!-- 生成文件的配置 -->\n          <configurationFile>src/main/resources/generatorConfig.xml</configurationFile>\n          <verbose>true</verbose>\n          <overwrite>true</overwrite>\n        </configuration>\n      </plugin>\n      <plugin>\n        <!-- maven插件 -->\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <source>1.6</source>\n          <target>1.6</target>\n        </configuration>\n      </plugin>\n    </plugins>\n\n  </build>\n</project>\n```\n4. 配置mybatisGeneratorConfig，需要连接数据库，\n    将准备的sql文件导入数据库中[vue_admin.sql](vue_admin.sql)  \ngeneratorConfig.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n    PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n    \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n\n  <!--<properties resource=\"jdbc.properties\"/>-->\n\n  <!--连接mysql的jar包-->\n  <classPathEntry\n      location=\"C:/Users/**/.m2/repository/mysql/mysql-connector-java/5.1.29/mysql-connector-java-5.1.29.jar\" />\n\n  <context id=\"default\" targetRuntime=\"MyBatis3\">\n    <!-- jdbc连接 -->\n    <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\"\n                    connectionURL=\"jdbc:mysql://localhost:3306/vue_admin\"\n                    userId=\"**\"\n                    password=\"**\"/>\n    <!-- 生成model =》 数据层 -->\n    <javaModelGenerator targetPackage=\"cn.lvsen.test.model\" targetProject=\"src/main/java\">\n    </javaModelGenerator>\n    <!-- 生成mapper 存有mybatis的数据库操作xml -->\n    <sqlMapGenerator targetPackage=\"cn.lvsen.test.mapping\" targetProject=\"src/main/java\">\n    </sqlMapGenerator>\n    <!-- 存有mappper的接口类，mybatis会自动生成实体类，将mapper和dao连接起来 -->\n    <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"cn.lvsen.test.dao\" targetProject=\"src/main/java\">\n    </javaClientGenerator>\n    <!-- 表的名字 -->\n    <table tableName=\"t_table\" domainObjectName=\"TableData\"/>\n    <table tableName=\"t_user\" domainObjectName=\"User\" />\n  </context>\n</generatorConfiguration>\n```\n5. 配置resources/spring/spring-mvc.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n\n  <!--扫描包，查注解-->\n  <context:component-scan base-package=\"cn.lvsen.test\"/>\n\n  <!--映射器与适配器，去掉@ResponseBody就会出问题-->\n  <mvc:annotation-driven/>\n  <!-- 静态资源放置地 -->\n  <mvc:resources mapping=\"/**\" location=\"static\" />\n  <!--<mvc:resources mapping=\"/css/**\" location=\"static\" />-->\n  <mvc:default-servlet-handler />\n  <!-- 拦截器 -->\n  <mvc:interceptors>\n    <mvc:interceptor>\n      <mvc:mapping path=\"/api/**\"/>\n      <bean class=\"cn.lvsen.test.interceptor.AuthInterceptor\"/>\n    </mvc:interceptor>\n  </mvc:interceptors>\n  <!-- 视图 -->\n  <bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"\n        p:prefix=\"/\" p:suffix=\".html\"/>\n</beans>\n```\n6. 配置resources/spring/spring-mybatis.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n  <!--引入jdbc的配置文件-->\n  <bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n    <property name=\"location\" value=\"classpath:jdbc.properties\" />\n  </bean>\n  <!--jdbc连接数据库基本配置-->\n  <bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n    <property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n    <property name=\"url\" value=\"${jdbc.url}\" />\n    <property name=\"username\" value=\"${jdbc.username}\" />\n    <property name=\"password\" value=\"${jdbc.password}\" />\n  </bean>\n  <!--spring和mybatis结合的配置-->\n  <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <property name=\"mapperLocations\" value=\"classpath:cn/lvsen/test/mapping/*Mapper.xml\" />\n    <property name=\"plugins\">\n      <array>\n        <bean class=\"com.github.pagehelper.PageInterceptor\">\n          <!--少了这句话会导致空指针异常-->\n          <property name=\"properties\">\n            <value></value>\n          </property>\n        </bean>\n      </array>\n    </property>\n  </bean>\n\n  <!--dao接口，sping会自动查找其中的类 dao ——> 数据访问层 dao映射的mapper，去掉启动报错-->\n  <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n    <property name=\"basePackage\" value=\"cn.lvsen.test.dao\"/>\n    <!--对应上面id=\"sqlSessionFactory\"-->\n    <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\" />\n  </bean>\n</beans>\n```\n\n7. spring-mybatis.xml配置时用了**jdbc.properties**这是为了方便管理连接  \n    resources/jdbc.properties的配置\n```\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/vue_admin?useUnicode=true&characterEncoding=UTF-8\njdbc.username=**\njdbc.password=**\n```\n8. web.xml配置，web.xml是这个web项目的入口  \n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://java.sun.com/xml/ns/javaee\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n         version=\"3.0\">\n  <display-name>Archetype Created Web Application</display-name>\n  <!--spring和mybatis的配置文件-->\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:spring/spring-mybatis.xml</param-value>\n  </context-param>\n\n  <!--spring监听器-->\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n\n  <!--解决乱码-->\n  <filter>\n    <filter-name>SpringEncodingFilter</filter-name>\n    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n    <init-param>\n      <param-name>encoding</param-name>\n      <param-value>UTF-8</param-value>\n    </init-param>\n    <init-param>\n      <param-name>forceEncoding</param-name>\n      <param-value>true</param-value>\n    </init-param>\n  </filter>\n  <!--映射的路径-->\n  <filter-mapping>\n    <filter-name>SpringEncodingFilter</filter-name>\n    <url-pattern>/</url-pattern>\n  </filter-mapping>\n  <!-- 声明静态资源类型，加入spring扫描 -->\n  <servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>*.html</url-pattern>\n  </servlet-mapping>\n\n  <!--spring MVC 核心分发器-->\n  <servlet>\n    <servlet-name>SpringMvc</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>classpath:spring/spring-mvc.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>SpringMvc</servlet-name>\n    <url-pattern>/</url-pattern>\n  </servlet-mapping>\n  <!-- 首页，可以多个，根据顺来显示-->\n  <welcome-file-list>\n    <welcome-file>index.html</welcome-file>\n  </welcome-file-list>\n</web-app>\n```\n\n9. SSM基本配置完了，其他功能需要的时候再加，现在新建文件夹  \n  * java/cn.xx.xx/controller  // controller层\n  * java/cn.xx.xx/service // service层\n  * java/cn.xx.xx/service/impl // service层接口的实现类\n  * webapp/index.html\n\n10. 在controller里面新建一个UserController类，  \n进行restAPI的书写,api使用url: **api/user/hello**\n```$xslt\n@Controller\n@RequestMapping(\"api/user\")\npublic class UserController {\n\n    @RequestMapping(value = \"hello\", method = RequestMethod.GET) \n    @ResponseBody // 要返回json数据\n    public Map login(HttpSession httpSession) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        \n        try {\n          map.put(\"errorCode\", 0);\n          map.put(\"message\", \"hello\");\n        } catch (Exception e) {\n            map.put(\"errorCode\", 1);\n            map.put(\"errorMessage\", \"未知错误\");\n        }\n        return map;\n    }\n```\n\n11. 一个接口写好，然后配置服务器启动项目  \n  1.![3](3.png)  \n  2.![4](4.png)  \n  3.![5](5.png)  \n  然后点击**apply** => **OK**  \n项目启动，打开地址栏，追加输入**api/user/hello**，拿到数据OK，后台走通\n\n### 前端部分\n12. 后台暂时放置，开始写前端**[前端部分代码](https://github.com/slipkinem/vue-admin)**\n#### 前端框架用的VUE，UI框架用的饿了么开源的element_ui\n  * 总概况：vue+vue-router+vue-resource+vuex+element_ui\n13. **用npm下载vue-cli**\n  * 用vue-cli生成webpack项目骨架\n  * npm install 下载所有依赖\n14. ","slug":"java-ssm","published":1,"updated":"2017-05-15T09:47:12.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb7e0005n8v3au0q11md","content":"<h1 id=\"SSM整合流程\"><a href=\"#SSM整合流程\" class=\"headerlink\" title=\"SSM整合流程\"></a>SSM整合流程</h1><h2 id=\"spring-spring-mvc-mybatis-maven\"><a href=\"#spring-spring-mvc-mybatis-maven\" class=\"headerlink\" title=\"spring spring-mvc mybatis maven\"></a>spring spring-mvc mybatis maven</h2><ul>\n<li>web前端项目的源码<a href=\"https://github.com/slipkinem/vue-admin\" target=\"_blank\" rel=\"external\">vue-admin</a></li>\n<li>数据库的sql文件<a href=\"vue_admin.sql\">vue_admin.sql</a></li>\n</ul>\n<h3 id=\"IDE-idea\"><a href=\"#IDE-idea\" class=\"headerlink\" title=\"IDE idea\"></a>IDE idea</h3><ol>\n<li>File =&gt; new Project =&gt; maven =&gt; create from archetype =&gt; <strong>maven-archetype-webapp</strong><br><img src=\"/2017/04/25/java-ssm/1.png\" alt=\"1\"></li>\n<li><p>一直点击next直到finished，maven会自动创建一个项目目录<br><img src=\"/2017/04/25/java-ssm/2.png\" alt=\"2\"></p>\n<ul>\n<li>最终项目目录结构图  <a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\">│  .gitignore</div><div class=\"line\">│  pom.xml</div><div class=\"line\">│  README.md</div><div class=\"line\">│  tree.txt</div><div class=\"line\">│  </div><div class=\"line\">├─src</div><div class=\"line\">│  └─main</div><div class=\"line\">│      ├─java</div><div class=\"line\">│      │  └─cn</div><div class=\"line\">│      │      └─lvsen</div><div class=\"line\">│      │          └─test</div><div class=\"line\">│      │              ├─controller</div><div class=\"line\">│      │              │      TableController.java</div><div class=\"line\">│      │              │      UserController.java</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─dao</div><div class=\"line\">│      │              │      TableDataMapper.java</div><div class=\"line\">│      │              │      UserMapper.java</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─interceptor</div><div class=\"line\">│      │              │      AuthInterceptor.java</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─mapping</div><div class=\"line\">│      │              │      TableDataMapper.xml</div><div class=\"line\">│      │              │      UserMapper.xml</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─model</div><div class=\"line\">│      │              │      TableData.java</div><div class=\"line\">│      │              │      TableDataExample.java</div><div class=\"line\">│      │              │      User.java</div><div class=\"line\">│      │              │      UserExample.java</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              └─service</div><div class=\"line\">│      │                  │  TableService.java</div><div class=\"line\">│      │                  │  UserService.java</div><div class=\"line\">│      │                  │  </div><div class=\"line\">│      │                  └─impl</div><div class=\"line\">│      │                          TableServiceImpl.java</div><div class=\"line\">│      │                          UserServiceImpl.java</div><div class=\"line\">│      │                          </div><div class=\"line\">│      ├─resources</div><div class=\"line\">│      │  │  generatorConfig.xml</div><div class=\"line\">│      │  │  jdbc.properties</div><div class=\"line\">│      │  │  logback.xml.bak</div><div class=\"line\">│      │  │  </div><div class=\"line\">│      │  └─spring</div><div class=\"line\">│      │          spring-mvc.xml</div><div class=\"line\">│      │          spring-mybatis.xml</div><div class=\"line\">│      │          </div><div class=\"line\">│      └─webapp</div><div class=\"line\">│          │  index.html</div><div class=\"line\">│          │  index.jsp</div><div class=\"line\">│          │  </div><div class=\"line\">│          ├─static</div><div class=\"line\">│          │  ├─css</div><div class=\"line\">│          │  │      app.f3c8e005c2be0a746136766675898059.css</div><div class=\"line\">│          │  │      app.f3c8e005c2be0a746136766675898059.css.gz</div><div class=\"line\">│          │  │      </div><div class=\"line\">│          │  ├─fonts</div><div class=\"line\">│          │  │      element-icons.b02bdc1.ttf</div><div class=\"line\">│          │  │      </div><div class=\"line\">│          │  └─js</div><div class=\"line\">│          │          0.105cd4667842b0092158.js</div><div class=\"line\">│          │          1.3f78774435db7aa5de2a.js</div><div class=\"line\">│          │          app.3ec6fa4bebfb1bb58a2b.js</div><div class=\"line\">│          │          app.3ec6fa4bebfb1bb58a2b.js.gz</div><div class=\"line\">│          │          manifest.b0bb778337a7d07c6313.js</div><div class=\"line\">│          │          vendor.bbf93d5282d3216eb30e.js</div><div class=\"line\">│          │          vendor.bbf93d5282d3216eb30e.js.gz</div><div class=\"line\">│          │          </div><div class=\"line\">│          └─WEB-INF</div><div class=\"line\">│                  web.xml</div><div class=\"line\">│                  </div><div class=\"line\">└─test</div><div class=\"line\">        TestHello.java</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>在创建的POM里面添加依赖<br> pom.xml</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span></div><div class=\"line\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>article Maven Webapp<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>4.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--测试--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--spring--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jdbc连接池 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 事务管理 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--spring测试用--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 注解扫描 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- MVC --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 切面，将日志记录，事务等分离开来 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- mybatis和spring结合用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- mysql连接驱动 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.38<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 连接数据库 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- mybatis --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 转换json用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jackson转换json用 @ResponseBody默认调用jackson，将java对象转为json --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 分页插件 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- javaHttp基础包 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 日志 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.24<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j要配合其他日志包运行，slf4j起个管理的作用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 防止package打包不到XML--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!-- mybatis生成代码插件 --&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!-- 生成文件的配置 --&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class=\"tag\">&lt;/<span class=\"name\">configurationFile</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">verbose</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">verbose</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">overwrite</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">overwrite</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- maven插件 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置mybatisGeneratorConfig，需要连接数据库，<br> 将准备的sql文件导入数据库中<a href=\"vue_admin.sql\">vue_admin.sql</a><br>generatorConfig.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration</span></div><div class=\"line\">    PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</div><div class=\"line\">    \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--&lt;properties resource=\"jdbc.properties\"/&gt;--&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--连接mysql的jar包--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">classPathEntry</span></span></div><div class=\"line\">      <span class=\"attr\">location</span>=<span class=\"string\">\"C:/Users/**/.m2/repository/mysql/mysql-connector-java/5.1.29/mysql-connector-java-5.1.29.jar\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jdbc连接 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span></span></div><div class=\"line\">                    <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"jdbc:mysql://localhost:3306/vue_admin\"</span></div><div class=\"line\">                    <span class=\"attr\">userId</span>=<span class=\"string\">\"**\"</span></div><div class=\"line\">                    <span class=\"attr\">password</span>=<span class=\"string\">\"**\"</span>/&gt;</div><div class=\"line\">    <span class=\"comment\">&lt;!-- 生成model =》 数据层 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.model\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 生成mapper 存有mybatis的数据库操作xml --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.mapping\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 存有mappper的接口类，mybatis会自动生成实体类，将mapper和dao连接起来 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.dao\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 表的名字 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_table\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"TableData\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_user\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"User\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置resources/spring/spring-mvc.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></div><div class=\"line\">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--扫描包，查注解--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"cn.lvsen.test\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--映射器与适配器，去掉@ResponseBody就会出问题--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 静态资源放置地 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/**\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"static\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--&lt;mvc:resources mapping=\"/css/**\" location=\"static\" /&gt;--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span> /&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 拦截器 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/api/**\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.lvsen.test.interceptor.AuthInterceptor\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 视图 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"viewResolver\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span></span></div><div class=\"line\">        <span class=\"attr\">p:prefix</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">p:suffix</span>=<span class=\"string\">\".html\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置resources/spring/spring-mybatis.xml</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</div><div class=\"line\">  <span class=\"comment\">&lt;!--引入jdbc的配置文件--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"propertyConfigurer\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"location\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:jdbc.properties\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--jdbc连接数据库基本配置--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.driver&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.url&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.username&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.password&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring和mybatis结合的配置--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:cn/lvsen/test/mapping/*Mapper.xml\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"plugins\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.github.pagehelper.PageInterceptor\"</span>&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!--少了这句话会导致空指针异常--&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"properties\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--dao接口，sping会自动查找其中的类 dao ——&gt; 数据访问层 dao映射的mapper，去掉启动报错--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"cn.lvsen.test.dao\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--对应上面id=\"sqlSessionFactory\"--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>spring-mybatis.xml配置时用了<strong>jdbc.properties</strong>这是为了方便管理连接<br> resources/jdbc.properties的配置</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">jdbc.<span class=\"attr\">driver=com.mysql.jdbc.Driver</span></div><div class=\"line\">jdbc.<span class=\"attr\">url=jdbc:mysql://localhost:3306/vue_admin?useUnicode=true&amp;characterEncoding=UTF-8</span></div><div class=\"line\">jdbc.<span class=\"attr\">username=**</span></div><div class=\"line\">jdbc.<span class=\"attr\">password=**</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>web.xml配置，web.xml是这个web项目的入口  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span> <span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span></div><div class=\"line\">         <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>Archetype Created Web Application<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring和mybatis的配置文件--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-mybatis.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring监听器--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--解决乱码--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>SpringEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>forceEncoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--映射的路径--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>SpringEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 声明静态资源类型，加入spring扫描 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.html<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring MVC 核心分发器--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>SpringMvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>SpringMvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 首页，可以多个，根据顺来显示--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.html<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>SSM基本配置完了，其他功能需要的时候再加，现在新建文件夹  </p>\n<ul>\n<li>java/cn.xx.xx/controller  // controller层</li>\n<li>java/cn.xx.xx/service // service层</li>\n<li>java/cn.xx.xx/service/impl // service层接口的实现类</li>\n<li>webapp/index.html</li>\n</ul>\n</li>\n<li><p>在controller里面新建一个UserController类，<br>进行restAPI的书写,api使用url: <strong>api/user/hello</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Controller</div><div class=\"line\">@RequestMapping(&quot;api/user&quot;)</div><div class=\"line\">public class UserController &#123;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(value = &quot;hello&quot;, method = RequestMethod.GET) </div><div class=\"line\">    @ResponseBody // 要返回json数据</div><div class=\"line\">    public Map login(HttpSession httpSession) &#123;</div><div class=\"line\">        Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</div><div class=\"line\">        </div><div class=\"line\">        try &#123;</div><div class=\"line\">          map.put(&quot;errorCode&quot;, 0);</div><div class=\"line\">          map.put(&quot;message&quot;, &quot;hello&quot;);</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            map.put(&quot;errorCode&quot;, 1);</div><div class=\"line\">            map.put(&quot;errorMessage&quot;, &quot;未知错误&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return map;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>一个接口写好，然后配置服务器启动项目<br>1.<img src=\"/2017/04/25/java-ssm/3.png\" alt=\"3\"><br>2.<img src=\"/2017/04/25/java-ssm/4.png\" alt=\"4\"><br>3.<img src=\"/2017/04/25/java-ssm/5.png\" alt=\"5\"><br>然后点击<strong>apply</strong> =&gt; <strong>OK</strong><br>项目启动，打开地址栏，追加输入<strong>api/user/hello</strong>，拿到数据OK，后台走通</p>\n</li>\n</ol>\n<h3 id=\"前端部分\"><a href=\"#前端部分\" class=\"headerlink\" title=\"前端部分\"></a>前端部分</h3><ol>\n<li>后台暂时放置，开始写前端<strong><a href=\"https://github.com/slipkinem/vue-admin\" target=\"_blank\" rel=\"external\">前端部分代码</a></strong><h4 id=\"前端框架用的VUE，UI框架用的饿了么开源的element-ui\"><a href=\"#前端框架用的VUE，UI框架用的饿了么开源的element-ui\" class=\"headerlink\" title=\"前端框架用的VUE，UI框架用的饿了么开源的element_ui\"></a>前端框架用的VUE，UI框架用的饿了么开源的element_ui</h4><ul>\n<li>总概况：vue+vue-router+vue-resource+vuex+element_ui</li>\n</ul>\n</li>\n<li><strong>用npm下载vue-cli</strong><ul>\n<li>用vue-cli生成webpack项目骨架</li>\n<li>npm install 下载所有依赖</li>\n</ul>\n</li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"SSM整合流程\"><a href=\"#SSM整合流程\" class=\"headerlink\" title=\"SSM整合流程\"></a>SSM整合流程</h1><h2 id=\"spring-spring-mvc-mybatis-maven\"><a href=\"#spring-spring-mvc-mybatis-maven\" class=\"headerlink\" title=\"spring spring-mvc mybatis maven\"></a>spring spring-mvc mybatis maven</h2><ul>\n<li>web前端项目的源码<a href=\"https://github.com/slipkinem/vue-admin\">vue-admin</a></li>\n<li>数据库的sql文件<a href=\"vue_admin.sql\">vue_admin.sql</a></li>\n</ul>\n<h3 id=\"IDE-idea\"><a href=\"#IDE-idea\" class=\"headerlink\" title=\"IDE idea\"></a>IDE idea</h3><ol>\n<li>File =&gt; new Project =&gt; maven =&gt; create from archetype =&gt; <strong>maven-archetype-webapp</strong><br><img src=\"/2017/04/25/java-ssm/1.png\" alt=\"1\"></li>\n<li><p>一直点击next直到finished，maven会自动创建一个项目目录<br><img src=\"/2017/04/25/java-ssm/2.png\" alt=\"2\"></p>\n<ul>\n<li>最终项目目录结构图</li></ul></li></ol>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\">│  .gitignore</div><div class=\"line\">│  pom.xml</div><div class=\"line\">│  README.md</div><div class=\"line\">│  tree.txt</div><div class=\"line\">│  </div><div class=\"line\">├─src</div><div class=\"line\">│  └─main</div><div class=\"line\">│      ├─java</div><div class=\"line\">│      │  └─cn</div><div class=\"line\">│      │      └─lvsen</div><div class=\"line\">│      │          └─test</div><div class=\"line\">│      │              ├─controller</div><div class=\"line\">│      │              │      TableController.java</div><div class=\"line\">│      │              │      UserController.java</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─dao</div><div class=\"line\">│      │              │      TableDataMapper.java</div><div class=\"line\">│      │              │      UserMapper.java</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─interceptor</div><div class=\"line\">│      │              │      AuthInterceptor.java</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─mapping</div><div class=\"line\">│      │              │      TableDataMapper.xml</div><div class=\"line\">│      │              │      UserMapper.xml</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              ├─model</div><div class=\"line\">│      │              │      TableData.java</div><div class=\"line\">│      │              │      TableDataExample.java</div><div class=\"line\">│      │              │      User.java</div><div class=\"line\">│      │              │      UserExample.java</div><div class=\"line\">│      │              │      </div><div class=\"line\">│      │              └─service</div><div class=\"line\">│      │                  │  TableService.java</div><div class=\"line\">│      │                  │  UserService.java</div><div class=\"line\">│      │                  │  </div><div class=\"line\">│      │                  └─impl</div><div class=\"line\">│      │                          TableServiceImpl.java</div><div class=\"line\">│      │                          UserServiceImpl.java</div><div class=\"line\">│      │                          </div><div class=\"line\">│      ├─resources</div><div class=\"line\">│      │  │  generatorConfig.xml</div><div class=\"line\">│      │  │  jdbc.properties</div><div class=\"line\">│      │  │  logback.xml.bak</div><div class=\"line\">│      │  │  </div><div class=\"line\">│      │  └─spring</div><div class=\"line\">│      │          spring-mvc.xml</div><div class=\"line\">│      │          spring-mybatis.xml</div><div class=\"line\">│      │          </div><div class=\"line\">│      └─webapp</div><div class=\"line\">│          │  index.html</div><div class=\"line\">│          │  index.jsp</div><div class=\"line\">│          │  </div><div class=\"line\">│          ├─static</div><div class=\"line\">│          │  ├─css</div><div class=\"line\">│          │  │      app.f3c8e005c2be0a746136766675898059.css</div><div class=\"line\">│          │  │      app.f3c8e005c2be0a746136766675898059.css.gz</div><div class=\"line\">│          │  │      </div><div class=\"line\">│          │  ├─fonts</div><div class=\"line\">│          │  │      element-icons.b02bdc1.ttf</div><div class=\"line\">│          │  │      </div><div class=\"line\">│          │  └─js</div><div class=\"line\">│          │          0.105cd4667842b0092158.js</div><div class=\"line\">│          │          1.3f78774435db7aa5de2a.js</div><div class=\"line\">│          │          app.3ec6fa4bebfb1bb58a2b.js</div><div class=\"line\">│          │          app.3ec6fa4bebfb1bb58a2b.js.gz</div><div class=\"line\">│          │          manifest.b0bb778337a7d07c6313.js</div><div class=\"line\">│          │          vendor.bbf93d5282d3216eb30e.js</div><div class=\"line\">│          │          vendor.bbf93d5282d3216eb30e.js.gz</div><div class=\"line\">│          │          </div><div class=\"line\">│          └─WEB-INF</div><div class=\"line\">│                  web.xml</div><div class=\"line\">│                  </div><div class=\"line\">└─test</div><div class=\"line\">        TestHello.java</div></pre></td></tr></table></figure>\n\n\n\n<li><p>在创建的POM里面添加依赖<br> pom.xml</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span></div><div class=\"line\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>article Maven Webapp<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>4.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--测试--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--spring--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jdbc连接池 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 事务管理 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--spring测试用--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 注解扫描 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- MVC --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 切面，将日志记录，事务等分离开来 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$<span class=\"template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- mybatis和spring结合用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- mysql连接驱动 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.38<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 连接数据库 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- mybatis --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 转换json用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jackson转换json用 @ResponseBody默认调用jackson，将java对象转为json --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 分页插件 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- javaHttp基础包 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 日志 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.24<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- slf4j要配合其他日志包运行，slf4j起个管理的作用 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>article<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 防止package打包不到XML--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!-- mybatis生成代码插件 --&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!-- 生成文件的配置 --&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class=\"tag\">&lt;/<span class=\"name\">configurationFile</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">verbose</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">verbose</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">overwrite</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">overwrite</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- maven插件 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置mybatisGeneratorConfig，需要连接数据库，<br> 将准备的sql文件导入数据库中<a href=\"vue_admin.sql\">vue_admin.sql</a><br>generatorConfig.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration</span></div><div class=\"line\">    PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</div><div class=\"line\">    \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--&lt;properties resource=\"jdbc.properties\"/&gt;--&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--连接mysql的jar包--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">classPathEntry</span></span></div><div class=\"line\">      <span class=\"attr\">location</span>=<span class=\"string\">\"C:/Users/**/.m2/repository/mysql/mysql-connector-java/5.1.29/mysql-connector-java-5.1.29.jar\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jdbc连接 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span></span></div><div class=\"line\">                    <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"jdbc:mysql://localhost:3306/vue_admin\"</span></div><div class=\"line\">                    <span class=\"attr\">userId</span>=<span class=\"string\">\"**\"</span></div><div class=\"line\">                    <span class=\"attr\">password</span>=<span class=\"string\">\"**\"</span>/&gt;</div><div class=\"line\">    <span class=\"comment\">&lt;!-- 生成model =》 数据层 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.model\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 生成mapper 存有mybatis的数据库操作xml --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.mapping\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 存有mappper的接口类，mybatis会自动生成实体类，将mapper和dao连接起来 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.lvsen.test.dao\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 表的名字 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_table\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"TableData\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_user\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"User\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置resources/spring/spring-mvc.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></div><div class=\"line\">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--扫描包，查注解--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"cn.lvsen.test\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--映射器与适配器，去掉@ResponseBody就会出问题--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 静态资源放置地 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/**\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"static\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--&lt;mvc:resources mapping=\"/css/**\" location=\"static\" /&gt;--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span> /&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 拦截器 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/api/**\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.lvsen.test.interceptor.AuthInterceptor\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 视图 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"viewResolver\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span></span></div><div class=\"line\">        <span class=\"attr\">p:prefix</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">p:suffix</span>=<span class=\"string\">\".html\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置resources/spring/spring-mybatis.xml</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</div><div class=\"line\">  <span class=\"comment\">&lt;!--引入jdbc的配置文件--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"propertyConfigurer\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"location\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:jdbc.properties\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--jdbc连接数据库基本配置--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.driver&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.url&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.username&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$</span></span><span class=\"template-variable\">&#123;jdbc.password&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring和mybatis结合的配置--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:cn/lvsen/test/mapping/*Mapper.xml\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"plugins\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.github.pagehelper.PageInterceptor\"</span>&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!--少了这句话会导致空指针异常--&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"properties\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--dao接口，sping会自动查找其中的类 dao ——&gt; 数据访问层 dao映射的mapper，去掉启动报错--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"cn.lvsen.test.dao\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--对应上面id=\"sqlSessionFactory\"--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>spring-mybatis.xml配置时用了<strong>jdbc.properties</strong>这是为了方便管理连接<br> resources/jdbc.properties的配置</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">jdbc.<span class=\"attr\">driver=com.mysql.jdbc.Driver</span></div><div class=\"line\">jdbc.<span class=\"attr\">url=jdbc:mysql://localhost:3306/vue_admin?useUnicode=true&amp;characterEncoding=UTF-8</span></div><div class=\"line\">jdbc.<span class=\"attr\">username=**</span></div><div class=\"line\">jdbc.<span class=\"attr\">password=**</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>web.xml配置，web.xml是这个web项目的入口  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span> <span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span></div><div class=\"line\">         <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>Archetype Created Web Application<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring和mybatis的配置文件--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-mybatis.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring监听器--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--解决乱码--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>SpringEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>forceEncoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--映射的路径--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>SpringEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 声明静态资源类型，加入spring扫描 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.html<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--spring MVC 核心分发器--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>SpringMvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>SpringMvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 首页，可以多个，根据顺来显示--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.html<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>SSM基本配置完了，其他功能需要的时候再加，现在新建文件夹  </p>\n<ul>\n<li>java/cn.xx.xx/controller  // controller层</li>\n<li>java/cn.xx.xx/service // service层</li>\n<li>java/cn.xx.xx/service/impl // service层接口的实现类</li>\n<li>webapp/index.html</li>\n</ul>\n</li>\n<li><p>在controller里面新建一个UserController类，<br>进行restAPI的书写,api使用url: <strong>api/user/hello</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Controller</div><div class=\"line\">@RequestMapping(&quot;api/user&quot;)</div><div class=\"line\">public class UserController &#123;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(value = &quot;hello&quot;, method = RequestMethod.GET) </div><div class=\"line\">    @ResponseBody // 要返回json数据</div><div class=\"line\">    public Map login(HttpSession httpSession) &#123;</div><div class=\"line\">        Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</div><div class=\"line\">        </div><div class=\"line\">        try &#123;</div><div class=\"line\">          map.put(&quot;errorCode&quot;, 0);</div><div class=\"line\">          map.put(&quot;message&quot;, &quot;hello&quot;);</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            map.put(&quot;errorCode&quot;, 1);</div><div class=\"line\">            map.put(&quot;errorMessage&quot;, &quot;未知错误&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return map;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>一个接口写好，然后配置服务器启动项目<br>1.<img src=\"/2017/04/25/java-ssm/3.png\" alt=\"3\"><br>2.<img src=\"/2017/04/25/java-ssm/4.png\" alt=\"4\"><br>3.<img src=\"/2017/04/25/java-ssm/5.png\" alt=\"5\"><br>然后点击<strong>apply</strong> =&gt; <strong>OK</strong><br>项目启动，打开地址栏，追加输入<strong>api/user/hello</strong>，拿到数据OK，后台走通</p>\n</li>\n\n<h3 id=\"前端部分\"><a href=\"#前端部分\" class=\"headerlink\" title=\"前端部分\"></a>前端部分</h3><ol>\n<li>后台暂时放置，开始写前端<strong><a href=\"https://github.com/slipkinem/vue-admin\">前端部分代码</a></strong><h4 id=\"前端框架用的VUE，UI框架用的饿了么开源的element-ui\"><a href=\"#前端框架用的VUE，UI框架用的饿了么开源的element-ui\" class=\"headerlink\" title=\"前端框架用的VUE，UI框架用的饿了么开源的element_ui\"></a>前端框架用的VUE，UI框架用的饿了么开源的element_ui</h4><ul>\n<li>总概况：vue+vue-router+vue-resource+vuex+element_ui</li>\n</ul>\n</li>\n<li><strong>用npm下载vue-cli</strong><ul>\n<li>用vue-cli生成webpack项目骨架</li>\n<li>npm install 下载所有依赖</li>\n</ul>\n</li>\n<li></li>\n</ol>"},{"title":"java用jdbc，servelet的一个小问题","date":"2017-04-21T02:14:19.000Z","_content":"\n1. 在用jdbc连接数据库的时候碰见一个tomcat抛得错误，  \n``java.lang.ClassNotFoundException: com.mysql.jdbc.Driver`` ，  \n感觉不对，我已经在idea的Modules里面添加了mysql.jar的包，在测试的时候连接是正常的。  \n原来要将mysql驱动包复制到tomcat的lib文件夹。  \n2. 在连接驱动包的时候碰见这种写法``Class.forName(\"com.mysql.jdbc.Driver\")``  \n原来这种写法是注册mysql依赖包，等同于``DriverManager.registerDriver(new com.mysql.jdbc.Driver());``\n3. maven：为了让依赖好管理， mybatis：为了让DML更简单，spring：为了让servlet更好用","source":"_posts/2017/04/java用jdbc-servelet时的问题.md","raw":"---\ntitle: java用jdbc，servelet的一个小问题\ncategories: exception\ndate: 2017-04-21 10:14:19\ntags:\n  - java\n---\n\n1. 在用jdbc连接数据库的时候碰见一个tomcat抛得错误，  \n``java.lang.ClassNotFoundException: com.mysql.jdbc.Driver`` ，  \n感觉不对，我已经在idea的Modules里面添加了mysql.jar的包，在测试的时候连接是正常的。  \n原来要将mysql驱动包复制到tomcat的lib文件夹。  \n2. 在连接驱动包的时候碰见这种写法``Class.forName(\"com.mysql.jdbc.Driver\")``  \n原来这种写法是注册mysql依赖包，等同于``DriverManager.registerDriver(new com.mysql.jdbc.Driver());``\n3. maven：为了让依赖好管理， mybatis：为了让DML更简单，spring：为了让servlet更好用","slug":"java用jdbc-servelet时的问题","published":1,"updated":"2017-05-15T09:47:12.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb7g0007n8v3skcl18dw","content":"<ol>\n<li>在用jdbc连接数据库的时候碰见一个tomcat抛得错误，<br><code>java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</code> ，<br>感觉不对，我已经在idea的Modules里面添加了mysql.jar的包，在测试的时候连接是正常的。<br>原来要将mysql驱动包复制到tomcat的lib文件夹。  </li>\n<li>在连接驱动包的时候碰见这种写法<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code><br>原来这种写法是注册mysql依赖包，等同于<code>DriverManager.registerDriver(new com.mysql.jdbc.Driver());</code></li>\n<li>maven：为了让依赖好管理， mybatis：为了让DML更简单，spring：为了让servlet更好用</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>在用jdbc连接数据库的时候碰见一个tomcat抛得错误，<br><code>java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</code> ，<br>感觉不对，我已经在idea的Modules里面添加了mysql.jar的包，在测试的时候连接是正常的。<br>原来要将mysql驱动包复制到tomcat的lib文件夹。  </li>\n<li>在连接驱动包的时候碰见这种写法<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code><br>原来这种写法是注册mysql依赖包，等同于<code>DriverManager.registerDriver(new com.mysql.jdbc.Driver());</code></li>\n<li>maven：为了让依赖好管理， mybatis：为了让DML更简单，spring：为了让servlet更好用</li>\n</ol>\n"},{"title":"react-native进入姿势","date":"2017-04-22T03:34:51.000Z","_content":"## 开始战斗\n``准备学一点react，然后觉得不如直接学习react-native，就开始了react-native之路，从环境搭建到一个小DEMO，花了不少时间，主要是下载太麻烦``\n### 准备工作\n   1. ide: 我选择idea，习惯了\n   2. 电脑：win7的i5渣配置，所以先不打算进行ios开发\n   3. 没有vpn，宽带是交话费送的10M联通宽带，网速还行1m/s\n   4. 推荐给电脑安装**[wox](http://www.getwox.com/)和everything(wox插件就有)**，方便寻找文件\n\n## 环境搭建\n### node环境\n1. 下载安装**nodeJs**（最新的就行），为了防止环境变量有问题，不要修改安装目录\n2. 使用 node-v npm -v 看看有没有安装成功\n<!-- more -->\n3. 注册淘宝镜像 \n```$xslt\n> npm config set registry https://registry.npm.taobao.org --global\n> npm config set disturl https://npm.taobao.org/dist --global\n```\n\n4. 下载**yarn**，react-native默认使用yarn下载\n```$xslt\n  > npm i -g yarn\n  > yarn -v\n```\n\n5. 给**yarn**注册淘宝镜像\n```$xslt\n> yarn config set registry https://registry.npm.taobao.org --global\n> yarn config set disturl https://npm.taobao.org/dist --global \n```\n\n### react-native安装\n  1. 使用yarn下载react-native-cli\n```$xslt\n> yarn global add react-native-cli\n> react-native --version\n```\n\n  2. 创建项目,一直等待下载完成，生成的目录还是很清晰的\n```$xslt\n> yarn-native init rnDemo \n```\n\n  ![directory](directory.jpg)\n  3. 试着运行项目\n```git\n> cd rnDemo\n> npm start\n```\n\n   命令行显示，8081端口开启服务。在浏览器输入[localhost:8081](localhost:8081),显示``React Native packager is running.``，说明服务还是通畅的。可咱们要做安卓项目！所以继续使用命令行\n```$xslt\n> react-native run-android\n```\n\n   不出意外会挺慢，因为要下载gradle（gradle是安卓项目常用的构建工具，用来管理jar包和执行任务）和jar包，命令行会提示在此url下载文件``Download https://jcenter.bintray.com/com/android/tools/annotations/25.2.3/annotations-25.2.3.jar``\n  4. 因为网络的问题，所以给gradle配置阿里云maven（java常用的包管理工具，有一个下载的仓库，但很慢）镜像。进入**.gradle**文件夹，一般在``C:\\Users\\Administrator\\.gradle``，使用wox就简单多了\n    ![wox](wox.jpg)  \n  在 **.gradle** 文件夹里面新建 **init.gradle** 文件，并写入下面代码，或[点击下载init.gradle](init.gradle)\n```groovy\nallprojects{\n    repositories {\n        def REPOSITORY_URL = 'http://maven.aliyun.com/nexus/content/groups/public/'\n        all { ArtifactRepository repo ->\n            if(repo instanceof MavenArtifactRepository){\n                def url = repo.url.toString()\n                if (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com/')) {\n                    project.logger.lifecycle \"Repository ${repo.url} replaced by $REPOSITORY_URL.\"\n                    remove repo\n                }\n            }\n        }\n        maven {\n            url REPOSITORY_URL\n        }\n    }\n}\n```\n\n  5. 继续运行命令``react-native run-android``\n```git\n> react-native run-android\n```\n\n可以看到下载速度快了好多，但最后会发现报错``SDK location not found``，这是因为没有安装 **android sdk** ，接下来配置 **android环境**\n\n### android开发环境配置\n1. 安装java环境，搜一下有N多教程\n2. 下载**android studio** 没有翻墙的话推荐使用[网盘下载](https://pan.baidu.com/s/1jIyKHjK)\n3. 安装**android studio** 推荐使用默认安装一直点击``next``  \n4. 第一次启动会进入下面界面\n![androids](androids.jpg)\n  * standard 标准配置，推荐第一次安装使用能够\n  * custom 选择安装， 可以自己定制安装选项  \n由于是第一此安装就直接选用默认的**standard**安装，但是react-native官网推荐custom\n4. 记得勾选**Android Virtual Device**，一直**next**，最后点击**finished**等待下载完成\n  ![avd](avd.jpg)\n  \n### 环境变量\n在电脑环境变量设置里面，点击新建，ANDROID_HOME sdk路径\n![ANDROID_HOME](android_home.jpg)  \n然后再到环境变量 **path** 里面添加类似这样  \n``C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\tools``  \n``C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\platform-tools``  \n一定注意路径的正确性  \n![tools](tools.jpg)\n\n### 再次运行\n1. 运行``react-native run-android``\n```git\n> react-native run-android\n```\n\n又提示报错关于 ``[Android SDK Platform 23, Android SDK Build-Tools 23.0.1].``， 这是由于少了build-tools 23.0.1, 在sdk manager里面安装就行了  \n![snap3555](snap3555.jpg)  \n![snap3556](snap3556.jpg)  \n点击**finished**\n\n2. 运行``react-native run-android``\n```git\n> react-native run-android\n```\n提示报错`` com.android.builder.testing.api.DeviceException: No connected devices!``, 由于没连上设备导致的错误\n\n### 连接设备\nadb（连接devices的驱动）可以通过模拟器和真机进行，android studio带的模拟器不怎么好用，所以我选择用强大的**genymotion**进行开发\n\n#### 下载genymotion免费版并启动\n1. 下载并安装[genymotion免费版](https://pan.baidu.com/share/link?shareid=3943454172&uk=3073382768#list/path=%2F),替换安装目录文件就免费了\n2. 由于**genymotion**依赖virtualbox，下载安装[virtualbox](https://www.baidu.com/s?ie=utf-8&f=3&rsv_bp=1&rsv_idx=1&tn=baidu&wd=virtualbox&oq=genymotion%25E7%25A0%25B4%25E8%25A7%25A3%25E7%2589%2588&rsv_pq=e656eb5a0011ec27&rsv_t=715efDZI0lJ%2B1tsmUpCuiiAat7RfExGnvVtlkSWbKVbC%2BS9zwTu7ku7rueA&rqlang=cn&rsv_enter=1&inputT=1128&rsv_sug3=8&rsv_sug1=8&rsv_sug7=100&bs=genymotion%E7%A0%B4%E8%A7%A3%E7%89%88)就行了\n3. 以上安装好之后打开**genymotion**，根据提示添加一个设备并运行该安卓模拟器\n![gen](gen.jpg)\n4. 安装完毕，选择一个添加好的虚拟机，并启动。 糟糕，不知什么原因报错了。\n![err](err.jpg)  \n``碰到这种报错不用怕，打开virtualBox，直接启动安装好的虚拟机。``\n![verr](verr.jpg)  \n``可以看出来是virtualBox的配置有错误，那就打开配置信息 `` \n![configerr](configerr.jpg)  \n``跟随黄色提示配置好virtualBox,继续启动在genymotion里面添加的设备，完美! `` \n![success](success.jpg)  \n5. 在genymotion里面配置sdk路径\n![sdk](sdk.png)\n6. 如果还是提示连接不上设备，就用adb连接一下\n```$xslt\n> adb devices\n> adb connect 127.0.0.1\n> adb devices\n```\n\n## 开始开发\n\n1. 各种配置都设置好了，继续运行``react-native run-android``\n2. 尼玛又是error,这次明显的看出提示没有连接上js Service,得手动连接了    \n![netErr](netErr.jpg)  \n``点击菜单 -> Dev Setting -> Debug server host``\n![dev](dev.jpg)  \n![host](host.jpg)    \n``然后返回，reload一下``\n![reload](reload.jpg)  \n``出现成功界面，可以愉快的开发了``  \n![devSuccess](devSuccess.jpg)  \n**注意：在菜单里面点击 Enable Hot Reloading，这样就可以保存后实时刷新了**\n\n### 正式开发，就写一个简单的底部导航路由\n用到底部导航package [react-native-tab-navigator](https://github.com/expo/react-native-tab-navigator)\n```$xslt\n> yarn add react-native-tab-navigator\n```\n\n修改``index.android.js``,给入口少搁点东西，不然看着恶心\n```jsx harmony\nimport React, { Component } from 'react';\nimport {\n  AppRegistry\n} from 'react-native';\n\nimport RootApp from './app/RootApp'\n\nAppRegistry.registerComponent('rnDemo', () => RootApp); // rnDemo是项目的名称\n```\n\n在根目录新建文件夹app，在app里面新建 RootApp.js、components/Home.js、components/Nice.js  \n\napp/RootApp.js\n```jsx harmony\nimport React, {Component} from 'react'\nimport {\n  View,\n  StyleSheet\n} from 'react-native'\nimport TabNavigator from 'react-native-tab-navigator'\nimport Home from './components/Home'\nimport Nice from './components/Nice'\nimport TabNavigatorItem from \"react-native-tab-navigator/TabNavigatorItem\";\n\nexport default class RootApp extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedTab: 'home'\n    }\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <TabNavigator>\n          <TabNavigatorItem\n            title=\"Home\"\n            onPress={() => this.setState({selectedTab: 'home'})}\n            selected={this.state.selectedTab === 'home'}>\n            <Home/>\n          </TabNavigatorItem>\n          <TabNavigatorItem\n            title=\"Nice\"\n            onPress={() => this.setState({selectedTab: 'nice'})}\n            selected={this.state.selectedTab === 'nice'}>\n            <Nice/>\n          </TabNavigatorItem>\n        </TabNavigator>\n      </View>\n    )\n  }\n}\n\nlet styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ccc'\n  }\n});\n```\n\napp/components/Home.js\n```jsx harmony\nimport React, {Component} from 'react'\nimport {\n  Text\n} from 'react-native'\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <Text>\n        我是Home\n      </Text>\n    )\n  }\n}\n```\n\napp/components/Nice.js\n```jsx harmony\nimport React, {Component} from 'react'\nimport {\n  Text\n} from 'react-native'\n\nexport default class Nice extends Component {\n  render() {\n    return (\n      <Text>\n        我是Nice\n      </Text>\n    )\n  }\n}\n```\n\n大功告成  \n![bigSuccess](bigSuccess.jpg)\n","source":"_posts/2017/04/react-native进入姿势.md","raw":"---\ntitle: react-native进入姿势\ndate: 2017-04-22 11:34:51\ncategories: 自学历程\ntags:\n  - javascript\n  - reactNative\n---\n## 开始战斗\n``准备学一点react，然后觉得不如直接学习react-native，就开始了react-native之路，从环境搭建到一个小DEMO，花了不少时间，主要是下载太麻烦``\n### 准备工作\n   1. ide: 我选择idea，习惯了\n   2. 电脑：win7的i5渣配置，所以先不打算进行ios开发\n   3. 没有vpn，宽带是交话费送的10M联通宽带，网速还行1m/s\n   4. 推荐给电脑安装**[wox](http://www.getwox.com/)和everything(wox插件就有)**，方便寻找文件\n\n## 环境搭建\n### node环境\n1. 下载安装**nodeJs**（最新的就行），为了防止环境变量有问题，不要修改安装目录\n2. 使用 node-v npm -v 看看有没有安装成功\n<!-- more -->\n3. 注册淘宝镜像 \n```$xslt\n> npm config set registry https://registry.npm.taobao.org --global\n> npm config set disturl https://npm.taobao.org/dist --global\n```\n\n4. 下载**yarn**，react-native默认使用yarn下载\n```$xslt\n  > npm i -g yarn\n  > yarn -v\n```\n\n5. 给**yarn**注册淘宝镜像\n```$xslt\n> yarn config set registry https://registry.npm.taobao.org --global\n> yarn config set disturl https://npm.taobao.org/dist --global \n```\n\n### react-native安装\n  1. 使用yarn下载react-native-cli\n```$xslt\n> yarn global add react-native-cli\n> react-native --version\n```\n\n  2. 创建项目,一直等待下载完成，生成的目录还是很清晰的\n```$xslt\n> yarn-native init rnDemo \n```\n\n  ![directory](directory.jpg)\n  3. 试着运行项目\n```git\n> cd rnDemo\n> npm start\n```\n\n   命令行显示，8081端口开启服务。在浏览器输入[localhost:8081](localhost:8081),显示``React Native packager is running.``，说明服务还是通畅的。可咱们要做安卓项目！所以继续使用命令行\n```$xslt\n> react-native run-android\n```\n\n   不出意外会挺慢，因为要下载gradle（gradle是安卓项目常用的构建工具，用来管理jar包和执行任务）和jar包，命令行会提示在此url下载文件``Download https://jcenter.bintray.com/com/android/tools/annotations/25.2.3/annotations-25.2.3.jar``\n  4. 因为网络的问题，所以给gradle配置阿里云maven（java常用的包管理工具，有一个下载的仓库，但很慢）镜像。进入**.gradle**文件夹，一般在``C:\\Users\\Administrator\\.gradle``，使用wox就简单多了\n    ![wox](wox.jpg)  \n  在 **.gradle** 文件夹里面新建 **init.gradle** 文件，并写入下面代码，或[点击下载init.gradle](init.gradle)\n```groovy\nallprojects{\n    repositories {\n        def REPOSITORY_URL = 'http://maven.aliyun.com/nexus/content/groups/public/'\n        all { ArtifactRepository repo ->\n            if(repo instanceof MavenArtifactRepository){\n                def url = repo.url.toString()\n                if (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com/')) {\n                    project.logger.lifecycle \"Repository ${repo.url} replaced by $REPOSITORY_URL.\"\n                    remove repo\n                }\n            }\n        }\n        maven {\n            url REPOSITORY_URL\n        }\n    }\n}\n```\n\n  5. 继续运行命令``react-native run-android``\n```git\n> react-native run-android\n```\n\n可以看到下载速度快了好多，但最后会发现报错``SDK location not found``，这是因为没有安装 **android sdk** ，接下来配置 **android环境**\n\n### android开发环境配置\n1. 安装java环境，搜一下有N多教程\n2. 下载**android studio** 没有翻墙的话推荐使用[网盘下载](https://pan.baidu.com/s/1jIyKHjK)\n3. 安装**android studio** 推荐使用默认安装一直点击``next``  \n4. 第一次启动会进入下面界面\n![androids](androids.jpg)\n  * standard 标准配置，推荐第一次安装使用能够\n  * custom 选择安装， 可以自己定制安装选项  \n由于是第一此安装就直接选用默认的**standard**安装，但是react-native官网推荐custom\n4. 记得勾选**Android Virtual Device**，一直**next**，最后点击**finished**等待下载完成\n  ![avd](avd.jpg)\n  \n### 环境变量\n在电脑环境变量设置里面，点击新建，ANDROID_HOME sdk路径\n![ANDROID_HOME](android_home.jpg)  \n然后再到环境变量 **path** 里面添加类似这样  \n``C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\tools``  \n``C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\platform-tools``  \n一定注意路径的正确性  \n![tools](tools.jpg)\n\n### 再次运行\n1. 运行``react-native run-android``\n```git\n> react-native run-android\n```\n\n又提示报错关于 ``[Android SDK Platform 23, Android SDK Build-Tools 23.0.1].``， 这是由于少了build-tools 23.0.1, 在sdk manager里面安装就行了  \n![snap3555](snap3555.jpg)  \n![snap3556](snap3556.jpg)  \n点击**finished**\n\n2. 运行``react-native run-android``\n```git\n> react-native run-android\n```\n提示报错`` com.android.builder.testing.api.DeviceException: No connected devices!``, 由于没连上设备导致的错误\n\n### 连接设备\nadb（连接devices的驱动）可以通过模拟器和真机进行，android studio带的模拟器不怎么好用，所以我选择用强大的**genymotion**进行开发\n\n#### 下载genymotion免费版并启动\n1. 下载并安装[genymotion免费版](https://pan.baidu.com/share/link?shareid=3943454172&uk=3073382768#list/path=%2F),替换安装目录文件就免费了\n2. 由于**genymotion**依赖virtualbox，下载安装[virtualbox](https://www.baidu.com/s?ie=utf-8&f=3&rsv_bp=1&rsv_idx=1&tn=baidu&wd=virtualbox&oq=genymotion%25E7%25A0%25B4%25E8%25A7%25A3%25E7%2589%2588&rsv_pq=e656eb5a0011ec27&rsv_t=715efDZI0lJ%2B1tsmUpCuiiAat7RfExGnvVtlkSWbKVbC%2BS9zwTu7ku7rueA&rqlang=cn&rsv_enter=1&inputT=1128&rsv_sug3=8&rsv_sug1=8&rsv_sug7=100&bs=genymotion%E7%A0%B4%E8%A7%A3%E7%89%88)就行了\n3. 以上安装好之后打开**genymotion**，根据提示添加一个设备并运行该安卓模拟器\n![gen](gen.jpg)\n4. 安装完毕，选择一个添加好的虚拟机，并启动。 糟糕，不知什么原因报错了。\n![err](err.jpg)  \n``碰到这种报错不用怕，打开virtualBox，直接启动安装好的虚拟机。``\n![verr](verr.jpg)  \n``可以看出来是virtualBox的配置有错误，那就打开配置信息 `` \n![configerr](configerr.jpg)  \n``跟随黄色提示配置好virtualBox,继续启动在genymotion里面添加的设备，完美! `` \n![success](success.jpg)  \n5. 在genymotion里面配置sdk路径\n![sdk](sdk.png)\n6. 如果还是提示连接不上设备，就用adb连接一下\n```$xslt\n> adb devices\n> adb connect 127.0.0.1\n> adb devices\n```\n\n## 开始开发\n\n1. 各种配置都设置好了，继续运行``react-native run-android``\n2. 尼玛又是error,这次明显的看出提示没有连接上js Service,得手动连接了    \n![netErr](netErr.jpg)  \n``点击菜单 -> Dev Setting -> Debug server host``\n![dev](dev.jpg)  \n![host](host.jpg)    \n``然后返回，reload一下``\n![reload](reload.jpg)  \n``出现成功界面，可以愉快的开发了``  \n![devSuccess](devSuccess.jpg)  \n**注意：在菜单里面点击 Enable Hot Reloading，这样就可以保存后实时刷新了**\n\n### 正式开发，就写一个简单的底部导航路由\n用到底部导航package [react-native-tab-navigator](https://github.com/expo/react-native-tab-navigator)\n```$xslt\n> yarn add react-native-tab-navigator\n```\n\n修改``index.android.js``,给入口少搁点东西，不然看着恶心\n```jsx harmony\nimport React, { Component } from 'react';\nimport {\n  AppRegistry\n} from 'react-native';\n\nimport RootApp from './app/RootApp'\n\nAppRegistry.registerComponent('rnDemo', () => RootApp); // rnDemo是项目的名称\n```\n\n在根目录新建文件夹app，在app里面新建 RootApp.js、components/Home.js、components/Nice.js  \n\napp/RootApp.js\n```jsx harmony\nimport React, {Component} from 'react'\nimport {\n  View,\n  StyleSheet\n} from 'react-native'\nimport TabNavigator from 'react-native-tab-navigator'\nimport Home from './components/Home'\nimport Nice from './components/Nice'\nimport TabNavigatorItem from \"react-native-tab-navigator/TabNavigatorItem\";\n\nexport default class RootApp extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedTab: 'home'\n    }\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <TabNavigator>\n          <TabNavigatorItem\n            title=\"Home\"\n            onPress={() => this.setState({selectedTab: 'home'})}\n            selected={this.state.selectedTab === 'home'}>\n            <Home/>\n          </TabNavigatorItem>\n          <TabNavigatorItem\n            title=\"Nice\"\n            onPress={() => this.setState({selectedTab: 'nice'})}\n            selected={this.state.selectedTab === 'nice'}>\n            <Nice/>\n          </TabNavigatorItem>\n        </TabNavigator>\n      </View>\n    )\n  }\n}\n\nlet styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ccc'\n  }\n});\n```\n\napp/components/Home.js\n```jsx harmony\nimport React, {Component} from 'react'\nimport {\n  Text\n} from 'react-native'\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <Text>\n        我是Home\n      </Text>\n    )\n  }\n}\n```\n\napp/components/Nice.js\n```jsx harmony\nimport React, {Component} from 'react'\nimport {\n  Text\n} from 'react-native'\n\nexport default class Nice extends Component {\n  render() {\n    return (\n      <Text>\n        我是Nice\n      </Text>\n    )\n  }\n}\n```\n\n大功告成  \n![bigSuccess](bigSuccess.jpg)\n","slug":"react-native进入姿势","published":1,"updated":"2017-05-15T09:47:12.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb7i0009n8v3hgag16qh","content":"<h2 id=\"开始战斗\"><a href=\"#开始战斗\" class=\"headerlink\" title=\"开始战斗\"></a>开始战斗</h2><p><code>准备学一点react，然后觉得不如直接学习react-native，就开始了react-native之路，从环境搭建到一个小DEMO，花了不少时间，主要是下载太麻烦</code></p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>ide: 我选择idea，习惯了</li>\n<li>电脑：win7的i5渣配置，所以先不打算进行ios开发</li>\n<li>没有vpn，宽带是交话费送的10M联通宽带，网速还行1m/s</li>\n<li>推荐给电脑安装<strong><a href=\"http://www.getwox.com/\" target=\"_blank\" rel=\"external\">wox</a>和everything(wox插件就有)</strong>，方便寻找文件</li>\n</ol>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"node环境\"><a href=\"#node环境\" class=\"headerlink\" title=\"node环境\"></a>node环境</h3><ol>\n<li>下载安装<strong>nodeJs</strong>（最新的就行），为了防止环境变量有问题，不要修改安装目录</li>\n<li>使用 node-v npm -v 看看有没有安装成功<a id=\"more\"></a></li>\n<li><p>注册淘宝镜像 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm config set registry https://registry.npm.taobao.org --global</div><div class=\"line\">&gt; npm config set disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载<strong>yarn</strong>，react-native默认使用yarn下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm i -g yarn</div><div class=\"line\">&gt; yarn -v</div></pre></td></tr></table></figure>\n</li>\n<li><p>给<strong>yarn</strong>注册淘宝镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; yarn config set registry https://registry.npm.taobao.org --global</div><div class=\"line\">&gt; yarn config set disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"react-native安装\"><a href=\"#react-native安装\" class=\"headerlink\" title=\"react-native安装\"></a>react-native安装</h3><ol>\n<li><p>使用yarn下载react-native-cli</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; yarn global add react-native-cli</div><div class=\"line\">&gt; react-native --version</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建项目,一直等待下载完成，生成的目录还是很清晰的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; yarn-native init rnDemo</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/04/22/react-native进入姿势/directory.jpg\" alt=\"directory\"></p>\n</li>\n<li><p>试着运行项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; cd rnDemo</div><div class=\"line\">&gt; npm start</div></pre></td></tr></table></figure>\n<p>命令行显示，8081端口开启服务。在浏览器输入<a href=\"localhost:8081\" target=\"_blank\" rel=\"external\">localhost:8081</a>,显示<code>React Native packager is running.</code>，说明服务还是通畅的。可咱们要做安卓项目！所以继续使用命令行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; react-native run-android</div></pre></td></tr></table></figure>\n<p>不出意外会挺慢，因为要下载gradle（gradle是安卓项目常用的构建工具，用来管理jar包和执行任务）和jar包，命令行会提示在此url下载文件<code>Download https://jcenter.bintray.com/com/android/tools/annotations/25.2.3/annotations-25.2.3.jar</code></p>\n</li>\n<li><p>因为网络的问题，所以给gradle配置阿里云maven（java常用的包管理工具，有一个下载的仓库，但很慢）镜像。进入<strong>.gradle</strong>文件夹，一般在<code>C:\\Users\\Administrator\\.gradle</code>，使用wox就简单多了<br><img src=\"/2017/04/22/react-native进入姿势/wox.jpg\" alt=\"wox\"><br>在 <strong>.gradle</strong> 文件夹里面新建 <strong>init.gradle</strong> 文件，并写入下面代码，或<a href=\"init.gradle\">点击下载init.gradle</a></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">allprojects&#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        <span class=\"keyword\">def</span> REPOSITORY_URL = <span class=\"string\">'http://maven.aliyun.com/nexus/content/groups/public/'</span></div><div class=\"line\">        all &#123; ArtifactRepository repo -&gt;</div><div class=\"line\">            <span class=\"keyword\">if</span>(repo <span class=\"keyword\">instanceof</span> MavenArtifactRepository)&#123;</div><div class=\"line\">                <span class=\"keyword\">def</span> url = repo.url.toString()</div><div class=\"line\">                <span class=\"keyword\">if</span> (url.startsWith(<span class=\"string\">'https://repo1.maven.org/maven2'</span>) || url.startsWith(<span class=\"string\">'https://jcenter.bintray.com/'</span>)) &#123;</div><div class=\"line\">                    project.logger.lifecycle <span class=\"string\">\"Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.\"</span></div><div class=\"line\">                    remove repo</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        maven &#123;</div><div class=\"line\">            url REPOSITORY_URL</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>继续运行命令<code>react-native run-android</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; react-native run-android</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>可以看到下载速度快了好多，但最后会发现报错<code>SDK location not found</code>，这是因为没有安装 <strong>android sdk</strong> ，接下来配置 <strong>android环境</strong></p>\n<h3 id=\"android开发环境配置\"><a href=\"#android开发环境配置\" class=\"headerlink\" title=\"android开发环境配置\"></a>android开发环境配置</h3><ol>\n<li>安装java环境，搜一下有N多教程</li>\n<li>下载<strong>android studio</strong> 没有翻墙的话推荐使用<a href=\"https://pan.baidu.com/s/1jIyKHjK\" target=\"_blank\" rel=\"external\">网盘下载</a></li>\n<li>安装<strong>android studio</strong> 推荐使用默认安装一直点击<code>next</code>  </li>\n<li>第一次启动会进入下面界面<br><img src=\"/2017/04/22/react-native进入姿势/androids.jpg\" alt=\"androids\"><ul>\n<li>standard 标准配置，推荐第一次安装使用能够</li>\n<li>custom 选择安装， 可以自己定制安装选项<br>由于是第一此安装就直接选用默认的<strong>standard</strong>安装，但是react-native官网推荐custom</li>\n</ul>\n</li>\n<li>记得勾选<strong>Android Virtual Device</strong>，一直<strong>next</strong>，最后点击<strong>finished</strong>等待下载完成<br><img src=\"/2017/04/22/react-native进入姿势/avd.jpg\" alt=\"avd\"></li>\n</ol>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>在电脑环境变量设置里面，点击新建，ANDROID_HOME sdk路径<br><img src=\"/2017/04/22/react-native进入姿势/android_home.jpg\" alt=\"ANDROID_HOME\"><br>然后再到环境变量 <strong>path</strong> 里面添加类似这样<br><code>C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\tools</code><br><code>C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\platform-tools</code><br>一定注意路径的正确性<br><img src=\"/2017/04/22/react-native进入姿势/tools.jpg\" alt=\"tools\"></p>\n<h3 id=\"再次运行\"><a href=\"#再次运行\" class=\"headerlink\" title=\"再次运行\"></a>再次运行</h3><ol>\n<li>运行<code>react-native run-android</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; react-native run-android</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>又提示报错关于 <code>[Android SDK Platform 23, Android SDK Build-Tools 23.0.1].</code>， 这是由于少了build-tools 23.0.1, 在sdk manager里面安装就行了<br><img src=\"/2017/04/22/react-native进入姿势/snap3555.jpg\" alt=\"snap3555\"><br><img src=\"/2017/04/22/react-native进入姿势/snap3556.jpg\" alt=\"snap3556\"><br>点击<strong>finished</strong></p>\n<ol>\n<li>运行<code>react-native run-android</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; react-native run-android</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>提示报错<code>com.android.builder.testing.api.DeviceException: No connected devices!</code>, 由于没连上设备导致的错误</p>\n<h3 id=\"连接设备\"><a href=\"#连接设备\" class=\"headerlink\" title=\"连接设备\"></a>连接设备</h3><p>adb（连接devices的驱动）可以通过模拟器和真机进行，android studio带的模拟器不怎么好用，所以我选择用强大的<strong>genymotion</strong>进行开发</p>\n<h4 id=\"下载genymotion免费版并启动\"><a href=\"#下载genymotion免费版并启动\" class=\"headerlink\" title=\"下载genymotion免费版并启动\"></a>下载genymotion免费版并启动</h4><ol>\n<li>下载并安装<a href=\"https://pan.baidu.com/share/link?shareid=3943454172&amp;uk=3073382768#list/path=%2F\" target=\"_blank\" rel=\"external\">genymotion免费版</a>,替换安装目录文件就免费了</li>\n<li>由于<strong>genymotion</strong>依赖virtualbox，下载安装<a href=\"https://www.baidu.com/s?ie=utf-8&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=virtualbox&amp;oq=genymotion%25E7%25A0%25B4%25E8%25A7%25A3%25E7%2589%2588&amp;rsv_pq=e656eb5a0011ec27&amp;rsv_t=715efDZI0lJ%2B1tsmUpCuiiAat7RfExGnvVtlkSWbKVbC%2BS9zwTu7ku7rueA&amp;rqlang=cn&amp;rsv_enter=1&amp;inputT=1128&amp;rsv_sug3=8&amp;rsv_sug1=8&amp;rsv_sug7=100&amp;bs=genymotion%E7%A0%B4%E8%A7%A3%E7%89%88\" target=\"_blank\" rel=\"external\">virtualbox</a>就行了</li>\n<li>以上安装好之后打开<strong>genymotion</strong>，根据提示添加一个设备并运行该安卓模拟器<br><img src=\"/2017/04/22/react-native进入姿势/gen.jpg\" alt=\"gen\"></li>\n<li>安装完毕，选择一个添加好的虚拟机，并启动。 糟糕，不知什么原因报错了。<br><img src=\"/2017/04/22/react-native进入姿势/err.jpg\" alt=\"err\"><br><code>碰到这种报错不用怕，打开virtualBox，直接启动安装好的虚拟机。</code><br><img src=\"/2017/04/22/react-native进入姿势/verr.jpg\" alt=\"verr\"><br><code>可以看出来是virtualBox的配置有错误，那就打开配置信息</code><br><img src=\"/2017/04/22/react-native进入姿势/configerr.jpg\" alt=\"configerr\"><br><code>跟随黄色提示配置好virtualBox,继续启动在genymotion里面添加的设备，完美!</code><br><img src=\"/2017/04/22/react-native进入姿势/success.jpg\" alt=\"success\">  </li>\n<li>在genymotion里面配置sdk路径<br><img src=\"/2017/04/22/react-native进入姿势/sdk.png\" alt=\"sdk\"></li>\n<li>如果还是提示连接不上设备，就用adb连接一下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; adb devices</div><div class=\"line\">&gt; adb connect 127.0.0.1</div><div class=\"line\">&gt; adb devices</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"开始开发\"><a href=\"#开始开发\" class=\"headerlink\" title=\"开始开发\"></a>开始开发</h2><ol>\n<li>各种配置都设置好了，继续运行<code>react-native run-android</code></li>\n<li>尼玛又是error,这次明显的看出提示没有连接上js Service,得手动连接了<br><img src=\"/2017/04/22/react-native进入姿势/netErr.jpg\" alt=\"netErr\"><br><code>点击菜单 -&gt; Dev Setting -&gt; Debug server host</code><br><img src=\"/2017/04/22/react-native进入姿势/dev.jpg\" alt=\"dev\"><br><img src=\"/2017/04/22/react-native进入姿势/host.jpg\" alt=\"host\"><br><code>然后返回，reload一下</code><br><img src=\"/2017/04/22/react-native进入姿势/reload.jpg\" alt=\"reload\"><br><code>出现成功界面，可以愉快的开发了</code><br><img src=\"/2017/04/22/react-native进入姿势/devSuccess.jpg\" alt=\"devSuccess\"><br><strong>注意：在菜单里面点击 Enable Hot Reloading，这样就可以保存后实时刷新了</strong></li>\n</ol>\n<h3 id=\"正式开发，就写一个简单的底部导航路由\"><a href=\"#正式开发，就写一个简单的底部导航路由\" class=\"headerlink\" title=\"正式开发，就写一个简单的底部导航路由\"></a>正式开发，就写一个简单的底部导航路由</h3><p>用到底部导航package <a href=\"https://github.com/expo/react-native-tab-navigator\" target=\"_blank\" rel=\"external\">react-native-tab-navigator</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; yarn add react-native-tab-navigator</div></pre></td></tr></table></figure></p>\n<p>修改<code>index.android.js</code>,给入口少搁点东西，不然看着恶心<br><figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  AppRegistry</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> RootApp <span class=\"keyword\">from</span> <span class=\"string\">'./app/RootApp'</span></div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent(<span class=\"string\">'rnDemo'</span>, () =&gt; RootApp); <span class=\"comment\">// rnDemo是项目的名称</span></div></pre></td></tr></table></figure></p>\n<p>在根目录新建文件夹app，在app里面新建 RootApp.js、components/Home.js、components/Nice.js  </p>\n<p>app/RootApp.js<br><figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  View,</div><div class=\"line\">  StyleSheet</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"><span class=\"keyword\">import</span> TabNavigator <span class=\"keyword\">from</span> <span class=\"string\">'react-native-tab-navigator'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'./components/Home'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Nice <span class=\"keyword\">from</span> <span class=\"string\">'./components/Nice'</span></div><div class=\"line\"><span class=\"keyword\">import</span> TabNavigatorItem <span class=\"keyword\">from</span> <span class=\"string\">\"react-native-tab-navigator/TabNavigatorItem\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RootApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props)</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      <span class=\"attr\">selectedTab</span>: <span class=\"string\">'home'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.container&#125;</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TabNavigator</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">TabNavigatorItem</span></span></div><div class=\"line\">            <span class=\"attr\">title</span>=<span class=\"string\">\"Home\"</span></div><div class=\"line\">            <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt; this.setState(&#123;selectedTab: 'home'&#125;)&#125;</div><div class=\"line\">            selected=&#123;this.state.selectedTab === 'home'&#125;&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Home</span>/&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">TabNavigatorItem</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">TabNavigatorItem</span></span></div><div class=\"line\">            <span class=\"attr\">title</span>=<span class=\"string\">\"Nice\"</span></div><div class=\"line\">            <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt; this.setState(&#123;selectedTab: 'nice'&#125;)&#125;</div><div class=\"line\">            selected=&#123;this.state.selectedTab === 'nice'&#125;&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Nice</span>/&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">TabNavigatorItem</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TabNavigator</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> styles = StyleSheet.create(&#123;</div><div class=\"line\">  <span class=\"attr\">container</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#ccc'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>app/components/Home.js<br><figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  Text</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span></span></div><div class=\"line\">        我是Home</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>app/components/Nice.js<br><figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  Text</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nice</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span></span></div><div class=\"line\">        我是Nice</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>大功告成<br><img src=\"/2017/04/22/react-native进入姿势/bigSuccess.jpg\" alt=\"bigSuccess\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"开始战斗\"><a href=\"#开始战斗\" class=\"headerlink\" title=\"开始战斗\"></a>开始战斗</h2><p><code>准备学一点react，然后觉得不如直接学习react-native，就开始了react-native之路，从环境搭建到一个小DEMO，花了不少时间，主要是下载太麻烦</code></p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>ide: 我选择idea，习惯了</li>\n<li>电脑：win7的i5渣配置，所以先不打算进行ios开发</li>\n<li>没有vpn，宽带是交话费送的10M联通宽带，网速还行1m/s</li>\n<li>推荐给电脑安装<strong><a href=\"http://www.getwox.com/\">wox</a>和everything(wox插件就有)</strong>，方便寻找文件</li>\n</ol>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"node环境\"><a href=\"#node环境\" class=\"headerlink\" title=\"node环境\"></a>node环境</h3><ol>\n<li>下载安装<strong>nodeJs</strong>（最新的就行），为了防止环境变量有问题，不要修改安装目录</li>\n<li>使用 node-v npm -v 看看有没有安装成功</li></ol>","more":"\n<li><p>注册淘宝镜像 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm config set registry https://registry.npm.taobao.org --global</div><div class=\"line\">&gt; npm config set disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载<strong>yarn</strong>，react-native默认使用yarn下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; npm i -g yarn</div><div class=\"line\">&gt; yarn -v</div></pre></td></tr></table></figure>\n</li>\n<li><p>给<strong>yarn</strong>注册淘宝镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; yarn config set registry https://registry.npm.taobao.org --global</div><div class=\"line\">&gt; yarn config set disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure>\n</li>\n\n<h3 id=\"react-native安装\"><a href=\"#react-native安装\" class=\"headerlink\" title=\"react-native安装\"></a>react-native安装</h3><ol>\n<li><p>使用yarn下载react-native-cli</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; yarn global add react-native-cli</div><div class=\"line\">&gt; react-native --version</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建项目,一直等待下载完成，生成的目录还是很清晰的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; yarn-native init rnDemo</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/04/22/react-native进入姿势/directory.jpg\" alt=\"directory\"></p>\n</li>\n<li><p>试着运行项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; cd rnDemo</div><div class=\"line\">&gt; npm start</div></pre></td></tr></table></figure>\n<p>命令行显示，8081端口开启服务。在浏览器输入<a href=\"localhost:8081\">localhost:8081</a>,显示<code>React Native packager is running.</code>，说明服务还是通畅的。可咱们要做安卓项目！所以继续使用命令行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; react-native run-android</div></pre></td></tr></table></figure>\n<p>不出意外会挺慢，因为要下载gradle（gradle是安卓项目常用的构建工具，用来管理jar包和执行任务）和jar包，命令行会提示在此url下载文件<code>Download https://jcenter.bintray.com/com/android/tools/annotations/25.2.3/annotations-25.2.3.jar</code></p>\n</li>\n<li><p>因为网络的问题，所以给gradle配置阿里云maven（java常用的包管理工具，有一个下载的仓库，但很慢）镜像。进入<strong>.gradle</strong>文件夹，一般在<code>C:\\Users\\Administrator\\.gradle</code>，使用wox就简单多了<br><img src=\"/2017/04/22/react-native进入姿势/wox.jpg\" alt=\"wox\"><br>在 <strong>.gradle</strong> 文件夹里面新建 <strong>init.gradle</strong> 文件，并写入下面代码，或<a href=\"init.gradle\">点击下载init.gradle</a></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">allprojects&#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        <span class=\"keyword\">def</span> REPOSITORY_URL = <span class=\"string\">'http://maven.aliyun.com/nexus/content/groups/public/'</span></div><div class=\"line\">        all &#123; ArtifactRepository repo -&gt;</div><div class=\"line\">            <span class=\"keyword\">if</span>(repo <span class=\"keyword\">instanceof</span> MavenArtifactRepository)&#123;</div><div class=\"line\">                <span class=\"keyword\">def</span> url = repo.url.toString()</div><div class=\"line\">                <span class=\"keyword\">if</span> (url.startsWith(<span class=\"string\">'https://repo1.maven.org/maven2'</span>) || url.startsWith(<span class=\"string\">'https://jcenter.bintray.com/'</span>)) &#123;</div><div class=\"line\">                    project.logger.lifecycle <span class=\"string\">\"Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.\"</span></div><div class=\"line\">                    remove repo</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        maven &#123;</div><div class=\"line\">            url REPOSITORY_URL</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>继续运行命令<code>react-native run-android</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; react-native run-android</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>可以看到下载速度快了好多，但最后会发现报错<code>SDK location not found</code>，这是因为没有安装 <strong>android sdk</strong> ，接下来配置 <strong>android环境</strong></p>\n<h3 id=\"android开发环境配置\"><a href=\"#android开发环境配置\" class=\"headerlink\" title=\"android开发环境配置\"></a>android开发环境配置</h3><ol>\n<li>安装java环境，搜一下有N多教程</li>\n<li>下载<strong>android studio</strong> 没有翻墙的话推荐使用<a href=\"https://pan.baidu.com/s/1jIyKHjK\">网盘下载</a></li>\n<li>安装<strong>android studio</strong> 推荐使用默认安装一直点击<code>next</code>  </li>\n<li>第一次启动会进入下面界面<br><img src=\"/2017/04/22/react-native进入姿势/androids.jpg\" alt=\"androids\"><ul>\n<li>standard 标准配置，推荐第一次安装使用能够</li>\n<li>custom 选择安装， 可以自己定制安装选项<br>由于是第一此安装就直接选用默认的<strong>standard</strong>安装，但是react-native官网推荐custom</li>\n</ul>\n</li>\n<li>记得勾选<strong>Android Virtual Device</strong>，一直<strong>next</strong>，最后点击<strong>finished</strong>等待下载完成<br><img src=\"/2017/04/22/react-native进入姿势/avd.jpg\" alt=\"avd\"></li>\n</ol>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>在电脑环境变量设置里面，点击新建，ANDROID_HOME sdk路径<br><img src=\"/2017/04/22/react-native进入姿势/android_home.jpg\" alt=\"ANDROID_HOME\"><br>然后再到环境变量 <strong>path</strong> 里面添加类似这样<br><code>C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\tools</code><br><code>C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\platform-tools</code><br>一定注意路径的正确性<br><img src=\"/2017/04/22/react-native进入姿势/tools.jpg\" alt=\"tools\"></p>\n<h3 id=\"再次运行\"><a href=\"#再次运行\" class=\"headerlink\" title=\"再次运行\"></a>再次运行</h3><ol>\n<li>运行<code>react-native run-android</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; react-native run-android</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>又提示报错关于 <code>[Android SDK Platform 23, Android SDK Build-Tools 23.0.1].</code>， 这是由于少了build-tools 23.0.1, 在sdk manager里面安装就行了<br><img src=\"/2017/04/22/react-native进入姿势/snap3555.jpg\" alt=\"snap3555\"><br><img src=\"/2017/04/22/react-native进入姿势/snap3556.jpg\" alt=\"snap3556\"><br>点击<strong>finished</strong></p>\n<ol>\n<li>运行<code>react-native run-android</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; react-native run-android</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>提示报错<code>com.android.builder.testing.api.DeviceException: No connected devices!</code>, 由于没连上设备导致的错误</p>\n<h3 id=\"连接设备\"><a href=\"#连接设备\" class=\"headerlink\" title=\"连接设备\"></a>连接设备</h3><p>adb（连接devices的驱动）可以通过模拟器和真机进行，android studio带的模拟器不怎么好用，所以我选择用强大的<strong>genymotion</strong>进行开发</p>\n<h4 id=\"下载genymotion免费版并启动\"><a href=\"#下载genymotion免费版并启动\" class=\"headerlink\" title=\"下载genymotion免费版并启动\"></a>下载genymotion免费版并启动</h4><ol>\n<li>下载并安装<a href=\"https://pan.baidu.com/share/link?shareid=3943454172&amp;uk=3073382768#list/path=%2F\">genymotion免费版</a>,替换安装目录文件就免费了</li>\n<li>由于<strong>genymotion</strong>依赖virtualbox，下载安装<a href=\"https://www.baidu.com/s?ie=utf-8&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=virtualbox&amp;oq=genymotion%25E7%25A0%25B4%25E8%25A7%25A3%25E7%2589%2588&amp;rsv_pq=e656eb5a0011ec27&amp;rsv_t=715efDZI0lJ%2B1tsmUpCuiiAat7RfExGnvVtlkSWbKVbC%2BS9zwTu7ku7rueA&amp;rqlang=cn&amp;rsv_enter=1&amp;inputT=1128&amp;rsv_sug3=8&amp;rsv_sug1=8&amp;rsv_sug7=100&amp;bs=genymotion%E7%A0%B4%E8%A7%A3%E7%89%88\">virtualbox</a>就行了</li>\n<li>以上安装好之后打开<strong>genymotion</strong>，根据提示添加一个设备并运行该安卓模拟器<br><img src=\"/2017/04/22/react-native进入姿势/gen.jpg\" alt=\"gen\"></li>\n<li>安装完毕，选择一个添加好的虚拟机，并启动。 糟糕，不知什么原因报错了。<br><img src=\"/2017/04/22/react-native进入姿势/err.jpg\" alt=\"err\"><br><code>碰到这种报错不用怕，打开virtualBox，直接启动安装好的虚拟机。</code><br><img src=\"/2017/04/22/react-native进入姿势/verr.jpg\" alt=\"verr\"><br><code>可以看出来是virtualBox的配置有错误，那就打开配置信息</code><br><img src=\"/2017/04/22/react-native进入姿势/configerr.jpg\" alt=\"configerr\"><br><code>跟随黄色提示配置好virtualBox,继续启动在genymotion里面添加的设备，完美!</code><br><img src=\"/2017/04/22/react-native进入姿势/success.jpg\" alt=\"success\">  </li>\n<li>在genymotion里面配置sdk路径<br><img src=\"/2017/04/22/react-native进入姿势/sdk.png\" alt=\"sdk\"></li>\n<li>如果还是提示连接不上设备，就用adb连接一下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; adb devices</div><div class=\"line\">&gt; adb connect 127.0.0.1</div><div class=\"line\">&gt; adb devices</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"开始开发\"><a href=\"#开始开发\" class=\"headerlink\" title=\"开始开发\"></a>开始开发</h2><ol>\n<li>各种配置都设置好了，继续运行<code>react-native run-android</code></li>\n<li>尼玛又是error,这次明显的看出提示没有连接上js Service,得手动连接了<br><img src=\"/2017/04/22/react-native进入姿势/netErr.jpg\" alt=\"netErr\"><br><code>点击菜单 -&gt; Dev Setting -&gt; Debug server host</code><br><img src=\"/2017/04/22/react-native进入姿势/dev.jpg\" alt=\"dev\"><br><img src=\"/2017/04/22/react-native进入姿势/host.jpg\" alt=\"host\"><br><code>然后返回，reload一下</code><br><img src=\"/2017/04/22/react-native进入姿势/reload.jpg\" alt=\"reload\"><br><code>出现成功界面，可以愉快的开发了</code><br><img src=\"/2017/04/22/react-native进入姿势/devSuccess.jpg\" alt=\"devSuccess\"><br><strong>注意：在菜单里面点击 Enable Hot Reloading，这样就可以保存后实时刷新了</strong></li>\n</ol>\n<h3 id=\"正式开发，就写一个简单的底部导航路由\"><a href=\"#正式开发，就写一个简单的底部导航路由\" class=\"headerlink\" title=\"正式开发，就写一个简单的底部导航路由\"></a>正式开发，就写一个简单的底部导航路由</h3><p>用到底部导航package <a href=\"https://github.com/expo/react-native-tab-navigator\">react-native-tab-navigator</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; yarn add react-native-tab-navigator</div></pre></td></tr></table></figure></p>\n<p>修改<code>index.android.js</code>,给入口少搁点东西，不然看着恶心<br><figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  AppRegistry</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> RootApp <span class=\"keyword\">from</span> <span class=\"string\">'./app/RootApp'</span></div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent(<span class=\"string\">'rnDemo'</span>, () =&gt; RootApp); <span class=\"comment\">// rnDemo是项目的名称</span></div></pre></td></tr></table></figure></p>\n<p>在根目录新建文件夹app，在app里面新建 RootApp.js、components/Home.js、components/Nice.js  </p>\n<p>app/RootApp.js<br><figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  View,</div><div class=\"line\">  StyleSheet</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"><span class=\"keyword\">import</span> TabNavigator <span class=\"keyword\">from</span> <span class=\"string\">'react-native-tab-navigator'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'./components/Home'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Nice <span class=\"keyword\">from</span> <span class=\"string\">'./components/Nice'</span></div><div class=\"line\"><span class=\"keyword\">import</span> TabNavigatorItem <span class=\"keyword\">from</span> <span class=\"string\">\"react-native-tab-navigator/TabNavigatorItem\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RootApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props)</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      <span class=\"attr\">selectedTab</span>: <span class=\"string\">'home'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.container&#125;</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TabNavigator</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">TabNavigatorItem</span></span></div><div class=\"line\">            <span class=\"attr\">title</span>=<span class=\"string\">\"Home\"</span></div><div class=\"line\">            <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt; this.setState(&#123;selectedTab: 'home'&#125;)&#125;</div><div class=\"line\">            selected=&#123;this.state.selectedTab === 'home'&#125;&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Home</span>/&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">TabNavigatorItem</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">TabNavigatorItem</span></span></div><div class=\"line\">            <span class=\"attr\">title</span>=<span class=\"string\">\"Nice\"</span></div><div class=\"line\">            <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt; this.setState(&#123;selectedTab: 'nice'&#125;)&#125;</div><div class=\"line\">            selected=&#123;this.state.selectedTab === 'nice'&#125;&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Nice</span>/&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">TabNavigatorItem</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TabNavigator</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> styles = StyleSheet.create(&#123;</div><div class=\"line\">  <span class=\"attr\">container</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#ccc'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>app/components/Home.js<br><figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  Text</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span></span></div><div class=\"line\">        我是Home</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>app/components/Nice.js<br><figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  Text</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nice</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span></span></div><div class=\"line\">        我是Nice</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>大功告成<br><img src=\"/2017/04/22/react-native进入姿势/bigSuccess.jpg\" alt=\"bigSuccess\"></p>"},{"title":"vue-cli创建的任务和后台交互cookie及restAPI处理","date":"2017-04-14T03:34:51.000Z","_content":"# 在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie\n\n## session简述\n### 什么是session？\n  * session是服务器储存信息的一种方式，一般称之为会话，  \n    以java为例``request.getSession().setAttribute(key, value)``在创建session实例时会生成一个唯一的ID，浏览器发送请求时，  \n    会将set-cookie返回给浏览器，浏览器自动存储在cookie中，  \n    在tomcat中，此Cookie叫做JSESSIONID\n  * session关键在于sessionID所以不用cookie存也是可以的，比如可以放在request param里面，只要需要时前台发过来就行\n<!-- more -->\n### 什么是cookie？\n  * cookie是客户端（浏览器端）存储信息的一种方式，服务器可以设置浏览器set-cookie标头  \n    浏览器收到标头与数值，会以文件的形式存在与计算机中。浏览器发送请求时会自动将cookie发给服务端 \n     \n#### cookie的属性 domain和path\n  * domain：domain表示的是cookie所在的域，默认为请求的地址，如网址为www.jb51.net/test/test.aspx，  \n    那么domain默认为www.jb51.net。而跨域访问，如域A为t1.test.com，域B为t2.test.com，  \n    那么在域A生产一个令域A和域B都能访问的cookie就要将该cookie的domain设置为.test.com；  \n    如果要在域A生产一个令域A不能访问而域B能访问的cookie就要将该cookie的domain设置为t2.test.com。\n    \n  * path: path表示cookie所在的目录，如baidu.com，cookie默认为根目录'/'。baidu.com/wenku/，则path=/wenku/；  \n    如果在biadu.com/wenku/下面设置set-cookie，则在baidu.com下面浏览器会因为path不对应，导致在baidu.com下set-cookie失败  \n  ![chrome下cookie](chrome下cookie.png)  \n\n### session的流程\n  1. request.getSession().setAttribute(\"username\", \"listen\")\n  2. 在http response header里面设置set-cookie返回头 set-cookie: JSESSIONID=xxxxxxxx;path=/;\n  3. 浏览器看到set-cookie信息，并且设置的domain和path与浏览器当前一致，否则等待匹配的path和domain，存储以后会自动清除掉set-cookie\n  4. 浏览器向服务端发送请求，将存储的cookie以key=value的形式放到请求头里面\n  5. 服务端获取session request.getSession().getAttribute(\"username\")\n      * 从request请求头里面获取JSESSIONID，并找到与之对称的session实例，从此实例里面获取username\n      * 一个请求session对应一个实例，sessionId是区分实例的关键\n\n### 回到问题\n  * 现在代理服务器的URI是 localhost:8080, api服务器URI是localhost:8084/articlepr/\n  * api服务器设置session时，set-cookie是这样set-cookie:JSESSIONID=xxxx;path=/articlepr/;\n  * 现set-cookie的domain和浏览器URI（代理服务器）都为localhost，而path不一样，所以会导致set-cookie浏览器存储cookie失败，后台也就拿不到JSESSIONID了\n\n### 解决问题\n既然是path不一样就修改path\n  1. 方案 后台修改path，还得让后台搞，麻烦\n  2. 方案 给代理服务器加上path后缀，使其和api服务器一样，但是这样对proxyTable有一点副作用\n```$xslt\nmodule.exports = app.listen(port, function (err) {\n  if (err) {\n    console.log(err)\n    return\n  }\n  var uri = `http://localhost:${port}/articlepr/`\n  console.log('Listening at ' + uri + '\\n')\n\n  // when env is testing, don't need open it\n  if (process.env.NODE_ENV !== 'testing') {\n    opn(uri)\n  }\n})\n```\n  3. 方案 代理服务器重写path, 现使用的方式，不麻烦后台，不修改其他东西\n```\n let options = proxyTable[ctx]\n\n  if (typeof options === 'string') {\n    options = {\n      target: options,\n      changeOrigin: true,\n\n      onProxyRes(proxyRes, req, res) {\n      proxyRes.headers['set-cookie'] = \n        [].slice.call(proxyRes.headers['set-cookie'] || '')  \n        .map(item => {\n          return item.replace(/Path=\\/.*?;/, 'Path=/;')\n        })\n      }\n\n    }\n  }\n```\n\n这段代码就是将proxyRes.headers['set-cookie']的path=/xx 转变成 path=/\n\n\n### 有时候在做代理请求的时候，需要拦截处理req的设置，  \n查看**http-proxy-middleware**的文档，可以用filter做拦截，代码：\n```\napp.use(proxyMiddleware((pathName, req) => {\n    pathName = req.originalUrl = req.url = `${rootAPI}${req.url}`\n\n    return pathName.match(ctx)\n  }, options))\n```\n\n#### 最后vue proxy这块的总代码：\n```\nObject.keys(proxyTable).forEach(ctx => {\n  let options = proxyTable[ctx]\n\n  if (typeof options === 'string') {\n    options = {\n      target: options,\n      changeOrigin: true,\n      onProxyRes(proxyRes, req, res) {\n        proxyRes.headers['set-cookie'] = \n          [].slice.call(proxyRes.headers['set-cookie'] || '')  \n            .map(item => {\n              return item.replace(/Path=\\/.*?;/, 'Path=/;')\n            })\n          }\n      }\n    }\n  }\n\n  app.use(proxyMiddleware((pathName, req) => {\n    pathName = req.originalUrl = req.url = `${rootAPI}${req.url}`    \n    // 可以在此处进行处理request请求\n\n    return pathName.match(ctx)\n  }, options))\n\n})\n```\n","source":"_posts/2017/04/vue-cli创建的任务和后台交互cookie及restAPI处理.md","raw":"---\ntitle: vue-cli创建的任务和后台交互cookie及restAPI处理\ncategories: 课外学习\ndate: 2017-04-14 11:34:51\ntags:\n  - vue\n  - cookie\n  - node.js\n  - javascript\n---\n# 在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie\n\n## session简述\n### 什么是session？\n  * session是服务器储存信息的一种方式，一般称之为会话，  \n    以java为例``request.getSession().setAttribute(key, value)``在创建session实例时会生成一个唯一的ID，浏览器发送请求时，  \n    会将set-cookie返回给浏览器，浏览器自动存储在cookie中，  \n    在tomcat中，此Cookie叫做JSESSIONID\n  * session关键在于sessionID所以不用cookie存也是可以的，比如可以放在request param里面，只要需要时前台发过来就行\n<!-- more -->\n### 什么是cookie？\n  * cookie是客户端（浏览器端）存储信息的一种方式，服务器可以设置浏览器set-cookie标头  \n    浏览器收到标头与数值，会以文件的形式存在与计算机中。浏览器发送请求时会自动将cookie发给服务端 \n     \n#### cookie的属性 domain和path\n  * domain：domain表示的是cookie所在的域，默认为请求的地址，如网址为www.jb51.net/test/test.aspx，  \n    那么domain默认为www.jb51.net。而跨域访问，如域A为t1.test.com，域B为t2.test.com，  \n    那么在域A生产一个令域A和域B都能访问的cookie就要将该cookie的domain设置为.test.com；  \n    如果要在域A生产一个令域A不能访问而域B能访问的cookie就要将该cookie的domain设置为t2.test.com。\n    \n  * path: path表示cookie所在的目录，如baidu.com，cookie默认为根目录'/'。baidu.com/wenku/，则path=/wenku/；  \n    如果在biadu.com/wenku/下面设置set-cookie，则在baidu.com下面浏览器会因为path不对应，导致在baidu.com下set-cookie失败  \n  ![chrome下cookie](chrome下cookie.png)  \n\n### session的流程\n  1. request.getSession().setAttribute(\"username\", \"listen\")\n  2. 在http response header里面设置set-cookie返回头 set-cookie: JSESSIONID=xxxxxxxx;path=/;\n  3. 浏览器看到set-cookie信息，并且设置的domain和path与浏览器当前一致，否则等待匹配的path和domain，存储以后会自动清除掉set-cookie\n  4. 浏览器向服务端发送请求，将存储的cookie以key=value的形式放到请求头里面\n  5. 服务端获取session request.getSession().getAttribute(\"username\")\n      * 从request请求头里面获取JSESSIONID，并找到与之对称的session实例，从此实例里面获取username\n      * 一个请求session对应一个实例，sessionId是区分实例的关键\n\n### 回到问题\n  * 现在代理服务器的URI是 localhost:8080, api服务器URI是localhost:8084/articlepr/\n  * api服务器设置session时，set-cookie是这样set-cookie:JSESSIONID=xxxx;path=/articlepr/;\n  * 现set-cookie的domain和浏览器URI（代理服务器）都为localhost，而path不一样，所以会导致set-cookie浏览器存储cookie失败，后台也就拿不到JSESSIONID了\n\n### 解决问题\n既然是path不一样就修改path\n  1. 方案 后台修改path，还得让后台搞，麻烦\n  2. 方案 给代理服务器加上path后缀，使其和api服务器一样，但是这样对proxyTable有一点副作用\n```$xslt\nmodule.exports = app.listen(port, function (err) {\n  if (err) {\n    console.log(err)\n    return\n  }\n  var uri = `http://localhost:${port}/articlepr/`\n  console.log('Listening at ' + uri + '\\n')\n\n  // when env is testing, don't need open it\n  if (process.env.NODE_ENV !== 'testing') {\n    opn(uri)\n  }\n})\n```\n  3. 方案 代理服务器重写path, 现使用的方式，不麻烦后台，不修改其他东西\n```\n let options = proxyTable[ctx]\n\n  if (typeof options === 'string') {\n    options = {\n      target: options,\n      changeOrigin: true,\n\n      onProxyRes(proxyRes, req, res) {\n      proxyRes.headers['set-cookie'] = \n        [].slice.call(proxyRes.headers['set-cookie'] || '')  \n        .map(item => {\n          return item.replace(/Path=\\/.*?;/, 'Path=/;')\n        })\n      }\n\n    }\n  }\n```\n\n这段代码就是将proxyRes.headers['set-cookie']的path=/xx 转变成 path=/\n\n\n### 有时候在做代理请求的时候，需要拦截处理req的设置，  \n查看**http-proxy-middleware**的文档，可以用filter做拦截，代码：\n```\napp.use(proxyMiddleware((pathName, req) => {\n    pathName = req.originalUrl = req.url = `${rootAPI}${req.url}`\n\n    return pathName.match(ctx)\n  }, options))\n```\n\n#### 最后vue proxy这块的总代码：\n```\nObject.keys(proxyTable).forEach(ctx => {\n  let options = proxyTable[ctx]\n\n  if (typeof options === 'string') {\n    options = {\n      target: options,\n      changeOrigin: true,\n      onProxyRes(proxyRes, req, res) {\n        proxyRes.headers['set-cookie'] = \n          [].slice.call(proxyRes.headers['set-cookie'] || '')  \n            .map(item => {\n              return item.replace(/Path=\\/.*?;/, 'Path=/;')\n            })\n          }\n      }\n    }\n  }\n\n  app.use(proxyMiddleware((pathName, req) => {\n    pathName = req.originalUrl = req.url = `${rootAPI}${req.url}`    \n    // 可以在此处进行处理request请求\n\n    return pathName.match(ctx)\n  }, options))\n\n})\n```\n","slug":"vue-cli创建的任务和后台交互cookie及restAPI处理","published":1,"updated":"2017-05-15T09:47:12.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb7j000an8v3blnqfli4","content":"<h1 id=\"在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie\"><a href=\"#在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie\" class=\"headerlink\" title=\"在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie\"></a>在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie</h1><h2 id=\"session简述\"><a href=\"#session简述\" class=\"headerlink\" title=\"session简述\"></a>session简述</h2><h3 id=\"什么是session？\"><a href=\"#什么是session？\" class=\"headerlink\" title=\"什么是session？\"></a>什么是session？</h3><ul>\n<li>session是服务器储存信息的一种方式，一般称之为会话，<br>以java为例<code>request.getSession().setAttribute(key, value)</code>在创建session实例时会生成一个唯一的ID，浏览器发送请求时，<br>会将set-cookie返回给浏览器，浏览器自动存储在cookie中，<br>在tomcat中，此Cookie叫做JSESSIONID</li>\n<li>session关键在于sessionID所以不用cookie存也是可以的，比如可以放在request param里面，只要需要时前台发过来就行<a id=\"more\"></a>\n<h3 id=\"什么是cookie？\"><a href=\"#什么是cookie？\" class=\"headerlink\" title=\"什么是cookie？\"></a>什么是cookie？</h3></li>\n<li>cookie是客户端（浏览器端）存储信息的一种方式，服务器可以设置浏览器set-cookie标头<br>浏览器收到标头与数值，会以文件的形式存在与计算机中。浏览器发送请求时会自动将cookie发给服务端 </li>\n</ul>\n<h4 id=\"cookie的属性-domain和path\"><a href=\"#cookie的属性-domain和path\" class=\"headerlink\" title=\"cookie的属性 domain和path\"></a>cookie的属性 domain和path</h4><ul>\n<li><p>domain：domain表示的是cookie所在的域，默认为请求的地址，如网址为www.jb51.net/test/test.aspx，<br>那么domain默认为www.jb51.net。而跨域访问，如域A为t1.test.com，域B为t2.test.com，<br>那么在域A生产一个令域A和域B都能访问的cookie就要将该cookie的domain设置为.test.com；<br>如果要在域A生产一个令域A不能访问而域B能访问的cookie就要将该cookie的domain设置为t2.test.com。</p>\n</li>\n<li><p>path: path表示cookie所在的目录，如baidu.com，cookie默认为根目录’/‘。baidu.com/wenku/，则path=/wenku/；<br>如果在biadu.com/wenku/下面设置set-cookie，则在baidu.com下面浏览器会因为path不对应，导致在baidu.com下set-cookie失败<br><img src=\"/2017/04/14/vue-cli创建的任务和后台交互cookie及restAPI处理/chrome下cookie.png\" alt=\"chrome下cookie\">  </p>\n</li>\n</ul>\n<h3 id=\"session的流程\"><a href=\"#session的流程\" class=\"headerlink\" title=\"session的流程\"></a>session的流程</h3><ol>\n<li>request.getSession().setAttribute(“username”, “listen”)</li>\n<li>在http response header里面设置set-cookie返回头 set-cookie: JSESSIONID=xxxxxxxx;path=/;</li>\n<li>浏览器看到set-cookie信息，并且设置的domain和path与浏览器当前一致，否则等待匹配的path和domain，存储以后会自动清除掉set-cookie</li>\n<li>浏览器向服务端发送请求，将存储的cookie以key=value的形式放到请求头里面</li>\n<li>服务端获取session request.getSession().getAttribute(“username”)<ul>\n<li>从request请求头里面获取JSESSIONID，并找到与之对称的session实例，从此实例里面获取username</li>\n<li>一个请求session对应一个实例，sessionId是区分实例的关键</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"回到问题\"><a href=\"#回到问题\" class=\"headerlink\" title=\"回到问题\"></a>回到问题</h3><ul>\n<li>现在代理服务器的URI是 localhost:8080, api服务器URI是localhost:8084/articlepr/</li>\n<li>api服务器设置session时，set-cookie是这样set-cookie:JSESSIONID=xxxx;path=/articlepr/;</li>\n<li>现set-cookie的domain和浏览器URI（代理服务器）都为localhost，而path不一样，所以会导致set-cookie浏览器存储cookie失败，后台也就拿不到JSESSIONID了</li>\n</ul>\n<h3 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h3><p>既然是path不一样就修改path</p>\n<ol>\n<li>方案 后台修改path，还得让后台搞，麻烦</li>\n<li><p>方案 给代理服务器加上path后缀，使其和api服务器一样，但是这样对proxyTable有一点副作用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = app.listen(port, function (err) &#123;</div><div class=\"line\">  if (err) &#123;</div><div class=\"line\">    console.log(err)</div><div class=\"line\">    return</div><div class=\"line\">  &#125;</div><div class=\"line\">  var uri = `http://localhost:$&#123;port&#125;/articlepr/`</div><div class=\"line\">  console.log(&apos;Listening at &apos; + uri + &apos;\\n&apos;)</div><div class=\"line\"></div><div class=\"line\">  // when env is testing, don&apos;t need open it</div><div class=\"line\">  if (process.env.NODE_ENV !== &apos;testing&apos;) &#123;</div><div class=\"line\">    opn(uri)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>方案 代理服务器重写path, 现使用的方式，不麻烦后台，不修改其他东西</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">let <span class=\"keyword\">options</span> = proxyTable[ctx]</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">if</span> (typeof <span class=\"keyword\">options</span> === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">options</span> = &#123;</div><div class=\"line\">     target: <span class=\"keyword\">options</span>,</div><div class=\"line\">     changeOrigin: <span class=\"keyword\">true</span>,</div><div class=\"line\"></div><div class=\"line\">     onProxyRes(proxyRes, req, res) &#123;</div><div class=\"line\">     proxyRes.headers[<span class=\"string\">'set-cookie'</span>] = </div><div class=\"line\">       [].slice.<span class=\"keyword\">call</span>(proxyRes.headers[<span class=\"string\">'set-cookie'</span>] || <span class=\"string\">''</span>)  </div><div class=\"line\">       .map(item =&gt; &#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> item.replace(<span class=\"regexp\">/Path=\\/.*?;/</span>, <span class=\"string\">'Path=/;'</span>)</div><div class=\"line\">       &#125;)</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这段代码就是将proxyRes.headers[‘set-cookie’]的path=/xx 转变成 path=/</p>\n<h3 id=\"有时候在做代理请求的时候，需要拦截处理req的设置，\"><a href=\"#有时候在做代理请求的时候，需要拦截处理req的设置，\" class=\"headerlink\" title=\"有时候在做代理请求的时候，需要拦截处理req的设置，\"></a>有时候在做代理请求的时候，需要拦截处理req的设置，</h3><p>查看<strong>http-proxy-middleware</strong>的文档，可以用filter做拦截，代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(proxyMiddleware(<span class=\"function\">(<span class=\"params\">pathName, req</span>) =&gt;</span> &#123;</div><div class=\"line\">    pathName = req.originalUrl = req.url = <span class=\"string\">`<span class=\"subst\">$&#123;rootAPI&#125;</span><span class=\"subst\">$&#123;req.url&#125;</span>`</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pathName.match(ctx)</div><div class=\"line\">  &#125;, options))</div></pre></td></tr></table></figure></p>\n<h4 id=\"最后vue-proxy这块的总代码：\"><a href=\"#最后vue-proxy这块的总代码：\" class=\"headerlink\" title=\"最后vue proxy这块的总代码：\"></a>最后vue proxy这块的总代码：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.keys(proxyTable).forEach(<span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> options = proxyTable[ctx]</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">    options = &#123;</div><div class=\"line\">      <span class=\"attr\">target</span>: options,</div><div class=\"line\">      <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      onProxyRes(proxyRes, req, res) &#123;</div><div class=\"line\">        proxyRes.headers[<span class=\"string\">'set-cookie'</span>] = </div><div class=\"line\">          [].slice.call(proxyRes.headers[<span class=\"string\">'set-cookie'</span>] || <span class=\"string\">''</span>)  </div><div class=\"line\">            .map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</div><div class=\"line\">              <span class=\"keyword\">return</span> item.replace(<span class=\"regexp\">/Path=\\/.*?;/</span>, <span class=\"string\">'Path=/;'</span>)</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  app.use(proxyMiddleware(<span class=\"function\">(<span class=\"params\">pathName, req</span>) =&gt;</span> &#123;</div><div class=\"line\">    pathName = req.originalUrl = req.url = <span class=\"string\">`<span class=\"subst\">$&#123;rootAPI&#125;</span><span class=\"subst\">$&#123;req.url&#125;</span>`</span>    </div><div class=\"line\">    <span class=\"comment\">// 可以在此处进行处理request请求</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pathName.match(ctx)</div><div class=\"line\">  &#125;, options))</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie\"><a href=\"#在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie\" class=\"headerlink\" title=\"在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie\"></a>在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie</h1><h2 id=\"session简述\"><a href=\"#session简述\" class=\"headerlink\" title=\"session简述\"></a>session简述</h2><h3 id=\"什么是session？\"><a href=\"#什么是session？\" class=\"headerlink\" title=\"什么是session？\"></a>什么是session？</h3><ul>\n<li>session是服务器储存信息的一种方式，一般称之为会话，<br>以java为例<code>request.getSession().setAttribute(key, value)</code>在创建session实例时会生成一个唯一的ID，浏览器发送请求时，<br>会将set-cookie返回给浏览器，浏览器自动存储在cookie中，<br>在tomcat中，此Cookie叫做JSESSIONID</li>\n<li>session关键在于sessionID所以不用cookie存也是可以的，比如可以放在request param里面，只要需要时前台发过来就行</li></ul>","more":"<h3 id=\"什么是cookie？\"><a href=\"#什么是cookie？\" class=\"headerlink\" title=\"什么是cookie？\"></a>什么是cookie？</h3>\n<li>cookie是客户端（浏览器端）存储信息的一种方式，服务器可以设置浏览器set-cookie标头<br>浏览器收到标头与数值，会以文件的形式存在与计算机中。浏览器发送请求时会自动将cookie发给服务端 </li>\n\n<h4 id=\"cookie的属性-domain和path\"><a href=\"#cookie的属性-domain和path\" class=\"headerlink\" title=\"cookie的属性 domain和path\"></a>cookie的属性 domain和path</h4><ul>\n<li><p>domain：domain表示的是cookie所在的域，默认为请求的地址，如网址为www.jb51.net/test/test.aspx，<br>那么domain默认为www.jb51.net。而跨域访问，如域A为t1.test.com，域B为t2.test.com，<br>那么在域A生产一个令域A和域B都能访问的cookie就要将该cookie的domain设置为.test.com；<br>如果要在域A生产一个令域A不能访问而域B能访问的cookie就要将该cookie的domain设置为t2.test.com。</p>\n</li>\n<li><p>path: path表示cookie所在的目录，如baidu.com，cookie默认为根目录’/‘。baidu.com/wenku/，则path=/wenku/；<br>如果在biadu.com/wenku/下面设置set-cookie，则在baidu.com下面浏览器会因为path不对应，导致在baidu.com下set-cookie失败<br><img src=\"/2017/04/14/vue-cli创建的任务和后台交互cookie及restAPI处理/chrome下cookie.png\" alt=\"chrome下cookie\">  </p>\n</li>\n</ul>\n<h3 id=\"session的流程\"><a href=\"#session的流程\" class=\"headerlink\" title=\"session的流程\"></a>session的流程</h3><ol>\n<li>request.getSession().setAttribute(“username”, “listen”)</li>\n<li>在http response header里面设置set-cookie返回头 set-cookie: JSESSIONID=xxxxxxxx;path=/;</li>\n<li>浏览器看到set-cookie信息，并且设置的domain和path与浏览器当前一致，否则等待匹配的path和domain，存储以后会自动清除掉set-cookie</li>\n<li>浏览器向服务端发送请求，将存储的cookie以key=value的形式放到请求头里面</li>\n<li>服务端获取session request.getSession().getAttribute(“username”)<ul>\n<li>从request请求头里面获取JSESSIONID，并找到与之对称的session实例，从此实例里面获取username</li>\n<li>一个请求session对应一个实例，sessionId是区分实例的关键</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"回到问题\"><a href=\"#回到问题\" class=\"headerlink\" title=\"回到问题\"></a>回到问题</h3><ul>\n<li>现在代理服务器的URI是 localhost:8080, api服务器URI是localhost:8084/articlepr/</li>\n<li>api服务器设置session时，set-cookie是这样set-cookie:JSESSIONID=xxxx;path=/articlepr/;</li>\n<li>现set-cookie的domain和浏览器URI（代理服务器）都为localhost，而path不一样，所以会导致set-cookie浏览器存储cookie失败，后台也就拿不到JSESSIONID了</li>\n</ul>\n<h3 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h3><p>既然是path不一样就修改path</p>\n<ol>\n<li>方案 后台修改path，还得让后台搞，麻烦</li>\n<li><p>方案 给代理服务器加上path后缀，使其和api服务器一样，但是这样对proxyTable有一点副作用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = app.listen(port, function (err) &#123;</div><div class=\"line\">  if (err) &#123;</div><div class=\"line\">    console.log(err)</div><div class=\"line\">    return</div><div class=\"line\">  &#125;</div><div class=\"line\">  var uri = `http://localhost:$&#123;port&#125;/articlepr/`</div><div class=\"line\">  console.log(&apos;Listening at &apos; + uri + &apos;\\n&apos;)</div><div class=\"line\"></div><div class=\"line\">  // when env is testing, don&apos;t need open it</div><div class=\"line\">  if (process.env.NODE_ENV !== &apos;testing&apos;) &#123;</div><div class=\"line\">    opn(uri)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>方案 代理服务器重写path, 现使用的方式，不麻烦后台，不修改其他东西</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">let <span class=\"keyword\">options</span> = proxyTable[ctx]</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">if</span> (typeof <span class=\"keyword\">options</span> === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">options</span> = &#123;</div><div class=\"line\">     target: <span class=\"keyword\">options</span>,</div><div class=\"line\">     changeOrigin: <span class=\"keyword\">true</span>,</div><div class=\"line\"></div><div class=\"line\">     onProxyRes(proxyRes, req, res) &#123;</div><div class=\"line\">     proxyRes.headers[<span class=\"string\">'set-cookie'</span>] = </div><div class=\"line\">       [].slice.<span class=\"keyword\">call</span>(proxyRes.headers[<span class=\"string\">'set-cookie'</span>] || <span class=\"string\">''</span>)  </div><div class=\"line\">       .map(item =&gt; &#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> item.replace(<span class=\"regexp\">/Path=\\/.*?;/</span>, <span class=\"string\">'Path=/;'</span>)</div><div class=\"line\">       &#125;)</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这段代码就是将proxyRes.headers[‘set-cookie’]的path=/xx 转变成 path=/</p>\n<h3 id=\"有时候在做代理请求的时候，需要拦截处理req的设置，\"><a href=\"#有时候在做代理请求的时候，需要拦截处理req的设置，\" class=\"headerlink\" title=\"有时候在做代理请求的时候，需要拦截处理req的设置，\"></a>有时候在做代理请求的时候，需要拦截处理req的设置，</h3><p>查看<strong>http-proxy-middleware</strong>的文档，可以用filter做拦截，代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(proxyMiddleware(<span class=\"function\">(<span class=\"params\">pathName, req</span>) =&gt;</span> &#123;</div><div class=\"line\">    pathName = req.originalUrl = req.url = <span class=\"string\">`<span class=\"subst\">$&#123;rootAPI&#125;</span><span class=\"subst\">$&#123;req.url&#125;</span>`</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pathName.match(ctx)</div><div class=\"line\">  &#125;, options))</div></pre></td></tr></table></figure></p>\n<h4 id=\"最后vue-proxy这块的总代码：\"><a href=\"#最后vue-proxy这块的总代码：\" class=\"headerlink\" title=\"最后vue proxy这块的总代码：\"></a>最后vue proxy这块的总代码：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.keys(proxyTable).forEach(<span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> options = proxyTable[ctx]</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">    options = &#123;</div><div class=\"line\">      <span class=\"attr\">target</span>: options,</div><div class=\"line\">      <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      onProxyRes(proxyRes, req, res) &#123;</div><div class=\"line\">        proxyRes.headers[<span class=\"string\">'set-cookie'</span>] = </div><div class=\"line\">          [].slice.call(proxyRes.headers[<span class=\"string\">'set-cookie'</span>] || <span class=\"string\">''</span>)  </div><div class=\"line\">            .map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</div><div class=\"line\">              <span class=\"keyword\">return</span> item.replace(<span class=\"regexp\">/Path=\\/.*?;/</span>, <span class=\"string\">'Path=/;'</span>)</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  app.use(proxyMiddleware(<span class=\"function\">(<span class=\"params\">pathName, req</span>) =&gt;</span> &#123;</div><div class=\"line\">    pathName = req.originalUrl = req.url = <span class=\"string\">`<span class=\"subst\">$&#123;rootAPI&#125;</span><span class=\"subst\">$&#123;req.url&#125;</span>`</span>    </div><div class=\"line\">    <span class=\"comment\">// 可以在此处进行处理request请求</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pathName.match(ctx)</div><div class=\"line\">  &#125;, options))</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>"},{"title":"学习计划","date":"2017-04-19T08:23:55.000Z","_content":"## 学习计划清单\n**要强制按照计划来，不然总是盲目的不知道要做什么，感觉茫茫然的**  \n### 前端部分\n1. react react之前只是粗略的过了一遍，大概知道是什么原理，但没有真正做项目\n\n2. vue-admin项目的继续扩展\n\n3. 研究bootstrap.js里面插件的实现，争取动手写一套UI插件\n\n### 后端部分\n1. 前端项目的后台全部由java来做，之前node.js写的后台也由java重构，使用java的spring\n","source":"_posts/2017/04/学习计划.md","raw":"---\ntitle: 学习计划\ndate: 2017-04-19 16:23:55\ntags:\n  - 课外学习\n---\n## 学习计划清单\n**要强制按照计划来，不然总是盲目的不知道要做什么，感觉茫茫然的**  \n### 前端部分\n1. react react之前只是粗略的过了一遍，大概知道是什么原理，但没有真正做项目\n\n2. vue-admin项目的继续扩展\n\n3. 研究bootstrap.js里面插件的实现，争取动手写一套UI插件\n\n### 后端部分\n1. 前端项目的后台全部由java来做，之前node.js写的后台也由java重构，使用java的spring\n","slug":"学习计划","published":1,"updated":"2017-04-19T08:34:08.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb7p000dn8v3wlp06bb9","content":"<h2 id=\"学习计划清单\"><a href=\"#学习计划清单\" class=\"headerlink\" title=\"学习计划清单\"></a>学习计划清单</h2><p><strong>要强制按照计划来，不然总是盲目的不知道要做什么，感觉茫茫然的</strong>  </p>\n<h3 id=\"前端部分\"><a href=\"#前端部分\" class=\"headerlink\" title=\"前端部分\"></a>前端部分</h3><ol>\n<li><p>react react之前只是粗略的过了一遍，大概知道是什么原理，但没有真正做项目</p>\n</li>\n<li><p>vue-admin项目的继续扩展</p>\n</li>\n<li><p>研究bootstrap.js里面插件的实现，争取动手写一套UI插件</p>\n</li>\n</ol>\n<h3 id=\"后端部分\"><a href=\"#后端部分\" class=\"headerlink\" title=\"后端部分\"></a>后端部分</h3><ol>\n<li>前端项目的后台全部由java来做，之前node.js写的后台也由java重构，使用java的spring</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"学习计划清单\"><a href=\"#学习计划清单\" class=\"headerlink\" title=\"学习计划清单\"></a>学习计划清单</h2><p><strong>要强制按照计划来，不然总是盲目的不知道要做什么，感觉茫茫然的</strong>  </p>\n<h3 id=\"前端部分\"><a href=\"#前端部分\" class=\"headerlink\" title=\"前端部分\"></a>前端部分</h3><ol>\n<li><p>react react之前只是粗略的过了一遍，大概知道是什么原理，但没有真正做项目</p>\n</li>\n<li><p>vue-admin项目的继续扩展</p>\n</li>\n<li><p>研究bootstrap.js里面插件的实现，争取动手写一套UI插件</p>\n</li>\n</ol>\n<h3 id=\"后端部分\"><a href=\"#后端部分\" class=\"headerlink\" title=\"后端部分\"></a>后端部分</h3><ol>\n<li>前端项目的后台全部由java来做，之前node.js写的后台也由java重构，使用java的spring</li>\n</ol>\n"},{"title":"angular2-约定优于配置","date":"2017-05-15T09:46:33.000Z","_content":"\n## angular2可以明显感觉到一个法则：约定优于配置\n\n<!-- more -->\n\n","source":"_posts/2017/05/angular2-约定优于配置.md","raw":"---\ntitle: angular2-约定优于配置\ndate: 2017-05-15 17:46:33\ntags: \n  - angular\n  - typescript\n---\n\n## angular2可以明显感觉到一个法则：约定优于配置\n\n<!-- more -->\n\n","slug":"angular2-约定优于配置","published":1,"updated":"2017-05-15T09:53:43.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb7t000gn8v3twsymtyf","content":"<h2 id=\"angular2可以明显感觉到一个法则：约定优于配置\"><a href=\"#angular2可以明显感觉到一个法则：约定优于配置\" class=\"headerlink\" title=\"angular2可以明显感觉到一个法则：约定优于配置\"></a>angular2可以明显感觉到一个法则：约定优于配置</h2><a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<h2 id=\"angular2可以明显感觉到一个法则：约定优于配置\"><a href=\"#angular2可以明显感觉到一个法则：约定优于配置\" class=\"headerlink\" title=\"angular2可以明显感觉到一个法则：约定优于配置\"></a>angular2可以明显感觉到一个法则：约定优于配置</h2>","more":""},{"title":"angular权威指南笔记","date":"2017-04-14T10:37:59.000Z","_content":"#### angular权威指南笔记\n\n1. $interpolate——服务插值表达式，可以设置插值表达式中的数据并``$interpolateProvider`` 可以自定义 **flag {{x}} => $x$**\n\n2. orderBy——排序：给显示的文本排序\n\n<!-- more -->\n3. ``$parsers``  \n   当用户同控制器进行交互，并且``ngModelController``  \n   中的``$setViewValue()``方法被调用时，\n   ``$parsers``数组中的函数会以流水线的形式被逐个调用。  \n   第一个``$parse``被调用后，执行结果会传\n   递给第二个``$parse``，以此类推\n   \n   ```\n   angular.module('myApp')\n     .directive('oneToTen', function() {\n       return {\n         require: '?ngModel',\n         link: function(scope, ele, attrs, ngModel) {\n             if (!ngModel) return;\n             ngModel.$parsers.unshift(\n             function(viewValue) {\n               var i = parseInt(viewValue);\n               if (i >= 0 && i < 10) {\n               ngModel.$setValidity('oneToTen', true);\n               return viewValue;\n             } else {\n               ngModel.$setValidity('oneToTen', false);\n               return undefined;\n           }\n         });\n       }\n       };\n     });\n   ```\n\n4. **$formatters**\n  当绑定的``ngModel``值发生了变化，并经过``$parsers``  \n  数组中解析器的处理后，这个值会被传递\n  给``$formatters``流水线。同``$parsers``  \n  数组可以修改表单的合法性状态类似， ``$formatters``中的函\n  数也可以修改并格式化这些值\n  ```\n  angular.module('myApp')\n      .directive('oneToTen', function() {\n        return {\n            require: '?ngModel',\n            link: function(scope, ele, attrs, ngModel) {\n            if (!ngModel) return;\n              ngModel.$formatters.unshift(function(v) {\n                return $filter('number')(v);\n              });\n          }\n        };\n      });\n  ```\n\n5. 表单验证：``ngModelController.$我是自定义``   \n    取出 ``form_name.input_name.$我是自定义``\n    angular可以通过``form_name.input_name.XX``   \n    拿到在``directive``里面给``ngModelController``自定义的布尔值\n    从而可以通过判断来进行show/hide的表单验证\n  \n6. 用属性声明指令比较好\n\n7. 指令 \n  **@** 绑定一次性显示的字符串 \n  **=** 双向绑定会获取作用域上面的值\n  **&** 绑定事件\n  **yourAttr: '@myAttr'** 在``html``用``myAttr``，在指令中还是用``yourAttr``\n\n8. ``ng-include``\n  会创建一个作用域，根据作用域原型继承原理，子作用域能访问父级的值，而反过来就不行了\n  所以不能在父级作用域操作``ng-include``中的数据，导致无法正常进行``$watch``\n  应该给```ng-include```创建单独的controller来控制作用域\n  类似的指令还有 ```ng-controller ng-app```\n\n9. 如要避免插值字符串{&#123; &#125;}为渲染完成闪烁问题，请使用``ng-cloak``指令\n\n10. ng-attr-(suffix) \n  如使用svg的时候报错，就是用前缀来避免\n```\n<svg>\n  <circle cx=\"{{ cx }}\"></circle>\n  </svg> // 报错\n<svg>\n  <circle ng-attr-cx=\"{{ cx }}\"><circle>\n</svg>  // OK\n```\n11. 指令的生命周期开始于``$compile``结束于``link方法``\n\n12. 指令API\n  ```\n  .directive('', ['', function(){\n  \n          \t// Runs during compile\n          \treturn {\n  \n          \t  name: '',  `指令名称`\n  \n          \t  priority: 1, `加载优先级`\n  \n          \t  terminal: true, `是否让优先级以下的指令不运行`\n  \n          \t  scope: &#123; &#125;, // &#123; &#125; = isolate, true = child, false/undefined = no change\n          \t  `作用域，如果是true则不让外部继承，外部读不到\n          \t    如果是对象则是隔离作用域（作用域不传递）\n          \t    具有隔离作用域的指令最主要的使用场景是创建可复用的组件，组件可以在未知上下文中使\n                用，并且可以避免污染所处的外部作用域或不经意地污染内部作用域`\n  \n          \t  controller: function($scope, $element, $attrs, $transclude) &#123; &#125;,\n  \n          \t  `指令的控制`\n          \t  require: 'ngModel', // Array = multiple requires,   \n          \t                     // ? = optional（指找不到控制器传递null）,   \n          \t                    // ^ = check parent elements\n                               // PS:可以在link方法的第四个参数指向该指令的controller\n  \n          \t  restrict: 'A', // E = Element,   \n          \t                // A = Attribute,   \n          \t               // C = Class,  \n          \t              // M = Comment\n          \t             // 声明方式\n          \t             \n          \t  template: '', // 字符串\n          \t  \n          \t  templateUrl: '', // 指令html的地址\n          \t  \n          \t  replace: true, // 用html标签完全替代此指令\n          \t  \n          \t  transclude: true, \n          \t       // 如果为true则无法正常监听数据变化，被用来，\n          \t      //  只有当你希望创建一个可以包含任意内容的指令时， \n          \t     //  才使用transclude: true。\n          \t    //  配合ng-transclude插进去\n          \t  \n          \t  compile: function(tElement, tAttrs,   \n                          function transclude(  \n                        \n                          function(scope, cloneLinkingFn){   \n                        \n                            return function linking(scope, elm, attrs)&#123; &#125;})),\n          \t\t\n          \t\tlink: function($scope, iElm, iAttrs, controller) {\n          \t\t\t\n          \t\t}\n          \t};\n          }])\n  ```\n13. Angular生命周期\n    1. 编译阶段： 遍历整个HTML，查找处理指令，遍历指令里面所有的模板，此时还没有数据绑定，\n      ng-repeat和ng-include类似的就会在在此时进行操作，减少开销\n    2. compile：在数据放入指令之前安全操作DOM\n    3. pre-link：将作用域与DOM连接起来之前操作dom，不安全的转换DOM\n    4. post-link: 负责事件监听器，监听数据和实时的DOM操作，如果需要性能，用compile\n    5. destroy\n  \n14. ngModel \n  * 要访问``ngModelController``必须在指令里面require\n   * 不要有隔离作用域，隔离作用域会导致无法更新外部绑定的值\n     * $viewValue 获取ngModel的值\n     * $setViewValue 设置ngModel的值，需要手动触发``$digest``循环\n     * $render自定义渲染，会在``$parser``流水线执行完后调用，慎用\n     * $parsers：数组，处理加工ngModel数据，ngModel从DOM读出来的值会被当参数传入，到数据模型\n     * $formatters 数组，在数据模型变的时候函数一一调用\n     * $viewChangeListeners 无需``$watch``函数不需要返回值，视图中的值变化时一一调用\n     * $error 没有通过验证的信息\n     * $pristine 是否对控件没有交互过\n     * $dirty 用户是否交互过\n     * $valid 是否正确 $setValidity设置\n     * $invalid 是否错误\n\n15. constant会在所有配置config之前执行。config: 模块加载时会执行此函数\n\n16. run 类main函数，在注入器创建之后被执行，是第一个被执行的方法，一般篇日志路由事件监听器\n    每次路由改变时执行run方法\n    \n17. 路由\n  ng-view 最高权限指令同一元素只会运行ng-view\n  ng-view运行顺序\n    触发$routeChangeSuccess后试图会更新\n    模板会通过路由与ng-view关联\n      1. 创建一个新作用域\n      2. 移除上一个视图，同时清除作用域\n      3. 关联当前模板\n      4. 如果路由中定义的controller则与当前作用域关联起来\n      5. 触发$viewContentLoaded\n      6. 调用onload指定的函数（如果有）\n      \n  **router的resolve属性，$injector会将声明的key添加进依赖，并能注入**\n  \n  **$location相当于window.location的封装，但只针对视图，不能针对全局浏览器窗口**\n  \n18. 依赖注入\n  * 对象通常过的其控制权的方式\n    * 在内部创建依赖；\n    * 通过全局变量进行引用；\n    * 在需要的地方通过参数进行传递\n  \n  angular依赖注入使用$injector来管里依赖关系和实例化\n  包括模块，指令，控制器的注入\n  在运行时， 任何模块启动时$injector都会负责实例化，并将其需要的所有依赖传递进去\n   ```\n   angular.module('myApp', [])\n        .factory('greeter', function() {\n          return {\n            greet: function(msg) {alert(msg);}\n          }\n        })\n        .controller('MyController',\n          function($scope, greeter) {\n            $scope.sayHello = function() {\n            greeter.greet(\"Hello!\");\n          };\n        });\n        \n        <div ng-app=\"myApp\">\n          <div ng-controller=\"MyController\">\n            <button ng-click=\"sayHello()\">Hello</button>\n          </div>\n        </div\n   ```\n##### angular加载过程\n```\n  // 使用注入器加载应用\n  var injector = angular.injector(['ng', 'myApp']);\n  // 通过注入器加载$controller服务： var $controller = injector.get('$controller');\n  var scope = injector.get('$rootScope').$new();\n  // 加载控制器并传入一个作用域，同AngularJS在运行时做的一样\n  var MyController = $controller('MyController', {$scope: scope})\n```\n  * angular通过**annotate**函数将greeter从参数列表中提取出来\n    如果没有加[]进行显式的声明，那么ng就会通过参数来获取依赖关系\n  ```\n    injector.annotate(function($q, myService){ })\n    // annotate会返回被注入目标中的服务的名称，从而进行匹配\n  ```\n  * injector.invoke(func($q)) 调用方法, fn.apply(self, args)\n    将参数列表转化成实例后的函数在进行调用\n    大概如此：\n  ```\n    function Fucker() {\n      this.getFucker = function () {\n        console.log('motherfucker')\n      }\n    }\n    \n    function invoke(fn, self) {\n      // 一般是['dep1', 'dep2', func]\n      // 会找寻依赖对应的参数函数并通过方法将其实例化\n      // 调用func\n      fn.apply(self, [new Fucker()])\n    }\n    \n    invoke(function (fucker) {\n      fucker.getFucker() // motherfucker\n    })\n  ```\n19. 分析ng-include为什么会导致无法正常双向绑定\n  * ng-include指令会生成一个作用域 (child)\n  * ng-include父节点的作用域（parent）\n  * parent.flag = \"test\" 根据原型继承原理 child._proto_.flag = \"test\"\n  * 当parent.flag变成\"dev\" 则child._proto_.flag = \"dev\"\n  * 如果child.flag = \"product\" 则 child.flag 与 parent.flag 失去联系\n  * 解决这种问题需要，将要传递的属性变为对象形式\n```\n  function Parent() {\n    this.face = \"哈哈\"\n  }\n  \n  Parent.prototype = {\n    constructor: Parent,\n  \n    $new: function () {\n      var child\n  \n      this.$$childScope = function () {\n        this.$id = 112212\n      }\n      this.$$childScope.prototype = this\n      child = new this.$$childScope()\n  \n      return child\n    }\n  \n  }\n  var parentScope = new Parent()\n  \n  var childScope = parentScope.$new()\n  \nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n) // [\"哈哈\", \"哈哈\"] [\"哈哈\", \"哈哈\"]\n  \n  \nparentScope.face = \"test\"\nparentScope.fixed.face = \"test\"\nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n) // [\"test\", \"test\"] [\"test\", \"test\"]\n  \n  \nchildScope.face = \"我是谁\"\nchildScope.fixed.face = \"我是谁\"\nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n)// [\"test\", \"我是谁\"] [\"我是谁\", \"我是谁\"]\n  \n```\n20. $scope生命周期\n  * 创建\n    * 创建控制器或指令时，angular会用``$injector``创建一个作用域，并在新建的控制器指令中将作用域传递进去\n        * ``$scope``会通过``$new``创建通过原型与父级保持联系\n  * 链接\n    * 用$watch将数据监听\n  * 更新\n    * 当$watch监听到变化，触发回调\n  * 销毁\n    * 视图不需要会销毁自己\n  ","source":"_posts/2017/04/angular权威指南学习.md","raw":"---\ntitle: angular权威指南笔记\ncategories: 课外学习\ndate: 2017-04-14 18:37:59\ntags:\n  - angular\n  - javascript\n---\n#### angular权威指南笔记\n\n1. $interpolate——服务插值表达式，可以设置插值表达式中的数据并``$interpolateProvider`` 可以自定义 **flag {{x}} => $x$**\n\n2. orderBy——排序：给显示的文本排序\n\n<!-- more -->\n3. ``$parsers``  \n   当用户同控制器进行交互，并且``ngModelController``  \n   中的``$setViewValue()``方法被调用时，\n   ``$parsers``数组中的函数会以流水线的形式被逐个调用。  \n   第一个``$parse``被调用后，执行结果会传\n   递给第二个``$parse``，以此类推\n   \n   ```\n   angular.module('myApp')\n     .directive('oneToTen', function() {\n       return {\n         require: '?ngModel',\n         link: function(scope, ele, attrs, ngModel) {\n             if (!ngModel) return;\n             ngModel.$parsers.unshift(\n             function(viewValue) {\n               var i = parseInt(viewValue);\n               if (i >= 0 && i < 10) {\n               ngModel.$setValidity('oneToTen', true);\n               return viewValue;\n             } else {\n               ngModel.$setValidity('oneToTen', false);\n               return undefined;\n           }\n         });\n       }\n       };\n     });\n   ```\n\n4. **$formatters**\n  当绑定的``ngModel``值发生了变化，并经过``$parsers``  \n  数组中解析器的处理后，这个值会被传递\n  给``$formatters``流水线。同``$parsers``  \n  数组可以修改表单的合法性状态类似， ``$formatters``中的函\n  数也可以修改并格式化这些值\n  ```\n  angular.module('myApp')\n      .directive('oneToTen', function() {\n        return {\n            require: '?ngModel',\n            link: function(scope, ele, attrs, ngModel) {\n            if (!ngModel) return;\n              ngModel.$formatters.unshift(function(v) {\n                return $filter('number')(v);\n              });\n          }\n        };\n      });\n  ```\n\n5. 表单验证：``ngModelController.$我是自定义``   \n    取出 ``form_name.input_name.$我是自定义``\n    angular可以通过``form_name.input_name.XX``   \n    拿到在``directive``里面给``ngModelController``自定义的布尔值\n    从而可以通过判断来进行show/hide的表单验证\n  \n6. 用属性声明指令比较好\n\n7. 指令 \n  **@** 绑定一次性显示的字符串 \n  **=** 双向绑定会获取作用域上面的值\n  **&** 绑定事件\n  **yourAttr: '@myAttr'** 在``html``用``myAttr``，在指令中还是用``yourAttr``\n\n8. ``ng-include``\n  会创建一个作用域，根据作用域原型继承原理，子作用域能访问父级的值，而反过来就不行了\n  所以不能在父级作用域操作``ng-include``中的数据，导致无法正常进行``$watch``\n  应该给```ng-include```创建单独的controller来控制作用域\n  类似的指令还有 ```ng-controller ng-app```\n\n9. 如要避免插值字符串{&#123; &#125;}为渲染完成闪烁问题，请使用``ng-cloak``指令\n\n10. ng-attr-(suffix) \n  如使用svg的时候报错，就是用前缀来避免\n```\n<svg>\n  <circle cx=\"{{ cx }}\"></circle>\n  </svg> // 报错\n<svg>\n  <circle ng-attr-cx=\"{{ cx }}\"><circle>\n</svg>  // OK\n```\n11. 指令的生命周期开始于``$compile``结束于``link方法``\n\n12. 指令API\n  ```\n  .directive('', ['', function(){\n  \n          \t// Runs during compile\n          \treturn {\n  \n          \t  name: '',  `指令名称`\n  \n          \t  priority: 1, `加载优先级`\n  \n          \t  terminal: true, `是否让优先级以下的指令不运行`\n  \n          \t  scope: &#123; &#125;, // &#123; &#125; = isolate, true = child, false/undefined = no change\n          \t  `作用域，如果是true则不让外部继承，外部读不到\n          \t    如果是对象则是隔离作用域（作用域不传递）\n          \t    具有隔离作用域的指令最主要的使用场景是创建可复用的组件，组件可以在未知上下文中使\n                用，并且可以避免污染所处的外部作用域或不经意地污染内部作用域`\n  \n          \t  controller: function($scope, $element, $attrs, $transclude) &#123; &#125;,\n  \n          \t  `指令的控制`\n          \t  require: 'ngModel', // Array = multiple requires,   \n          \t                     // ? = optional（指找不到控制器传递null）,   \n          \t                    // ^ = check parent elements\n                               // PS:可以在link方法的第四个参数指向该指令的controller\n  \n          \t  restrict: 'A', // E = Element,   \n          \t                // A = Attribute,   \n          \t               // C = Class,  \n          \t              // M = Comment\n          \t             // 声明方式\n          \t             \n          \t  template: '', // 字符串\n          \t  \n          \t  templateUrl: '', // 指令html的地址\n          \t  \n          \t  replace: true, // 用html标签完全替代此指令\n          \t  \n          \t  transclude: true, \n          \t       // 如果为true则无法正常监听数据变化，被用来，\n          \t      //  只有当你希望创建一个可以包含任意内容的指令时， \n          \t     //  才使用transclude: true。\n          \t    //  配合ng-transclude插进去\n          \t  \n          \t  compile: function(tElement, tAttrs,   \n                          function transclude(  \n                        \n                          function(scope, cloneLinkingFn){   \n                        \n                            return function linking(scope, elm, attrs)&#123; &#125;})),\n          \t\t\n          \t\tlink: function($scope, iElm, iAttrs, controller) {\n          \t\t\t\n          \t\t}\n          \t};\n          }])\n  ```\n13. Angular生命周期\n    1. 编译阶段： 遍历整个HTML，查找处理指令，遍历指令里面所有的模板，此时还没有数据绑定，\n      ng-repeat和ng-include类似的就会在在此时进行操作，减少开销\n    2. compile：在数据放入指令之前安全操作DOM\n    3. pre-link：将作用域与DOM连接起来之前操作dom，不安全的转换DOM\n    4. post-link: 负责事件监听器，监听数据和实时的DOM操作，如果需要性能，用compile\n    5. destroy\n  \n14. ngModel \n  * 要访问``ngModelController``必须在指令里面require\n   * 不要有隔离作用域，隔离作用域会导致无法更新外部绑定的值\n     * $viewValue 获取ngModel的值\n     * $setViewValue 设置ngModel的值，需要手动触发``$digest``循环\n     * $render自定义渲染，会在``$parser``流水线执行完后调用，慎用\n     * $parsers：数组，处理加工ngModel数据，ngModel从DOM读出来的值会被当参数传入，到数据模型\n     * $formatters 数组，在数据模型变的时候函数一一调用\n     * $viewChangeListeners 无需``$watch``函数不需要返回值，视图中的值变化时一一调用\n     * $error 没有通过验证的信息\n     * $pristine 是否对控件没有交互过\n     * $dirty 用户是否交互过\n     * $valid 是否正确 $setValidity设置\n     * $invalid 是否错误\n\n15. constant会在所有配置config之前执行。config: 模块加载时会执行此函数\n\n16. run 类main函数，在注入器创建之后被执行，是第一个被执行的方法，一般篇日志路由事件监听器\n    每次路由改变时执行run方法\n    \n17. 路由\n  ng-view 最高权限指令同一元素只会运行ng-view\n  ng-view运行顺序\n    触发$routeChangeSuccess后试图会更新\n    模板会通过路由与ng-view关联\n      1. 创建一个新作用域\n      2. 移除上一个视图，同时清除作用域\n      3. 关联当前模板\n      4. 如果路由中定义的controller则与当前作用域关联起来\n      5. 触发$viewContentLoaded\n      6. 调用onload指定的函数（如果有）\n      \n  **router的resolve属性，$injector会将声明的key添加进依赖，并能注入**\n  \n  **$location相当于window.location的封装，但只针对视图，不能针对全局浏览器窗口**\n  \n18. 依赖注入\n  * 对象通常过的其控制权的方式\n    * 在内部创建依赖；\n    * 通过全局变量进行引用；\n    * 在需要的地方通过参数进行传递\n  \n  angular依赖注入使用$injector来管里依赖关系和实例化\n  包括模块，指令，控制器的注入\n  在运行时， 任何模块启动时$injector都会负责实例化，并将其需要的所有依赖传递进去\n   ```\n   angular.module('myApp', [])\n        .factory('greeter', function() {\n          return {\n            greet: function(msg) {alert(msg);}\n          }\n        })\n        .controller('MyController',\n          function($scope, greeter) {\n            $scope.sayHello = function() {\n            greeter.greet(\"Hello!\");\n          };\n        });\n        \n        <div ng-app=\"myApp\">\n          <div ng-controller=\"MyController\">\n            <button ng-click=\"sayHello()\">Hello</button>\n          </div>\n        </div\n   ```\n##### angular加载过程\n```\n  // 使用注入器加载应用\n  var injector = angular.injector(['ng', 'myApp']);\n  // 通过注入器加载$controller服务： var $controller = injector.get('$controller');\n  var scope = injector.get('$rootScope').$new();\n  // 加载控制器并传入一个作用域，同AngularJS在运行时做的一样\n  var MyController = $controller('MyController', {$scope: scope})\n```\n  * angular通过**annotate**函数将greeter从参数列表中提取出来\n    如果没有加[]进行显式的声明，那么ng就会通过参数来获取依赖关系\n  ```\n    injector.annotate(function($q, myService){ })\n    // annotate会返回被注入目标中的服务的名称，从而进行匹配\n  ```\n  * injector.invoke(func($q)) 调用方法, fn.apply(self, args)\n    将参数列表转化成实例后的函数在进行调用\n    大概如此：\n  ```\n    function Fucker() {\n      this.getFucker = function () {\n        console.log('motherfucker')\n      }\n    }\n    \n    function invoke(fn, self) {\n      // 一般是['dep1', 'dep2', func]\n      // 会找寻依赖对应的参数函数并通过方法将其实例化\n      // 调用func\n      fn.apply(self, [new Fucker()])\n    }\n    \n    invoke(function (fucker) {\n      fucker.getFucker() // motherfucker\n    })\n  ```\n19. 分析ng-include为什么会导致无法正常双向绑定\n  * ng-include指令会生成一个作用域 (child)\n  * ng-include父节点的作用域（parent）\n  * parent.flag = \"test\" 根据原型继承原理 child._proto_.flag = \"test\"\n  * 当parent.flag变成\"dev\" 则child._proto_.flag = \"dev\"\n  * 如果child.flag = \"product\" 则 child.flag 与 parent.flag 失去联系\n  * 解决这种问题需要，将要传递的属性变为对象形式\n```\n  function Parent() {\n    this.face = \"哈哈\"\n  }\n  \n  Parent.prototype = {\n    constructor: Parent,\n  \n    $new: function () {\n      var child\n  \n      this.$$childScope = function () {\n        this.$id = 112212\n      }\n      this.$$childScope.prototype = this\n      child = new this.$$childScope()\n  \n      return child\n    }\n  \n  }\n  var parentScope = new Parent()\n  \n  var childScope = parentScope.$new()\n  \nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n) // [\"哈哈\", \"哈哈\"] [\"哈哈\", \"哈哈\"]\n  \n  \nparentScope.face = \"test\"\nparentScope.fixed.face = \"test\"\nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n) // [\"test\", \"test\"] [\"test\", \"test\"]\n  \n  \nchildScope.face = \"我是谁\"\nchildScope.fixed.face = \"我是谁\"\nconsole.log(\n  [parentScope.face, parentScope.fixed.face],\n  [childScope.face, childScope.fixed.face]\n)// [\"test\", \"我是谁\"] [\"我是谁\", \"我是谁\"]\n  \n```\n20. $scope生命周期\n  * 创建\n    * 创建控制器或指令时，angular会用``$injector``创建一个作用域，并在新建的控制器指令中将作用域传递进去\n        * ``$scope``会通过``$new``创建通过原型与父级保持联系\n  * 链接\n    * 用$watch将数据监听\n  * 更新\n    * 当$watch监听到变化，触发回调\n  * 销毁\n    * 视图不需要会销毁自己\n  ","slug":"angular权威指南学习","published":1,"updated":"2017-05-15T09:47:12.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb80000kn8v3cj3nx090","content":"<h4 id=\"angular权威指南笔记\"><a href=\"#angular权威指南笔记\" class=\"headerlink\" title=\"angular权威指南笔记\"></a>angular权威指南笔记</h4><ol>\n<li><p>$interpolate——服务插值表达式，可以设置插值表达式中的数据并<code>$interpolateProvider</code> 可以自定义 <strong>flag  =&gt; $x$</strong></p>\n</li>\n<li><p>orderBy——排序：给显示的文本排序</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li><p><code>$parsers</code><br>当用户同控制器进行交互，并且<code>ngModelController</code><br>中的<code>$setViewValue()</code>方法被调用时，<br><code>$parsers</code>数组中的函数会以流水线的形式被逐个调用。<br>第一个<code>$parse</code>被调用后，执行结果会传<br>递给第二个<code>$parse</code>，以此类推</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>)</div><div class=\"line\">  .directive(<span class=\"string\">'oneToTen'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">require</span>: <span class=\"string\">'?ngModel'</span>,</div><div class=\"line\">      link: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope, ele, attrs, ngModel)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!ngModel) <span class=\"keyword\">return</span>;</div><div class=\"line\">          ngModel.$parsers.unshift(</div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(viewValue)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> i = parseInt(viewValue);</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; <span class=\"number\">10</span>) &#123;</div><div class=\"line\">            ngModel.$setValidity(<span class=\"string\">'oneToTen'</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> viewValue;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ngModel.$setValidity(<span class=\"string\">'oneToTen'</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> undefined;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>$formatters</strong><br>当绑定的<code>ngModel</code>值发生了变化，并经过<code>$parsers</code><br>数组中解析器的处理后，这个值会被传递<br>给<code>$formatters</code>流水线。同<code>$parsers</code><br>数组可以修改表单的合法性状态类似， <code>$formatters</code>中的函<br>数也可以修改并格式化这些值</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>)</div><div class=\"line\">    .directive(<span class=\"string\">'oneToTen'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">require</span>: <span class=\"string\">'?ngModel'</span>,</div><div class=\"line\">          link: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope, ele, attrs, ngModel)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!ngModel) <span class=\"keyword\">return</span>;</div><div class=\"line\">            ngModel.$formatters.unshift(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(v)</span> </span>&#123;</div><div class=\"line\">              <span class=\"keyword\">return</span> $filter(<span class=\"string\">'number'</span>)(v);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>表单验证：<code>ngModelController.$我是自定义</code><br> 取出 <code>form_name.input_name.$我是自定义</code><br> angular可以通过<code>form_name.input_name.XX</code><br> 拿到在<code>directive</code>里面给<code>ngModelController</code>自定义的布尔值<br> 从而可以通过判断来进行show/hide的表单验证</p>\n</li>\n<li><p>用属性声明指令比较好</p>\n</li>\n<li><p>指令<br><strong>@</strong> 绑定一次性显示的字符串<br><strong>=</strong> 双向绑定会获取作用域上面的值<br><strong>&amp;</strong> 绑定事件<br><strong>yourAttr: ‘@myAttr’</strong> 在<code>html</code>用<code>myAttr</code>，在指令中还是用<code>yourAttr</code></p>\n</li>\n<li><p><code>ng-include</code><br>会创建一个作用域，根据作用域原型继承原理，子作用域能访问父级的值，而反过来就不行了<br>所以不能在父级作用域操作<code>ng-include</code>中的数据，导致无法正常进行<code>$watch</code><br>应该给<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">类似的指令还有 ```ng-controller ng-app</div></pre></td></tr></table></figure></p>\n</li>\n<li><p>如要避免插值字符串{&#123; &#125;}为渲染完成闪烁问题，请使用<code>ng-cloak</code>指令</p>\n</li>\n<li><p>ng-attr-(suffix)<br>如使用svg的时候报错，就是用前缀来避免</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123; cx &#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">circle</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span> // 报错</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">ng-attr-cx</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123; cx &#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">circle</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span>  // OK</div></pre></td></tr></table></figure>\n</li>\n<li><p>指令的生命周期开始于<code>$compile</code>结束于<code>link方法</code></p>\n</li>\n<li><p>指令API</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">''</span>, [<span class=\"string\">''</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        \t<span class=\"comment\">// Runs during compile</span></div><div class=\"line\">        \t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\"></div><div class=\"line\">        \t  name: <span class=\"string\">''</span>,  `指令名称`</div><div class=\"line\"></div><div class=\"line\">        \t  priority: <span class=\"number\">1</span>, `加载优先级`</div><div class=\"line\"></div><div class=\"line\">        \t  terminal: <span class=\"keyword\">true</span>, `是否让优先级以下的指令不运行`</div><div class=\"line\"></div><div class=\"line\">        \t  scope: &amp;<span class=\"comment\">#123; &amp;#125;, // &amp;#123; &amp;#125; = isolate, true = child, false/undefined = no change</span></div><div class=\"line\">        \t  `作用域，如果是<span class=\"keyword\">true</span>则不让外部继承，外部读不到</div><div class=\"line\">        \t    如果是对象则是隔离作用域（作用域不传递）</div><div class=\"line\">        \t    具有隔离作用域的指令最主要的使用场景是创建可复用的组件，组件可以在未知上下文中使</div><div class=\"line\">              用，并且可以避免污染所处的外部作用域或不经意地污染内部作用域`</div><div class=\"line\"></div><div class=\"line\">        \t  controller: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, $element, $attrs, $transclude)</span> &amp;#123</span>; &amp;<span class=\"comment\">#125;,</span></div><div class=\"line\"></div><div class=\"line\">        \t  `指令的控制`</div><div class=\"line\">        \t  <span class=\"keyword\">require</span>: <span class=\"string\">'ngModel'</span>, <span class=\"comment\">// Array = multiple requires,   </span></div><div class=\"line\">        \t                     <span class=\"comment\">// ? = optional（指找不到控制器传递null）,   </span></div><div class=\"line\">        \t                    <span class=\"comment\">// ^ = check parent elements</span></div><div class=\"line\">                             <span class=\"comment\">// PS:可以在link方法的第四个参数指向该指令的controller</span></div><div class=\"line\"></div><div class=\"line\">        \t  restrict: <span class=\"string\">'A'</span>, <span class=\"comment\">// E = Element,   </span></div><div class=\"line\">        \t                <span class=\"comment\">// A = Attribute,   </span></div><div class=\"line\">        \t               <span class=\"comment\">// C = Class,  </span></div><div class=\"line\">        \t              <span class=\"comment\">// M = Comment</span></div><div class=\"line\">        \t             <span class=\"comment\">// 声明方式</span></div><div class=\"line\">        \t             </div><div class=\"line\">        \t  template: <span class=\"string\">''</span>, <span class=\"comment\">// 字符串</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  templateUrl: <span class=\"string\">''</span>, <span class=\"comment\">// 指令html的地址</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  replace: <span class=\"keyword\">true</span>, <span class=\"comment\">// 用html标签完全替代此指令</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  transclude: <span class=\"keyword\">true</span>, </div><div class=\"line\">        \t       <span class=\"comment\">// 如果为true则无法正常监听数据变化，被用来，</span></div><div class=\"line\">        \t      <span class=\"comment\">//  只有当你希望创建一个可以包含任意内容的指令时， </span></div><div class=\"line\">        \t     <span class=\"comment\">//  才使用transclude: true。</span></div><div class=\"line\">        \t    <span class=\"comment\">//  配合ng-transclude插进去</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  compile: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(tElement, tAttrs,   </span></span></div><div class=\"line\">                        function transclude<span class=\"params\">(  </span></div><div class=\"line\">                      </div><div class=\"line\">                        function<span class=\"params\">(scope, cloneLinkingFn)</span>&#123;   </div><div class=\"line\">                      </div><div class=\"line\">                          return function linking<span class=\"params\">(scope, elm, attrs)</span>&amp;#<span class=\"number\">123</span>; &amp;#<span class=\"number\">125</span>;&#125;)),</div><div class=\"line\">        \t\t</div><div class=\"line\">        \t\t<span class=\"title\">link</span>: <span class=\"title\">function</span><span class=\"params\">($scope, iElm, iAttrs, controller)</span> &#123;</div><div class=\"line\">        \t\t\t</div><div class=\"line\">        \t\t&#125;</div><div class=\"line\">        \t&#125;;</div><div class=\"line\">        &#125;])</div></pre></td></tr></table></figure>\n</li>\n<li><p>Angular生命周期</p>\n<ol>\n<li>编译阶段： 遍历整个HTML，查找处理指令，遍历指令里面所有的模板，此时还没有数据绑定，<br>ng-repeat和ng-include类似的就会在在此时进行操作，减少开销</li>\n<li>compile：在数据放入指令之前安全操作DOM</li>\n<li>pre-link：将作用域与DOM连接起来之前操作dom，不安全的转换DOM</li>\n<li>post-link: 负责事件监听器，监听数据和实时的DOM操作，如果需要性能，用compile</li>\n<li>destroy</li>\n</ol>\n</li>\n<li><p>ngModel </p>\n<ul>\n<li>要访问<code>ngModelController</code>必须在指令里面require</li>\n<li>不要有隔离作用域，隔离作用域会导致无法更新外部绑定的值<ul>\n<li>$viewValue 获取ngModel的值</li>\n<li>$setViewValue 设置ngModel的值，需要手动触发<code>$digest</code>循环</li>\n<li>$render自定义渲染，会在<code>$parser</code>流水线执行完后调用，慎用</li>\n<li>$parsers：数组，处理加工ngModel数据，ngModel从DOM读出来的值会被当参数传入，到数据模型</li>\n<li>$formatters 数组，在数据模型变的时候函数一一调用</li>\n<li>$viewChangeListeners 无需<code>$watch</code>函数不需要返回值，视图中的值变化时一一调用</li>\n<li>$error 没有通过验证的信息</li>\n<li>$pristine 是否对控件没有交互过</li>\n<li>$dirty 用户是否交互过</li>\n<li>$valid 是否正确 $setValidity设置</li>\n<li>$invalid 是否错误</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>constant会在所有配置config之前执行。config: 模块加载时会执行此函数</p>\n</li>\n<li><p>run 类main函数，在注入器创建之后被执行，是第一个被执行的方法，一般篇日志路由事件监听器<br>每次路由改变时执行run方法</p>\n</li>\n<li><p>路由<br>ng-view 最高权限指令同一元素只会运行ng-view<br>ng-view运行顺序<br>触发$routeChangeSuccess后试图会更新<br>模板会通过路由与ng-view关联</p>\n<ol>\n<li>创建一个新作用域</li>\n<li>移除上一个视图，同时清除作用域</li>\n<li>关联当前模板</li>\n<li>如果路由中定义的controller则与当前作用域关联起来</li>\n<li>触发$viewContentLoaded</li>\n<li>调用onload指定的函数（如果有）</li>\n</ol>\n<p><strong>router的resolve属性，$injector会将声明的key添加进依赖，并能注入</strong></p>\n<p><strong>$location相当于window.location的封装，但只针对视图，不能针对全局浏览器窗口</strong></p>\n</li>\n<li><p>依赖注入</p>\n<ul>\n<li>对象通常过的其控制权的方式</li>\n<li>在内部创建依赖；</li>\n<li>通过全局变量进行引用；</li>\n<li>在需要的地方通过参数进行传递</li>\n</ul>\n<p>angular依赖注入使用$injector来管里依赖关系和实例化<br>包括模块，指令，控制器的注入<br>在运行时， 任何模块启动时$injector都会负责实例化，并将其需要的所有依赖传递进去</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>, [])</div><div class=\"line\">     .factory(<span class=\"string\">'greeter'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">         <span class=\"attr\">greet</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;alert(msg);&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;)</div><div class=\"line\">     .controller(<span class=\"string\">'MyController'</span>,</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, greeter</span>) </span>&#123;</div><div class=\"line\">         $scope.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">         greeter.greet(<span class=\"string\">\"Hello!\"</span>);</div><div class=\"line\">       &#125;;</div><div class=\"line\">     &#125;);</div><div class=\"line\">     </div><div class=\"line\">     <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"myApp\"</span>&gt;</span></span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"MyController\"</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"sayHello()\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span></span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"angular加载过程\"><a href=\"#angular加载过程\" class=\"headerlink\" title=\"angular加载过程\"></a>angular加载过程</h5><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span> 使用注入器加载应用</div><div class=\"line\">var injector = angular.injector([<span class=\"string\">'ng'</span>, <span class=\"string\">'myApp'</span>]);</div><div class=\"line\"><span class=\"regexp\">//</span> 通过注入器加载<span class=\"variable\">$controller</span>服务： var <span class=\"variable\">$controller</span> = injector.get(<span class=\"string\">'$controller'</span>);</div><div class=\"line\">var scope = injector.get(<span class=\"string\">'$rootScope'</span>).<span class=\"variable\">$new</span>();</div><div class=\"line\"><span class=\"regexp\">//</span> 加载控制器并传入一个作用域，同AngularJS在运行时做的一样</div><div class=\"line\">var MyController = <span class=\"variable\">$controller</span>(<span class=\"string\">'MyController'</span>, &#123;<span class=\"variable\">$scope</span>: scope&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>angular通过<strong>annotate</strong>函数将greeter从参数列表中提取出来<br>如果没有加[]进行显式的声明，那么ng就会通过参数来获取依赖关系</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">injector.annotate(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($q, myService)</span></span>&#123; &#125;)</div><div class=\"line\"><span class=\"comment\">// annotate会返回被注入目标中的服务的名称，从而进行匹配</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>injector.invoke(func($q)) 调用方法, fn.apply(self, args)<br>将参数列表转化成实例后的函数在进行调用<br>大概如此：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fucker</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.getFucker = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'motherfucker'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invoke</span>(<span class=\"params\">fn, self</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 一般是['dep1', 'dep2', func]</span></div><div class=\"line\">  <span class=\"comment\">// 会找寻依赖对应的参数函数并通过方法将其实例化</span></div><div class=\"line\">  <span class=\"comment\">// 调用func</span></div><div class=\"line\">  fn.apply(self, [<span class=\"keyword\">new</span> Fucker()])</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">invoke(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fucker</span>) </span>&#123;</div><div class=\"line\">  fucker.getFucker() <span class=\"comment\">// motherfucker</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>分析ng-include为什么会导致无法正常双向绑定</p>\n<ul>\n<li>ng-include指令会生成一个作用域 (child)</li>\n<li>ng-include父节点的作用域（parent）</li>\n<li>parent.flag = “test” 根据原型继承原理 child.<em>proto</em>.flag = “test”</li>\n<li>当parent.flag变成”dev” 则child.<em>proto</em>.flag = “dev”</li>\n<li>如果child.flag = “product” 则 child.flag 与 parent.flag 失去联系</li>\n<li>解决这种问题需要，将要传递的属性变为对象形式<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">  function Parent() &#123;</div><div class=\"line\">    this<span class=\"selector-class\">.face</span> = <span class=\"string\">\"哈哈\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  Parent<span class=\"selector-class\">.prototype</span> = &#123;</div><div class=\"line\">    constructor: Parent,</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"variable\">$new</span>: function () &#123;</div><div class=\"line\">      <span class=\"selector-tag\">var</span> child</div><div class=\"line\">  </div><div class=\"line\">      this.$<span class=\"variable\">$childScope</span> = function () &#123;</div><div class=\"line\">        this.<span class=\"variable\">$id</span> = <span class=\"number\">112212</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      this.$<span class=\"variable\">$childScope</span><span class=\"selector-class\">.prototype</span> = this</div><div class=\"line\">      child = new this.$<span class=\"variable\">$childScope</span>()</div><div class=\"line\">  </div><div class=\"line\">      return child</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-tag\">var</span> parentScope = new Parent()</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"selector-tag\">var</span> childScope = parentScope.<span class=\"variable\">$new</span>()</div><div class=\"line\">  </div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">) <span class=\"comment\">// [\"哈哈\", \"哈哈\"] [\"哈哈\", \"哈哈\"]</span></div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">parentScope<span class=\"selector-class\">.face</span> = <span class=\"string\">\"test\"</span></div><div class=\"line\">parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span> = <span class=\"string\">\"test\"</span></div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">) <span class=\"comment\">// [\"test\", \"test\"] [\"test\", \"test\"]</span></div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">childScope<span class=\"selector-class\">.face</span> = <span class=\"string\">\"我是谁\"</span></div><div class=\"line\">childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span> = <span class=\"string\">\"我是谁\"</span></div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">)<span class=\"comment\">// [\"test\", \"我是谁\"] [\"我是谁\", \"我是谁\"]</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>$scope生命周期</p>\n<ul>\n<li>创建</li>\n<li>创建控制器或指令时，angular会用<code>$injector</code>创建一个作用域，并在新建的控制器指令中将作用域传递进去<ul>\n<li><code>$scope</code>会通过<code>$new</code>创建通过原型与父级保持联系</li>\n</ul>\n</li>\n<li>链接</li>\n<li>用$watch将数据监听</li>\n<li>更新</li>\n<li>当$watch监听到变化，触发回调</li>\n<li>销毁</li>\n<li>视图不需要会销毁自己</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h4 id=\"angular权威指南笔记\"><a href=\"#angular权威指南笔记\" class=\"headerlink\" title=\"angular权威指南笔记\"></a>angular权威指南笔记</h4><ol>\n<li><p>$interpolate——服务插值表达式，可以设置插值表达式中的数据并<code>$interpolateProvider</code> 可以自定义 <strong>flag  =&gt; $x$</strong></p>\n</li>\n<li><p>orderBy——排序：给显示的文本排序</p>\n</li>\n</ol>","more":"<ol>\n<li><p><code>$parsers</code><br>当用户同控制器进行交互，并且<code>ngModelController</code><br>中的<code>$setViewValue()</code>方法被调用时，<br><code>$parsers</code>数组中的函数会以流水线的形式被逐个调用。<br>第一个<code>$parse</code>被调用后，执行结果会传<br>递给第二个<code>$parse</code>，以此类推</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>)</div><div class=\"line\">  .directive(<span class=\"string\">'oneToTen'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">require</span>: <span class=\"string\">'?ngModel'</span>,</div><div class=\"line\">      link: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope, ele, attrs, ngModel)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!ngModel) <span class=\"keyword\">return</span>;</div><div class=\"line\">          ngModel.$parsers.unshift(</div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(viewValue)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> i = parseInt(viewValue);</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; <span class=\"number\">10</span>) &#123;</div><div class=\"line\">            ngModel.$setValidity(<span class=\"string\">'oneToTen'</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> viewValue;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ngModel.$setValidity(<span class=\"string\">'oneToTen'</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> undefined;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>$formatters</strong><br>当绑定的<code>ngModel</code>值发生了变化，并经过<code>$parsers</code><br>数组中解析器的处理后，这个值会被传递<br>给<code>$formatters</code>流水线。同<code>$parsers</code><br>数组可以修改表单的合法性状态类似， <code>$formatters</code>中的函<br>数也可以修改并格式化这些值</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>)</div><div class=\"line\">    .directive(<span class=\"string\">'oneToTen'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">require</span>: <span class=\"string\">'?ngModel'</span>,</div><div class=\"line\">          link: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope, ele, attrs, ngModel)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!ngModel) <span class=\"keyword\">return</span>;</div><div class=\"line\">            ngModel.$formatters.unshift(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(v)</span> </span>&#123;</div><div class=\"line\">              <span class=\"keyword\">return</span> $filter(<span class=\"string\">'number'</span>)(v);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>表单验证：<code>ngModelController.$我是自定义</code><br> 取出 <code>form_name.input_name.$我是自定义</code><br> angular可以通过<code>form_name.input_name.XX</code><br> 拿到在<code>directive</code>里面给<code>ngModelController</code>自定义的布尔值<br> 从而可以通过判断来进行show/hide的表单验证</p>\n</li>\n<li><p>用属性声明指令比较好</p>\n</li>\n<li><p>指令<br><strong>@</strong> 绑定一次性显示的字符串<br><strong>=</strong> 双向绑定会获取作用域上面的值<br><strong>&amp;</strong> 绑定事件<br><strong>yourAttr: ‘@myAttr’</strong> 在<code>html</code>用<code>myAttr</code>，在指令中还是用<code>yourAttr</code></p>\n</li>\n<li><p><code>ng-include</code><br>会创建一个作用域，根据作用域原型继承原理，子作用域能访问父级的值，而反过来就不行了<br>所以不能在父级作用域操作<code>ng-include</code>中的数据，导致无法正常进行<code>$watch</code><br>应该给<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">类似的指令还有 ```ng-controller ng-app</div></pre></td></tr></table></figure></p>\n</li>\n<li><p>如要避免插值字符串{&#123; &#125;}为渲染完成闪烁问题，请使用<code>ng-cloak</code>指令</p>\n</li>\n<li><p>ng-attr-(suffix)<br>如使用svg的时候报错，就是用前缀来避免</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123; cx &#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">circle</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span> // 报错</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">ng-attr-cx</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123; cx &#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">circle</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span>  // OK</div></pre></td></tr></table></figure>\n</li>\n<li><p>指令的生命周期开始于<code>$compile</code>结束于<code>link方法</code></p>\n</li>\n<li><p>指令API</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">''</span>, [<span class=\"string\">''</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        \t<span class=\"comment\">// Runs during compile</span></div><div class=\"line\">        \t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\"></div><div class=\"line\">        \t  name: <span class=\"string\">''</span>,  `指令名称`</div><div class=\"line\"></div><div class=\"line\">        \t  priority: <span class=\"number\">1</span>, `加载优先级`</div><div class=\"line\"></div><div class=\"line\">        \t  terminal: <span class=\"keyword\">true</span>, `是否让优先级以下的指令不运行`</div><div class=\"line\"></div><div class=\"line\">        \t  scope: &amp;<span class=\"comment\">#123; &amp;#125;, // &amp;#123; &amp;#125; = isolate, true = child, false/undefined = no change</span></div><div class=\"line\">        \t  `作用域，如果是<span class=\"keyword\">true</span>则不让外部继承，外部读不到</div><div class=\"line\">        \t    如果是对象则是隔离作用域（作用域不传递）</div><div class=\"line\">        \t    具有隔离作用域的指令最主要的使用场景是创建可复用的组件，组件可以在未知上下文中使</div><div class=\"line\">              用，并且可以避免污染所处的外部作用域或不经意地污染内部作用域`</div><div class=\"line\"></div><div class=\"line\">        \t  controller: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, $element, $attrs, $transclude)</span> &amp;#123</span>; &amp;<span class=\"comment\">#125;,</span></div><div class=\"line\"></div><div class=\"line\">        \t  `指令的控制`</div><div class=\"line\">        \t  <span class=\"keyword\">require</span>: <span class=\"string\">'ngModel'</span>, <span class=\"comment\">// Array = multiple requires,   </span></div><div class=\"line\">        \t                     <span class=\"comment\">// ? = optional（指找不到控制器传递null）,   </span></div><div class=\"line\">        \t                    <span class=\"comment\">// ^ = check parent elements</span></div><div class=\"line\">                             <span class=\"comment\">// PS:可以在link方法的第四个参数指向该指令的controller</span></div><div class=\"line\"></div><div class=\"line\">        \t  restrict: <span class=\"string\">'A'</span>, <span class=\"comment\">// E = Element,   </span></div><div class=\"line\">        \t                <span class=\"comment\">// A = Attribute,   </span></div><div class=\"line\">        \t               <span class=\"comment\">// C = Class,  </span></div><div class=\"line\">        \t              <span class=\"comment\">// M = Comment</span></div><div class=\"line\">        \t             <span class=\"comment\">// 声明方式</span></div><div class=\"line\">        \t             </div><div class=\"line\">        \t  template: <span class=\"string\">''</span>, <span class=\"comment\">// 字符串</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  templateUrl: <span class=\"string\">''</span>, <span class=\"comment\">// 指令html的地址</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  replace: <span class=\"keyword\">true</span>, <span class=\"comment\">// 用html标签完全替代此指令</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  transclude: <span class=\"keyword\">true</span>, </div><div class=\"line\">        \t       <span class=\"comment\">// 如果为true则无法正常监听数据变化，被用来，</span></div><div class=\"line\">        \t      <span class=\"comment\">//  只有当你希望创建一个可以包含任意内容的指令时， </span></div><div class=\"line\">        \t     <span class=\"comment\">//  才使用transclude: true。</span></div><div class=\"line\">        \t    <span class=\"comment\">//  配合ng-transclude插进去</span></div><div class=\"line\">        \t  </div><div class=\"line\">        \t  compile: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(tElement, tAttrs,   </span></span></div><div class=\"line\">                        function transclude<span class=\"params\">(  </span></div><div class=\"line\">                      </div><div class=\"line\">                        function<span class=\"params\">(scope, cloneLinkingFn)</span>&#123;   </div><div class=\"line\">                      </div><div class=\"line\">                          return function linking<span class=\"params\">(scope, elm, attrs)</span>&amp;#<span class=\"number\">123</span>; &amp;#<span class=\"number\">125</span>;&#125;)),</div><div class=\"line\">        \t\t</div><div class=\"line\">        \t\t<span class=\"title\">link</span>: <span class=\"title\">function</span><span class=\"params\">($scope, iElm, iAttrs, controller)</span> &#123;</div><div class=\"line\">        \t\t\t</div><div class=\"line\">        \t\t&#125;</div><div class=\"line\">        \t&#125;;</div><div class=\"line\">        &#125;])</div></pre></td></tr></table></figure>\n</li>\n<li><p>Angular生命周期</p>\n<ol>\n<li>编译阶段： 遍历整个HTML，查找处理指令，遍历指令里面所有的模板，此时还没有数据绑定，<br>ng-repeat和ng-include类似的就会在在此时进行操作，减少开销</li>\n<li>compile：在数据放入指令之前安全操作DOM</li>\n<li>pre-link：将作用域与DOM连接起来之前操作dom，不安全的转换DOM</li>\n<li>post-link: 负责事件监听器，监听数据和实时的DOM操作，如果需要性能，用compile</li>\n<li>destroy</li>\n</ol>\n</li>\n<li><p>ngModel </p>\n<ul>\n<li>要访问<code>ngModelController</code>必须在指令里面require</li>\n<li>不要有隔离作用域，隔离作用域会导致无法更新外部绑定的值<ul>\n<li>$viewValue 获取ngModel的值</li>\n<li>$setViewValue 设置ngModel的值，需要手动触发<code>$digest</code>循环</li>\n<li>$render自定义渲染，会在<code>$parser</code>流水线执行完后调用，慎用</li>\n<li>$parsers：数组，处理加工ngModel数据，ngModel从DOM读出来的值会被当参数传入，到数据模型</li>\n<li>$formatters 数组，在数据模型变的时候函数一一调用</li>\n<li>$viewChangeListeners 无需<code>$watch</code>函数不需要返回值，视图中的值变化时一一调用</li>\n<li>$error 没有通过验证的信息</li>\n<li>$pristine 是否对控件没有交互过</li>\n<li>$dirty 用户是否交互过</li>\n<li>$valid 是否正确 $setValidity设置</li>\n<li>$invalid 是否错误</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>constant会在所有配置config之前执行。config: 模块加载时会执行此函数</p>\n</li>\n<li><p>run 类main函数，在注入器创建之后被执行，是第一个被执行的方法，一般篇日志路由事件监听器<br>每次路由改变时执行run方法</p>\n</li>\n<li><p>路由<br>ng-view 最高权限指令同一元素只会运行ng-view<br>ng-view运行顺序<br>触发$routeChangeSuccess后试图会更新<br>模板会通过路由与ng-view关联</p>\n<ol>\n<li>创建一个新作用域</li>\n<li>移除上一个视图，同时清除作用域</li>\n<li>关联当前模板</li>\n<li>如果路由中定义的controller则与当前作用域关联起来</li>\n<li>触发$viewContentLoaded</li>\n<li>调用onload指定的函数（如果有）</li>\n</ol>\n<p><strong>router的resolve属性，$injector会将声明的key添加进依赖，并能注入</strong></p>\n<p><strong>$location相当于window.location的封装，但只针对视图，不能针对全局浏览器窗口</strong></p>\n</li>\n<li><p>依赖注入</p>\n<ul>\n<li>对象通常过的其控制权的方式</li>\n<li>在内部创建依赖；</li>\n<li>通过全局变量进行引用；</li>\n<li>在需要的地方通过参数进行传递</li>\n</ul>\n<p>angular依赖注入使用$injector来管里依赖关系和实例化<br>包括模块，指令，控制器的注入<br>在运行时， 任何模块启动时$injector都会负责实例化，并将其需要的所有依赖传递进去</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>, [])</div><div class=\"line\">     .factory(<span class=\"string\">'greeter'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">         <span class=\"attr\">greet</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;alert(msg);&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;)</div><div class=\"line\">     .controller(<span class=\"string\">'MyController'</span>,</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, greeter</span>) </span>&#123;</div><div class=\"line\">         $scope.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">         greeter.greet(<span class=\"string\">\"Hello!\"</span>);</div><div class=\"line\">       &#125;;</div><div class=\"line\">     &#125;);</div><div class=\"line\">     </div><div class=\"line\">     <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"myApp\"</span>&gt;</span></span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"MyController\"</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"sayHello()\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span></span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"angular加载过程\"><a href=\"#angular加载过程\" class=\"headerlink\" title=\"angular加载过程\"></a>angular加载过程</h5><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span> 使用注入器加载应用</div><div class=\"line\">var injector = angular.injector([<span class=\"string\">'ng'</span>, <span class=\"string\">'myApp'</span>]);</div><div class=\"line\"><span class=\"regexp\">//</span> 通过注入器加载<span class=\"variable\">$controller</span>服务： var <span class=\"variable\">$controller</span> = injector.get(<span class=\"string\">'$controller'</span>);</div><div class=\"line\">var scope = injector.get(<span class=\"string\">'$rootScope'</span>).<span class=\"variable\">$new</span>();</div><div class=\"line\"><span class=\"regexp\">//</span> 加载控制器并传入一个作用域，同AngularJS在运行时做的一样</div><div class=\"line\">var MyController = <span class=\"variable\">$controller</span>(<span class=\"string\">'MyController'</span>, &#123;<span class=\"variable\">$scope</span>: scope&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>angular通过<strong>annotate</strong>函数将greeter从参数列表中提取出来<br>如果没有加[]进行显式的声明，那么ng就会通过参数来获取依赖关系</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">injector.annotate(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($q, myService)</span></span>&#123; &#125;)</div><div class=\"line\"><span class=\"comment\">// annotate会返回被注入目标中的服务的名称，从而进行匹配</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>injector.invoke(func($q)) 调用方法, fn.apply(self, args)<br>将参数列表转化成实例后的函数在进行调用<br>大概如此：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fucker</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.getFucker = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'motherfucker'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invoke</span>(<span class=\"params\">fn, self</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 一般是['dep1', 'dep2', func]</span></div><div class=\"line\">  <span class=\"comment\">// 会找寻依赖对应的参数函数并通过方法将其实例化</span></div><div class=\"line\">  <span class=\"comment\">// 调用func</span></div><div class=\"line\">  fn.apply(self, [<span class=\"keyword\">new</span> Fucker()])</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">invoke(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fucker</span>) </span>&#123;</div><div class=\"line\">  fucker.getFucker() <span class=\"comment\">// motherfucker</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>分析ng-include为什么会导致无法正常双向绑定</p>\n<ul>\n<li>ng-include指令会生成一个作用域 (child)</li>\n<li>ng-include父节点的作用域（parent）</li>\n<li>parent.flag = “test” 根据原型继承原理 child.<em>proto</em>.flag = “test”</li>\n<li>当parent.flag变成”dev” 则child.<em>proto</em>.flag = “dev”</li>\n<li>如果child.flag = “product” 则 child.flag 与 parent.flag 失去联系</li>\n<li>解决这种问题需要，将要传递的属性变为对象形式<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">  function Parent() &#123;</div><div class=\"line\">    this<span class=\"selector-class\">.face</span> = <span class=\"string\">\"哈哈\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  Parent<span class=\"selector-class\">.prototype</span> = &#123;</div><div class=\"line\">    constructor: Parent,</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"variable\">$new</span>: function () &#123;</div><div class=\"line\">      <span class=\"selector-tag\">var</span> child</div><div class=\"line\">  </div><div class=\"line\">      this.$<span class=\"variable\">$childScope</span> = function () &#123;</div><div class=\"line\">        this.<span class=\"variable\">$id</span> = <span class=\"number\">112212</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      this.$<span class=\"variable\">$childScope</span><span class=\"selector-class\">.prototype</span> = this</div><div class=\"line\">      child = new this.$<span class=\"variable\">$childScope</span>()</div><div class=\"line\">  </div><div class=\"line\">      return child</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-tag\">var</span> parentScope = new Parent()</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"selector-tag\">var</span> childScope = parentScope.<span class=\"variable\">$new</span>()</div><div class=\"line\">  </div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">) <span class=\"comment\">// [\"哈哈\", \"哈哈\"] [\"哈哈\", \"哈哈\"]</span></div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">parentScope<span class=\"selector-class\">.face</span> = <span class=\"string\">\"test\"</span></div><div class=\"line\">parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span> = <span class=\"string\">\"test\"</span></div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">) <span class=\"comment\">// [\"test\", \"test\"] [\"test\", \"test\"]</span></div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">childScope<span class=\"selector-class\">.face</span> = <span class=\"string\">\"我是谁\"</span></div><div class=\"line\">childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span> = <span class=\"string\">\"我是谁\"</span></div><div class=\"line\">console.log(</div><div class=\"line\">  [parentScope<span class=\"selector-class\">.face</span>, parentScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>],</div><div class=\"line\">  [childScope<span class=\"selector-class\">.face</span>, childScope<span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.face</span>]</div><div class=\"line\">)<span class=\"comment\">// [\"test\", \"我是谁\"] [\"我是谁\", \"我是谁\"]</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>$scope生命周期</p>\n<ul>\n<li>创建</li>\n<li>创建控制器或指令时，angular会用<code>$injector</code>创建一个作用域，并在新建的控制器指令中将作用域传递进去<ul>\n<li><code>$scope</code>会通过<code>$new</code>创建通过原型与父级保持联系</li>\n</ul>\n</li>\n<li>链接</li>\n<li>用$watch将数据监听</li>\n<li>更新</li>\n<li>当$watch监听到变化，触发回调</li>\n<li>销毁</li>\n<li>视图不需要会销毁自己</li>\n</ul>\n</li>\n</ol>"},{"title":"js设计模式笔记--享元模式","date":"2017-08-22T05:23:16.000Z","_content":"\n## 享元模式\n1. 运用共享技术有效的支持最大量的细粒度的对象，避免对象间拥有相同的内容造成多余的开销\n2. 主要对数据和方法共享分离，将数据和方法分为外部和内部，内部就是共享的，所以提出来这一部分能提高性能\n3. barrat李靖的解释\n  * “享”是共享的意思，“元”指的是元件，也就是小颗粒的东西，\n     享元顾名思义便是共享小部件，很多系统或者程序包含大量对象，但是这些对象\n     绝大多数都是差不多的，除了一些极个别的属性外。\n     在享元模式中有两个比较重要的关键词，内部变量和外部变量；内部变量是可以\n     共享的属性集，而外部变量是对象之间的差异部分，通过相同+不同的方式组合诸\n     多对象，可以有效地节省系统空间，降低内存大小。\n\n<!-- more -->\n\n```flow js\n~function () {\n  'use strict'\n  var Flywight = function () {\n    var created = []\n\n    function create () {\n      var dom = document.createElement('div')\n      document.getElementById('container').appendChild(dom)\n      created.push(dom)\n      return dom\n    }\n\n    return {\n      getDiv: function () {\n        if (created.length < 5) {\n          return create()\n        } else {\n          var div = created.shift()\n          created.push(div)\n          return div\n        }\n      }\n    }\n\n  }\n\n  var paper = 0,\n    article = ['fsdfsdafsadf', 'fsdfsdfsdfdsa', 'fdsfsdfsdfasdf', 'fsdfsdfsdafsdafsdaf', 'ffsdfsdfsdafsdafasdfasdf'],\n    num = 5,\n    len = article.length\n\n  for (var i = 0; i < 5; i++) {\n    if (article[i]) {\n      Flywight.getDiv().innerHTML = article[i]\n    }\n  }\n\n  document.getElementById('next_page').onclick = function () {\n    if (article.length < 5) {\n      return\n    }\n\n    var n = ++paper * num % len,\n      j = 0\n\n    for (; i < 5; i++) {\n      if (article[n + j]) {\n        Flywight.getDiv().innerHTML = article[n + j]\n      } else if (article[n + j - len]) {\n        Flywight.getDiv().innerHTML = article[n + j - len]\n      } else {\n        Flywight.getDiv().innerHTML = \"\"\n      }\n    }\n  }\n\n}()\n\n~function () {\n  // 享元方法，其实也就是共享方法\n  'use strict'\n  var FlyWeight = {\n    moveX: function (x) {\n      this.x = x\n    },\n    moveY: function (y) {\n      this.y = y\n    }\n  }\n\n  var Player = function (x, y, c) {\n    this.x = x\n    this.y = y\n    this.color = c\n  }\n\n  Player.prototype = FlyWeight\n  Player.prototype.changeC = function (c) {\n    this.color = c\n  }\n\n}()\n```","source":"_posts/2017/08/js设计模式笔记-享元模式.md","raw":"---\ntitle: js设计模式笔记--享元模式\ndate: 2017-08-22 13:23:16\ntags:\n  - 设计模式\n  - js基础\n---\n\n## 享元模式\n1. 运用共享技术有效的支持最大量的细粒度的对象，避免对象间拥有相同的内容造成多余的开销\n2. 主要对数据和方法共享分离，将数据和方法分为外部和内部，内部就是共享的，所以提出来这一部分能提高性能\n3. barrat李靖的解释\n  * “享”是共享的意思，“元”指的是元件，也就是小颗粒的东西，\n     享元顾名思义便是共享小部件，很多系统或者程序包含大量对象，但是这些对象\n     绝大多数都是差不多的，除了一些极个别的属性外。\n     在享元模式中有两个比较重要的关键词，内部变量和外部变量；内部变量是可以\n     共享的属性集，而外部变量是对象之间的差异部分，通过相同+不同的方式组合诸\n     多对象，可以有效地节省系统空间，降低内存大小。\n\n<!-- more -->\n\n```flow js\n~function () {\n  'use strict'\n  var Flywight = function () {\n    var created = []\n\n    function create () {\n      var dom = document.createElement('div')\n      document.getElementById('container').appendChild(dom)\n      created.push(dom)\n      return dom\n    }\n\n    return {\n      getDiv: function () {\n        if (created.length < 5) {\n          return create()\n        } else {\n          var div = created.shift()\n          created.push(div)\n          return div\n        }\n      }\n    }\n\n  }\n\n  var paper = 0,\n    article = ['fsdfsdafsadf', 'fsdfsdfsdfdsa', 'fdsfsdfsdfasdf', 'fsdfsdfsdafsdafsdaf', 'ffsdfsdfsdafsdafasdfasdf'],\n    num = 5,\n    len = article.length\n\n  for (var i = 0; i < 5; i++) {\n    if (article[i]) {\n      Flywight.getDiv().innerHTML = article[i]\n    }\n  }\n\n  document.getElementById('next_page').onclick = function () {\n    if (article.length < 5) {\n      return\n    }\n\n    var n = ++paper * num % len,\n      j = 0\n\n    for (; i < 5; i++) {\n      if (article[n + j]) {\n        Flywight.getDiv().innerHTML = article[n + j]\n      } else if (article[n + j - len]) {\n        Flywight.getDiv().innerHTML = article[n + j - len]\n      } else {\n        Flywight.getDiv().innerHTML = \"\"\n      }\n    }\n  }\n\n}()\n\n~function () {\n  // 享元方法，其实也就是共享方法\n  'use strict'\n  var FlyWeight = {\n    moveX: function (x) {\n      this.x = x\n    },\n    moveY: function (y) {\n      this.y = y\n    }\n  }\n\n  var Player = function (x, y, c) {\n    this.x = x\n    this.y = y\n    this.color = c\n  }\n\n  Player.prototype = FlyWeight\n  Player.prototype.changeC = function (c) {\n    this.color = c\n  }\n\n}()\n```","slug":"js设计模式笔记-享元模式","published":1,"updated":"2017-08-22T05:26:17.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb81000ln8v36iuofxhp","content":"<h2 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h2><ol>\n<li>运用共享技术有效的支持最大量的细粒度的对象，避免对象间拥有相同的内容造成多余的开销</li>\n<li>主要对数据和方法共享分离，将数据和方法分为外部和内部，内部就是共享的，所以提出来这一部分能提高性能</li>\n<li>barrat李靖的解释<ul>\n<li>“享”是共享的意思，“元”指的是元件，也就是小颗粒的东西，<br>享元顾名思义便是共享小部件，很多系统或者程序包含大量对象，但是这些对象<br>绝大多数都是差不多的，除了一些极个别的属性外。<br>在享元模式中有两个比较重要的关键词，内部变量和外部变量；内部变量是可以<br>共享的属性集，而外部变量是对象之间的差异部分，通过相同+不同的方式组合诸<br>多对象，可以有效地节省系统空间，降低内存大小。</li>\n</ul>\n</li>\n</ol>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">~function () &#123;</div><div class=\"line\">  &apos;use strict&apos;</div><div class=\"line\">  var Flywight = function () &#123;</div><div class=\"line\">    var created = []</div><div class=\"line\"></div><div class=\"line\">    function create () &#123;</div><div class=\"line\">      var dom = document.createElement(&apos;div&apos;)</div><div class=\"line\">      document.getElementById(&apos;container&apos;).appendChild(dom)</div><div class=\"line\">      created.push(dom)</div><div class=\"line\">      return dom</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return &#123;</div><div class=\"line\">      getDiv: function () &#123;</div><div class=\"line\">        if (created.length &lt; 5) &#123;</div><div class=\"line\">          return create()</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">          var div = created.shift()</div><div class=\"line\">          created.push(div)</div><div class=\"line\">          return div</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var paper = 0,</div><div class=\"line\">    article = [&apos;fsdfsdafsadf&apos;, &apos;fsdfsdfsdfdsa&apos;, &apos;fdsfsdfsdfasdf&apos;, &apos;fsdfsdfsdafsdafsdaf&apos;, &apos;ffsdfsdfsdafsdafasdfasdf&apos;],</div><div class=\"line\">    num = 5,</div><div class=\"line\">    len = article.length</div><div class=\"line\"></div><div class=\"line\">  for (var i = 0; i &lt; 5; i++) &#123;</div><div class=\"line\">    if (article[i]) &#123;</div><div class=\"line\">      Flywight.getDiv().innerHTML = article[i]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  document.getElementById(&apos;next_page&apos;).onclick = function () &#123;</div><div class=\"line\">    if (article.length &lt; 5) &#123;</div><div class=\"line\">      return</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var n = ++paper * num % len,</div><div class=\"line\">      j = 0</div><div class=\"line\"></div><div class=\"line\">    for (; i &lt; 5; i++) &#123;</div><div class=\"line\">      if (article[n + j]) &#123;</div><div class=\"line\">        Flywight.getDiv().innerHTML = article[n + j]</div><div class=\"line\">      &#125; else if (article[n + j - len]) &#123;</div><div class=\"line\">        Flywight.getDiv().innerHTML = article[n + j - len]</div><div class=\"line\">      &#125; else &#123;</div><div class=\"line\">        Flywight.getDiv().innerHTML = &quot;&quot;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\">~function () &#123;</div><div class=\"line\">  // 享元方法，其实也就是共享方法</div><div class=\"line\">  &apos;use strict&apos;</div><div class=\"line\">  var FlyWeight = &#123;</div><div class=\"line\">    moveX: function (x) &#123;</div><div class=\"line\">      this.x = x</div><div class=\"line\">    &#125;,</div><div class=\"line\">    moveY: function (y) &#123;</div><div class=\"line\">      this.y = y</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var Player = function (x, y, c) &#123;</div><div class=\"line\">    this.x = x</div><div class=\"line\">    this.y = y</div><div class=\"line\">    this.color = c</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Player.prototype = FlyWeight</div><div class=\"line\">  Player.prototype.changeC = function (c) &#123;</div><div class=\"line\">    this.color = c</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h2><ol>\n<li>运用共享技术有效的支持最大量的细粒度的对象，避免对象间拥有相同的内容造成多余的开销</li>\n<li>主要对数据和方法共享分离，将数据和方法分为外部和内部，内部就是共享的，所以提出来这一部分能提高性能</li>\n<li>barrat李靖的解释<ul>\n<li>“享”是共享的意思，“元”指的是元件，也就是小颗粒的东西，<br>享元顾名思义便是共享小部件，很多系统或者程序包含大量对象，但是这些对象<br>绝大多数都是差不多的，除了一些极个别的属性外。<br>在享元模式中有两个比较重要的关键词，内部变量和外部变量；内部变量是可以<br>共享的属性集，而外部变量是对象之间的差异部分，通过相同+不同的方式组合诸<br>多对象，可以有效地节省系统空间，降低内存大小。</li>\n</ul>\n</li>\n</ol>","more":"<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">~function () &#123;</div><div class=\"line\">  &apos;use strict&apos;</div><div class=\"line\">  var Flywight = function () &#123;</div><div class=\"line\">    var created = []</div><div class=\"line\"></div><div class=\"line\">    function create () &#123;</div><div class=\"line\">      var dom = document.createElement(&apos;div&apos;)</div><div class=\"line\">      document.getElementById(&apos;container&apos;).appendChild(dom)</div><div class=\"line\">      created.push(dom)</div><div class=\"line\">      return dom</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return &#123;</div><div class=\"line\">      getDiv: function () &#123;</div><div class=\"line\">        if (created.length &lt; 5) &#123;</div><div class=\"line\">          return create()</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">          var div = created.shift()</div><div class=\"line\">          created.push(div)</div><div class=\"line\">          return div</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var paper = 0,</div><div class=\"line\">    article = [&apos;fsdfsdafsadf&apos;, &apos;fsdfsdfsdfdsa&apos;, &apos;fdsfsdfsdfasdf&apos;, &apos;fsdfsdfsdafsdafsdaf&apos;, &apos;ffsdfsdfsdafsdafasdfasdf&apos;],</div><div class=\"line\">    num = 5,</div><div class=\"line\">    len = article.length</div><div class=\"line\"></div><div class=\"line\">  for (var i = 0; i &lt; 5; i++) &#123;</div><div class=\"line\">    if (article[i]) &#123;</div><div class=\"line\">      Flywight.getDiv().innerHTML = article[i]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  document.getElementById(&apos;next_page&apos;).onclick = function () &#123;</div><div class=\"line\">    if (article.length &lt; 5) &#123;</div><div class=\"line\">      return</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var n = ++paper * num % len,</div><div class=\"line\">      j = 0</div><div class=\"line\"></div><div class=\"line\">    for (; i &lt; 5; i++) &#123;</div><div class=\"line\">      if (article[n + j]) &#123;</div><div class=\"line\">        Flywight.getDiv().innerHTML = article[n + j]</div><div class=\"line\">      &#125; else if (article[n + j - len]) &#123;</div><div class=\"line\">        Flywight.getDiv().innerHTML = article[n + j - len]</div><div class=\"line\">      &#125; else &#123;</div><div class=\"line\">        Flywight.getDiv().innerHTML = &quot;&quot;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\">~function () &#123;</div><div class=\"line\">  // 享元方法，其实也就是共享方法</div><div class=\"line\">  &apos;use strict&apos;</div><div class=\"line\">  var FlyWeight = &#123;</div><div class=\"line\">    moveX: function (x) &#123;</div><div class=\"line\">      this.x = x</div><div class=\"line\">    &#125;,</div><div class=\"line\">    moveY: function (y) &#123;</div><div class=\"line\">      this.y = y</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var Player = function (x, y, c) &#123;</div><div class=\"line\">    this.x = x</div><div class=\"line\">    this.y = y</div><div class=\"line\">    this.color = c</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Player.prototype = FlyWeight</div><div class=\"line\">  Player.prototype.changeC = function (c) &#123;</div><div class=\"line\">    this.color = c</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>"},{"title":"所谓publish-subscribe","date":"2017-04-22T12:14:58.000Z","_content":"## 所谓观察者模式 publish/subscribe\n1. subscribe事件订阅/事件监听 就是将事件和事件的callback，  \n添加到一个需要监听执行事件队列里面\n    {\n      eventName: [callback1, callback1],\n      eventName: [callback]\n    }\n2. 接收到publish发布事件就是将subscribe的事件从队列拿出来执行\n3. 在外看来就像是一直在监测这个事件，然后接收到publish发布的，  \n执行监测的事件callback","source":"_posts/2017/04/所谓publish-subscribe.md","raw":"---\ntitle: 所谓publish-subscribe\ncategories: 课外学习\ndate: 2017-04-22 20:14:58\ntags: \n  - 设计模式\n  - javascript\n---\n## 所谓观察者模式 publish/subscribe\n1. subscribe事件订阅/事件监听 就是将事件和事件的callback，  \n添加到一个需要监听执行事件队列里面\n    {\n      eventName: [callback1, callback1],\n      eventName: [callback]\n    }\n2. 接收到publish发布事件就是将subscribe的事件从队列拿出来执行\n3. 在外看来就像是一直在监测这个事件，然后接收到publish发布的，  \n执行监测的事件callback","slug":"所谓publish-subscribe","published":1,"updated":"2017-05-15T09:47:12.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb87000qn8v3e8wgei9v","content":"<h2 id=\"所谓观察者模式-publish-subscribe\"><a href=\"#所谓观察者模式-publish-subscribe\" class=\"headerlink\" title=\"所谓观察者模式 publish/subscribe\"></a>所谓观察者模式 publish/subscribe</h2><ol>\n<li>subscribe事件订阅/事件监听 就是将事件和事件的callback，<br>添加到一个需要监听执行事件队列里面<br> {<br>   eventName: [callback1, callback1],<br>   eventName: [callback]<br> }</li>\n<li>接收到publish发布事件就是将subscribe的事件从队列拿出来执行</li>\n<li>在外看来就像是一直在监测这个事件，然后接收到publish发布的，<br>执行监测的事件callback</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"所谓观察者模式-publish-subscribe\"><a href=\"#所谓观察者模式-publish-subscribe\" class=\"headerlink\" title=\"所谓观察者模式 publish/subscribe\"></a>所谓观察者模式 publish/subscribe</h2><ol>\n<li>subscribe事件订阅/事件监听 就是将事件和事件的callback，<br>添加到一个需要监听执行事件队列里面<br> {<br>   eventName: [callback1, callback1],<br>   eventName: [callback]<br> }</li>\n<li>接收到publish发布事件就是将subscribe的事件从队列拿出来执行</li>\n<li>在外看来就像是一直在监测这个事件，然后接收到publish发布的，<br>执行监测的事件callback</li>\n</ol>\n"},{"title":"jsDemo","date":"2017-07-08T07:13:51.000Z","_content":"\n##Demo [Demo就在这里](http://faceplus.top/jsTest/)\n","source":"_posts/2017/07/jsDemo.md","raw":"---\ntitle: jsDemo\ndate: 2017-07-08 15:13:51\ntags:\n  - demo\n  - javascript\n---\n\n##Demo [Demo就在这里](http://faceplus.top/jsTest/)\n","slug":"jsDemo","published":1,"updated":"2017-08-17T08:04:56.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb8b000tn8v3f4eel7xx","content":"<p>##Demo <a href=\"http://faceplus.top/jsTest/\">Demo就在这里</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>##Demo <a href=\"http://faceplus.top/jsTest/\">Demo就在这里</a></p>\n"},{"title":"js设计模式笔记--代理模式","date":"2017-08-18T07:43:09.000Z","_content":"## 代理模式\n1. 对于一个对象不能直接引用另一个对象，所以通过代理起个中介作用\n2. 没想到这一章讲的是跨域，我的妈呀，这怎么成了设计模式了\n3. 跨域解决方案：\n * jsonp 创建script标签获取数据，不能post\n * iframe 通过iframe拿数据，写起来麻烦，还很弱\n * nginx或者其他服务器进行跨域，或者设置http cors\n *... 其他","source":"_posts/2017/08/js设计模式笔记-代理模式.md","raw":"---\ntitle: js设计模式笔记--代理模式\ndate: 2017-08-18 15:43:09\ntags:\n  - 设计模式\n  - js基础\n---\n## 代理模式\n1. 对于一个对象不能直接引用另一个对象，所以通过代理起个中介作用\n2. 没想到这一章讲的是跨域，我的妈呀，这怎么成了设计模式了\n3. 跨域解决方案：\n * jsonp 创建script标签获取数据，不能post\n * iframe 通过iframe拿数据，写起来麻烦，还很弱\n * nginx或者其他服务器进行跨域，或者设置http cors\n *... 其他","slug":"js设计模式笔记-代理模式","published":1,"updated":"2017-08-18T07:44:19.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb8e000yn8v3bb3zajpt","content":"<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><ol>\n<li>对于一个对象不能直接引用另一个对象，所以通过代理起个中介作用</li>\n<li>没想到这一章讲的是跨域，我的妈呀，这怎么成了设计模式了</li>\n<li>跨域解决方案：<ul>\n<li>jsonp 创建script标签获取数据，不能post</li>\n<li>iframe 通过iframe拿数据，写起来麻烦，还很弱</li>\n<li>nginx或者其他服务器进行跨域，或者设置http cors<br>*… 其他</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><ol>\n<li>对于一个对象不能直接引用另一个对象，所以通过代理起个中介作用</li>\n<li>没想到这一章讲的是跨域，我的妈呀，这怎么成了设计模式了</li>\n<li>跨域解决方案：<ul>\n<li>jsonp 创建script标签获取数据，不能post</li>\n<li>iframe 通过iframe拿数据，写起来麻烦，还很弱</li>\n<li>nginx或者其他服务器进行跨域，或者设置http cors<br>*… 其他</li>\n</ul>\n</li>\n</ol>\n"},{"title":"简单的代码，读懂观察者模式和Promise","date":"2017-06-10T12:10:35.000Z","_content":"\n## 观察者模式\n### 观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。\n-- 基于观察者模式，可以做数据的绑定，代码的解耦。\n<!-- more -->\n\n##### 一个简单的观察者模式代码示例：\n```javascript\nfunction Observer() {\n    // 容器，存放subscribe订阅的内容\n    this.subscribes = {\n    }\n}\n\nObserver.prototype = {\n    constructor: 'Observer',\n    // 往容器放东西\n    subscribe: function (eventName, callback) {\n        this.subscribes[eventName] = callback\n    },\n    // 取函数，执行\n    publish: function (eventName, stuff) {\n        // 把订阅的东西取出来\n        // 执行\n        this.subscribes[eventName](stuff)\n    }\n}\n```\n##### 使用此代码\n```javascript\nvar observer = new Observer()\n\nobserver.subscribe('吃饭', function (stuff) {\n    console.log(stuff) // 成功打印面条\n})\n\nsetTimeout(function () {\n    observer.publish('吃饭', '面条')\n}, 2000)\n```\n\n##### 代码的逻辑很简单\n 1. **subscribe**的时候将要执行的函数放入存放函数的容器\n 2. **publish**的时候根据事件的名称取出函数，并传入数据，执行\n \n## Promise\n### Promise是js异步的解决方案，通常用于ajax请求\n#### 继续编写简单的代码\n```javascript\nfunction Promise(executor) {\n    // 容器，存放then订阅的东西\n    this._deferreds = []\n    var _this = this\n    // 承诺被执行\n    function resolve(stuff) {\n        // 取出存的东西\n        _this._deferreds.forEach(function (deferred) {\n            // 执行\n            deferred(stuff)\n        })\n    }\n    // Promise传入的函数，执行时将resolve传进去\n    executor(resolve)\n}\n\nPromise.prototype.then = function (onFulfilled) {\n    // 往里面放东西\n    this._deferreds.push(onFulfilled)\n}\n```\n##### 使用此代码\n```javascript\nnew Promise(function (resolve) {\n    setTimeout(function () {\n        resolve('apple')\n    }, 2000)\n})\n    .then(function (stuff) {\n        console.log(stuff) // apple\n    })\n```\n##### Promise的关键点在于\n1. **.then**是给存放回调的容器里面添加回调函数\n2. **resolve**是**then**注册回调的执行者，所以当异步的时候，then要后于resolve执行。同样PubSub也可以用于异步\n3. Promise也是观察者模式的一种实现\n```javascript\n// 使用事件发布订阅处理异步\nvar observer = new Observer()\n\nobserver.subscribe('吃饭', function (stuff) {\n    console.log(stuff) // 面条\n})\n\n$.ajax({\n   url: '饭堂'\n})\n.success(function(data) {\n  observer.publish('吃饭', data['面条'])\n})\n```\n##### 都可以轻松的实现异步的解耦\n\n### 以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise\n[es6Promise](http://faceplus.top/2017/04/18/es6%E7%89%88promise/)\n","source":"_posts/2017/06/简单的代码，了解观察者模式和Promise.md","raw":"---\ntitle: 简单的代码，读懂观察者模式和Promise\ndate: 2017-06-10 20:10:35\ntags:\n  - javascript\n  - 基础知识\n---\n\n## 观察者模式\n### 观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。\n-- 基于观察者模式，可以做数据的绑定，代码的解耦。\n<!-- more -->\n\n##### 一个简单的观察者模式代码示例：\n```javascript\nfunction Observer() {\n    // 容器，存放subscribe订阅的内容\n    this.subscribes = {\n    }\n}\n\nObserver.prototype = {\n    constructor: 'Observer',\n    // 往容器放东西\n    subscribe: function (eventName, callback) {\n        this.subscribes[eventName] = callback\n    },\n    // 取函数，执行\n    publish: function (eventName, stuff) {\n        // 把订阅的东西取出来\n        // 执行\n        this.subscribes[eventName](stuff)\n    }\n}\n```\n##### 使用此代码\n```javascript\nvar observer = new Observer()\n\nobserver.subscribe('吃饭', function (stuff) {\n    console.log(stuff) // 成功打印面条\n})\n\nsetTimeout(function () {\n    observer.publish('吃饭', '面条')\n}, 2000)\n```\n\n##### 代码的逻辑很简单\n 1. **subscribe**的时候将要执行的函数放入存放函数的容器\n 2. **publish**的时候根据事件的名称取出函数，并传入数据，执行\n \n## Promise\n### Promise是js异步的解决方案，通常用于ajax请求\n#### 继续编写简单的代码\n```javascript\nfunction Promise(executor) {\n    // 容器，存放then订阅的东西\n    this._deferreds = []\n    var _this = this\n    // 承诺被执行\n    function resolve(stuff) {\n        // 取出存的东西\n        _this._deferreds.forEach(function (deferred) {\n            // 执行\n            deferred(stuff)\n        })\n    }\n    // Promise传入的函数，执行时将resolve传进去\n    executor(resolve)\n}\n\nPromise.prototype.then = function (onFulfilled) {\n    // 往里面放东西\n    this._deferreds.push(onFulfilled)\n}\n```\n##### 使用此代码\n```javascript\nnew Promise(function (resolve) {\n    setTimeout(function () {\n        resolve('apple')\n    }, 2000)\n})\n    .then(function (stuff) {\n        console.log(stuff) // apple\n    })\n```\n##### Promise的关键点在于\n1. **.then**是给存放回调的容器里面添加回调函数\n2. **resolve**是**then**注册回调的执行者，所以当异步的时候，then要后于resolve执行。同样PubSub也可以用于异步\n3. Promise也是观察者模式的一种实现\n```javascript\n// 使用事件发布订阅处理异步\nvar observer = new Observer()\n\nobserver.subscribe('吃饭', function (stuff) {\n    console.log(stuff) // 面条\n})\n\n$.ajax({\n   url: '饭堂'\n})\n.success(function(data) {\n  observer.publish('吃饭', data['面条'])\n})\n```\n##### 都可以轻松的实现异步的解耦\n\n### 以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise\n[es6Promise](http://faceplus.top/2017/04/18/es6%E7%89%88promise/)\n","slug":"简单的代码，了解观察者模式和Promise","published":1,"updated":"2017-08-17T08:04:56.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb8l0011n8v35zws2b3r","content":"<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><h3 id=\"观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。\"><a href=\"#观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。\" class=\"headerlink\" title=\"观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。\"></a>观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。</h3><p>– 基于观察者模式，可以做数据的绑定，代码的解耦。<br><a id=\"more\"></a></p>\n<h5 id=\"一个简单的观察者模式代码示例：\"><a href=\"#一个简单的观察者模式代码示例：\" class=\"headerlink\" title=\"一个简单的观察者模式代码示例：\"></a>一个简单的观察者模式代码示例：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 容器，存放subscribe订阅的内容</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.subscribes = &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Observer.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"string\">'Observer'</span>,</div><div class=\"line\">    <span class=\"comment\">// 往容器放东西</span></div><div class=\"line\">    subscribe: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventName, callback</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subscribes[eventName] = callback</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 取函数，执行</span></div><div class=\"line\">    publish: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventName, stuff</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 把订阅的东西取出来</span></div><div class=\"line\">        <span class=\"comment\">// 执行</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.subscribes[eventName](stuff)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"使用此代码\"><a href=\"#使用此代码\" class=\"headerlink\" title=\"使用此代码\"></a>使用此代码</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> Observer()</div><div class=\"line\"></div><div class=\"line\">observer.subscribe(<span class=\"string\">'吃饭'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stuff</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(stuff) <span class=\"comment\">// 成功打印面条</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    observer.publish(<span class=\"string\">'吃饭'</span>, <span class=\"string\">'面条'</span>)</div><div class=\"line\">&#125;, <span class=\"number\">2000</span>)</div></pre></td></tr></table></figure>\n<h5 id=\"代码的逻辑很简单\"><a href=\"#代码的逻辑很简单\" class=\"headerlink\" title=\"代码的逻辑很简单\"></a>代码的逻辑很简单</h5><ol>\n<li><strong>subscribe</strong>的时候将要执行的函数放入存放函数的容器</li>\n<li><strong>publish</strong>的时候根据事件的名称取出函数，并传入数据，执行</li>\n</ol>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><h3 id=\"Promise是js异步的解决方案，通常用于ajax请求\"><a href=\"#Promise是js异步的解决方案，通常用于ajax请求\" class=\"headerlink\" title=\"Promise是js异步的解决方案，通常用于ajax请求\"></a>Promise是js异步的解决方案，通常用于ajax请求</h3><h4 id=\"继续编写简单的代码\"><a href=\"#继续编写简单的代码\" class=\"headerlink\" title=\"继续编写简单的代码\"></a>继续编写简单的代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 容器，存放then订阅的东西</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._deferreds = []</div><div class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"comment\">// 承诺被执行</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">stuff</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 取出存的东西</span></div><div class=\"line\">        _this._deferreds.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">deferred</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 执行</span></div><div class=\"line\">            deferred(stuff)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Promise传入的函数，执行时将resolve传进去</span></div><div class=\"line\">    executor(resolve)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 往里面放东西</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._deferreds.push(onFulfilled)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"使用此代码-1\"><a href=\"#使用此代码-1\" class=\"headerlink\" title=\"使用此代码\"></a>使用此代码</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        resolve(<span class=\"string\">'apple'</span>)</div><div class=\"line\">    &#125;, <span class=\"number\">2000</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stuff</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(stuff) <span class=\"comment\">// apple</span></div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<h5 id=\"Promise的关键点在于\"><a href=\"#Promise的关键点在于\" class=\"headerlink\" title=\"Promise的关键点在于\"></a>Promise的关键点在于</h5><ol>\n<li><strong>.then</strong>是给存放回调的容器里面添加回调函数</li>\n<li><strong>resolve</strong>是<strong>then</strong>注册回调的执行者，所以当异步的时候，then要后于resolve执行。同样PubSub也可以用于异步</li>\n<li>Promise也是观察者模式的一种实现<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用事件发布订阅处理异步</span></div><div class=\"line\"><span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> Observer()</div><div class=\"line\"></div><div class=\"line\">observer.subscribe(<span class=\"string\">'吃饭'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stuff</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(stuff) <span class=\"comment\">// 面条</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">   <span class=\"attr\">url</span>: <span class=\"string\">'饭堂'</span></div><div class=\"line\">&#125;)</div><div class=\"line\">.success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">  observer.publish(<span class=\"string\">'吃饭'</span>, data[<span class=\"string\">'面条'</span>])</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"都可以轻松的实现异步的解耦\"><a href=\"#都可以轻松的实现异步的解耦\" class=\"headerlink\" title=\"都可以轻松的实现异步的解耦\"></a>都可以轻松的实现异步的解耦</h5><h3 id=\"以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise\"><a href=\"#以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise\" class=\"headerlink\" title=\"以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise\"></a>以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise</h3><p><a href=\"http://faceplus.top/2017/04/18/es6%E7%89%88promise/\">es6Promise</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><h3 id=\"观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。\"><a href=\"#观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。\" class=\"headerlink\" title=\"观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。\"></a>观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。</h3><p>– 基于观察者模式，可以做数据的绑定，代码的解耦。<br></p>","more":"<p></p>\n<h5 id=\"一个简单的观察者模式代码示例：\"><a href=\"#一个简单的观察者模式代码示例：\" class=\"headerlink\" title=\"一个简单的观察者模式代码示例：\"></a>一个简单的观察者模式代码示例：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 容器，存放subscribe订阅的内容</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.subscribes = &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Observer.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"string\">'Observer'</span>,</div><div class=\"line\">    <span class=\"comment\">// 往容器放东西</span></div><div class=\"line\">    subscribe: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventName, callback</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subscribes[eventName] = callback</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 取函数，执行</span></div><div class=\"line\">    publish: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventName, stuff</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 把订阅的东西取出来</span></div><div class=\"line\">        <span class=\"comment\">// 执行</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.subscribes[eventName](stuff)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"使用此代码\"><a href=\"#使用此代码\" class=\"headerlink\" title=\"使用此代码\"></a>使用此代码</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> Observer()</div><div class=\"line\"></div><div class=\"line\">observer.subscribe(<span class=\"string\">'吃饭'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stuff</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(stuff) <span class=\"comment\">// 成功打印面条</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    observer.publish(<span class=\"string\">'吃饭'</span>, <span class=\"string\">'面条'</span>)</div><div class=\"line\">&#125;, <span class=\"number\">2000</span>)</div></pre></td></tr></table></figure>\n<h5 id=\"代码的逻辑很简单\"><a href=\"#代码的逻辑很简单\" class=\"headerlink\" title=\"代码的逻辑很简单\"></a>代码的逻辑很简单</h5><ol>\n<li><strong>subscribe</strong>的时候将要执行的函数放入存放函数的容器</li>\n<li><strong>publish</strong>的时候根据事件的名称取出函数，并传入数据，执行</li>\n</ol>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><h3 id=\"Promise是js异步的解决方案，通常用于ajax请求\"><a href=\"#Promise是js异步的解决方案，通常用于ajax请求\" class=\"headerlink\" title=\"Promise是js异步的解决方案，通常用于ajax请求\"></a>Promise是js异步的解决方案，通常用于ajax请求</h3><h4 id=\"继续编写简单的代码\"><a href=\"#继续编写简单的代码\" class=\"headerlink\" title=\"继续编写简单的代码\"></a>继续编写简单的代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 容器，存放then订阅的东西</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._deferreds = []</div><div class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"comment\">// 承诺被执行</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">stuff</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 取出存的东西</span></div><div class=\"line\">        _this._deferreds.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">deferred</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 执行</span></div><div class=\"line\">            deferred(stuff)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Promise传入的函数，执行时将resolve传进去</span></div><div class=\"line\">    executor(resolve)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 往里面放东西</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._deferreds.push(onFulfilled)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"使用此代码-1\"><a href=\"#使用此代码-1\" class=\"headerlink\" title=\"使用此代码\"></a>使用此代码</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        resolve(<span class=\"string\">'apple'</span>)</div><div class=\"line\">    &#125;, <span class=\"number\">2000</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stuff</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(stuff) <span class=\"comment\">// apple</span></div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<h5 id=\"Promise的关键点在于\"><a href=\"#Promise的关键点在于\" class=\"headerlink\" title=\"Promise的关键点在于\"></a>Promise的关键点在于</h5><ol>\n<li><strong>.then</strong>是给存放回调的容器里面添加回调函数</li>\n<li><strong>resolve</strong>是<strong>then</strong>注册回调的执行者，所以当异步的时候，then要后于resolve执行。同样PubSub也可以用于异步</li>\n<li>Promise也是观察者模式的一种实现<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用事件发布订阅处理异步</span></div><div class=\"line\"><span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> Observer()</div><div class=\"line\"></div><div class=\"line\">observer.subscribe(<span class=\"string\">'吃饭'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stuff</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(stuff) <span class=\"comment\">// 面条</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">   <span class=\"attr\">url</span>: <span class=\"string\">'饭堂'</span></div><div class=\"line\">&#125;)</div><div class=\"line\">.success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">  observer.publish(<span class=\"string\">'吃饭'</span>, data[<span class=\"string\">'面条'</span>])</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"都可以轻松的实现异步的解耦\"><a href=\"#都可以轻松的实现异步的解耦\" class=\"headerlink\" title=\"都可以轻松的实现异步的解耦\"></a>都可以轻松的实现异步的解耦</h5><h3 id=\"以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise\"><a href=\"#以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise\" class=\"headerlink\" title=\"以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise\"></a>以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise</h3><p><a href=\"http://faceplus.top/2017/04/18/es6%E7%89%88promise/\">es6Promise</a></p>"},{"title":"js设计模式笔记--工厂模式","date":"2017-08-18T07:33:04.000Z","_content":"## 工厂模式\n1. 工厂模式顾名思义就是一个工厂，里面可以创建各种类型的产品\n2. 工厂模式和类\n  * 工厂模式可以根据所需产生不同的类\n  * 类是一个厂内一个小型的团体\n  \n3. 抽象工程模式\n  * 父类不提供实体方法，只提供接口，通过子类去实现覆盖\n\n```flow js\n'use strict'\nconst log = console.log.bind(console)\n\nlog('--------简单工厂，就是一个简单的封装--------')\n\n~function () {\n  function Button (type, placeholder) {\n    let o = Object.create(null)\n    o.content = placeholder\n    o.click = function () {\n      log(placeholder)\n    }\n\n    if (type === 'error') {\n      o.color = 'red'\n    } else {\n      o.color = 'blue'\n    }\n\n    return o\n  }\n\n  var errorBtn = Button('error', 'heheheheh')\n  var primaryBtn = Button('df', 'dfsdfsdfsdfd')\n  log(errorBtn.content)\n  log(primaryBtn.content)\n}()\n\nlog('-------工厂方法模式---------')\n\n~function () {\n  function Button (type, content) {\n    if (this instanceof Button) {\n      var o = new this[type](content)\n      return o\n    } else {\n      return new Button(type, content)\n    }\n  }\n\n  Button.click = function (content) {\n    log(content)\n  }\n\n  Button.prototype = {\n    constructor: 'Button',\n    error: function (content) {\n      this.color = 'red'\n      Button.click(content)\n    },\n    primary: function (content) {\n      this.color = 'blue'\n      Button.click(content)\n    }\n  }\n\n  var a = Button('error', 'content')\n  log(a.color)\n\n}()\n```","source":"_posts/2017/08/js设计模式笔记-工厂模式.md","raw":"---\ntitle: js设计模式笔记--工厂模式\ndate: 2017-08-18 15:33:04\ntags:\n  - 设计模式\n  - js基础\n---\n## 工厂模式\n1. 工厂模式顾名思义就是一个工厂，里面可以创建各种类型的产品\n2. 工厂模式和类\n  * 工厂模式可以根据所需产生不同的类\n  * 类是一个厂内一个小型的团体\n  \n3. 抽象工程模式\n  * 父类不提供实体方法，只提供接口，通过子类去实现覆盖\n\n```flow js\n'use strict'\nconst log = console.log.bind(console)\n\nlog('--------简单工厂，就是一个简单的封装--------')\n\n~function () {\n  function Button (type, placeholder) {\n    let o = Object.create(null)\n    o.content = placeholder\n    o.click = function () {\n      log(placeholder)\n    }\n\n    if (type === 'error') {\n      o.color = 'red'\n    } else {\n      o.color = 'blue'\n    }\n\n    return o\n  }\n\n  var errorBtn = Button('error', 'heheheheh')\n  var primaryBtn = Button('df', 'dfsdfsdfsdfd')\n  log(errorBtn.content)\n  log(primaryBtn.content)\n}()\n\nlog('-------工厂方法模式---------')\n\n~function () {\n  function Button (type, content) {\n    if (this instanceof Button) {\n      var o = new this[type](content)\n      return o\n    } else {\n      return new Button(type, content)\n    }\n  }\n\n  Button.click = function (content) {\n    log(content)\n  }\n\n  Button.prototype = {\n    constructor: 'Button',\n    error: function (content) {\n      this.color = 'red'\n      Button.click(content)\n    },\n    primary: function (content) {\n      this.color = 'blue'\n      Button.click(content)\n    }\n  }\n\n  var a = Button('error', 'content')\n  log(a.color)\n\n}()\n```","slug":"js设计模式笔记-工厂模式","published":1,"updated":"2017-08-18T07:35:28.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb8o0014n8v3yw513u3i","content":"<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><ol>\n<li>工厂模式顾名思义就是一个工厂，里面可以创建各种类型的产品</li>\n<li><p>工厂模式和类</p>\n<ul>\n<li>工厂模式可以根据所需产生不同的类</li>\n<li>类是一个厂内一个小型的团体</li>\n</ul>\n</li>\n<li><p>抽象工程模式</p>\n<ul>\n<li>父类不提供实体方法，只提供接口，通过子类去实现覆盖</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\">const log = console.log.bind(console)</div><div class=\"line\"></div><div class=\"line\">log(&apos;--------简单工厂，就是一个简单的封装--------&apos;)</div><div class=\"line\"></div><div class=\"line\">~function () &#123;</div><div class=\"line\">  function Button (type, placeholder) &#123;</div><div class=\"line\">    let o = Object.create(null)</div><div class=\"line\">    o.content = placeholder</div><div class=\"line\">    o.click = function () &#123;</div><div class=\"line\">      log(placeholder)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (type === &apos;error&apos;) &#123;</div><div class=\"line\">      o.color = &apos;red&apos;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      o.color = &apos;blue&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return o</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var errorBtn = Button(&apos;error&apos;, &apos;heheheheh&apos;)</div><div class=\"line\">  var primaryBtn = Button(&apos;df&apos;, &apos;dfsdfsdfsdfd&apos;)</div><div class=\"line\">  log(errorBtn.content)</div><div class=\"line\">  log(primaryBtn.content)</div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\">log(&apos;-------工厂方法模式---------&apos;)</div><div class=\"line\"></div><div class=\"line\">~function () &#123;</div><div class=\"line\">  function Button (type, content) &#123;</div><div class=\"line\">    if (this instanceof Button) &#123;</div><div class=\"line\">      var o = new this[type](content)</div><div class=\"line\">      return o</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      return new Button(type, content)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Button.click = function (content) &#123;</div><div class=\"line\">    log(content)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Button.prototype = &#123;</div><div class=\"line\">    constructor: &apos;Button&apos;,</div><div class=\"line\">    error: function (content) &#123;</div><div class=\"line\">      this.color = &apos;red&apos;</div><div class=\"line\">      Button.click(content)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    primary: function (content) &#123;</div><div class=\"line\">      this.color = &apos;blue&apos;</div><div class=\"line\">      Button.click(content)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var a = Button(&apos;error&apos;, &apos;content&apos;)</div><div class=\"line\">  log(a.color)</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><ol>\n<li>工厂模式顾名思义就是一个工厂，里面可以创建各种类型的产品</li>\n<li><p>工厂模式和类</p>\n<ul>\n<li>工厂模式可以根据所需产生不同的类</li>\n<li>类是一个厂内一个小型的团体</li>\n</ul>\n</li>\n<li><p>抽象工程模式</p>\n<ul>\n<li>父类不提供实体方法，只提供接口，通过子类去实现覆盖</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\">const log = console.log.bind(console)</div><div class=\"line\"></div><div class=\"line\">log(&apos;--------简单工厂，就是一个简单的封装--------&apos;)</div><div class=\"line\"></div><div class=\"line\">~function () &#123;</div><div class=\"line\">  function Button (type, placeholder) &#123;</div><div class=\"line\">    let o = Object.create(null)</div><div class=\"line\">    o.content = placeholder</div><div class=\"line\">    o.click = function () &#123;</div><div class=\"line\">      log(placeholder)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (type === &apos;error&apos;) &#123;</div><div class=\"line\">      o.color = &apos;red&apos;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      o.color = &apos;blue&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return o</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var errorBtn = Button(&apos;error&apos;, &apos;heheheheh&apos;)</div><div class=\"line\">  var primaryBtn = Button(&apos;df&apos;, &apos;dfsdfsdfsdfd&apos;)</div><div class=\"line\">  log(errorBtn.content)</div><div class=\"line\">  log(primaryBtn.content)</div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\">log(&apos;-------工厂方法模式---------&apos;)</div><div class=\"line\"></div><div class=\"line\">~function () &#123;</div><div class=\"line\">  function Button (type, content) &#123;</div><div class=\"line\">    if (this instanceof Button) &#123;</div><div class=\"line\">      var o = new this[type](content)</div><div class=\"line\">      return o</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      return new Button(type, content)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Button.click = function (content) &#123;</div><div class=\"line\">    log(content)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Button.prototype = &#123;</div><div class=\"line\">    constructor: &apos;Button&apos;,</div><div class=\"line\">    error: function (content) &#123;</div><div class=\"line\">      this.color = &apos;red&apos;</div><div class=\"line\">      Button.click(content)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    primary: function (content) &#123;</div><div class=\"line\">      this.color = &apos;blue&apos;</div><div class=\"line\">      Button.click(content)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var a = Button(&apos;error&apos;, &apos;content&apos;)</div><div class=\"line\">  log(a.color)</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>"},{"title":"js设计模式笔记--外观模式","date":"2017-08-18T07:40:23.000Z","_content":"## 外观模式\n*  这章坑爹，就是说了下兼容性的封装，在写个小小型代码库\n\n```flow js\n'use strict'\nvar A = (function () {\n  var o = {\n    g: function (id) {\n      return document.getElementById(id)\n    }\n  }\n  // todo: 其余不想写了，就是获取元素，添加事件的封装\n  return o\n}())\n```","source":"_posts/2017/08/js设计模式笔记-外观模式.md","raw":"---\ntitle: js设计模式笔记--外观模式\ndate: 2017-08-18 15:40:23\ntags:\n  - 设计模式\n  - js基础\n---\n## 外观模式\n*  这章坑爹，就是说了下兼容性的封装，在写个小小型代码库\n\n```flow js\n'use strict'\nvar A = (function () {\n  var o = {\n    g: function (id) {\n      return document.getElementById(id)\n    }\n  }\n  // todo: 其余不想写了，就是获取元素，添加事件的封装\n  return o\n}())\n```","slug":"js设计模式笔记-外观模式","published":1,"updated":"2017-08-18T07:40:59.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb8r0015n8v3xle4aoiv","content":"<h2 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h2><ul>\n<li>这章坑爹，就是说了下兼容性的封装，在写个小小型代码库</li>\n</ul>\n<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\">var A = (function () &#123;</div><div class=\"line\">  var o = &#123;</div><div class=\"line\">    g: function (id) &#123;</div><div class=\"line\">      return document.getElementById(id)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  // todo: 其余不想写了，就是获取元素，添加事件的封装</div><div class=\"line\">  return o</div><div class=\"line\">&#125;())</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h2><ul>\n<li>这章坑爹，就是说了下兼容性的封装，在写个小小型代码库</li>\n</ul>\n<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\">var A = (function () &#123;</div><div class=\"line\">  var o = &#123;</div><div class=\"line\">    g: function (id) &#123;</div><div class=\"line\">      return document.getElementById(id)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  // todo: 其余不想写了，就是获取元素，添加事件的封装</div><div class=\"line\">  return o</div><div class=\"line\">&#125;())</div></pre></td></tr></table></figure>"},{"title":"js设计模式笔记--单例模式","date":"2017-08-18T07:38:50.000Z","_content":"\n## 单例模式\n* 只能实例化一次，第二次实例化将之前实例化好的对象返回，就可以共享实例的内存，可用于modal弹框\n\n```flow js\n'use strict'\nvar single = (function () {\n  var instance = null\n\n  function Fuck (bitch) {\n    this.bitch = bitch\n  }\n\n  Fuck.prototype.start = function () {\n    return this.bitch\n  }\n\n  return {\n    getInstance: function (bitch) {\n      if (!instance) {\n        instance = new Fuck(bitch)\n      }\n      return instance\n    }\n  }\n})()\n\n// 共享一个实例\nvar s = single.getInstance('fucker')\nconsole.log(s)\nvar y = single.getInstance('dsfsd')\nconsole.log(y)\nconsole.log(y.start())\n```","source":"_posts/2017/08/js设计模式笔记-单例模式.md","raw":"---\ntitle: js设计模式笔记--单例模式\ndate: 2017-08-18 15:38:50\ntags:\n  - 设计模式\n  - js基础\n---\n\n## 单例模式\n* 只能实例化一次，第二次实例化将之前实例化好的对象返回，就可以共享实例的内存，可用于modal弹框\n\n```flow js\n'use strict'\nvar single = (function () {\n  var instance = null\n\n  function Fuck (bitch) {\n    this.bitch = bitch\n  }\n\n  Fuck.prototype.start = function () {\n    return this.bitch\n  }\n\n  return {\n    getInstance: function (bitch) {\n      if (!instance) {\n        instance = new Fuck(bitch)\n      }\n      return instance\n    }\n  }\n})()\n\n// 共享一个实例\nvar s = single.getInstance('fucker')\nconsole.log(s)\nvar y = single.getInstance('dsfsd')\nconsole.log(y)\nconsole.log(y.start())\n```","slug":"js设计模式笔记-单例模式","published":1,"updated":"2017-08-18T07:40:11.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb8t0017n8v3j8wukqjs","content":"<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><ul>\n<li>只能实例化一次，第二次实例化将之前实例化好的对象返回，就可以共享实例的内存，可用于modal弹框</li>\n</ul>\n<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\">var single = (function () &#123;</div><div class=\"line\">  var instance = null</div><div class=\"line\"></div><div class=\"line\">  function Fuck (bitch) &#123;</div><div class=\"line\">    this.bitch = bitch</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Fuck.prototype.start = function () &#123;</div><div class=\"line\">    return this.bitch</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  return &#123;</div><div class=\"line\">    getInstance: function (bitch) &#123;</div><div class=\"line\">      if (!instance) &#123;</div><div class=\"line\">        instance = new Fuck(bitch)</div><div class=\"line\">      &#125;</div><div class=\"line\">      return instance</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)()</div><div class=\"line\"></div><div class=\"line\">// 共享一个实例</div><div class=\"line\">var s = single.getInstance(&apos;fucker&apos;)</div><div class=\"line\">console.log(s)</div><div class=\"line\">var y = single.getInstance(&apos;dsfsd&apos;)</div><div class=\"line\">console.log(y)</div><div class=\"line\">console.log(y.start())</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><ul>\n<li>只能实例化一次，第二次实例化将之前实例化好的对象返回，就可以共享实例的内存，可用于modal弹框</li>\n</ul>\n<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\">var single = (function () &#123;</div><div class=\"line\">  var instance = null</div><div class=\"line\"></div><div class=\"line\">  function Fuck (bitch) &#123;</div><div class=\"line\">    this.bitch = bitch</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Fuck.prototype.start = function () &#123;</div><div class=\"line\">    return this.bitch</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  return &#123;</div><div class=\"line\">    getInstance: function (bitch) &#123;</div><div class=\"line\">      if (!instance) &#123;</div><div class=\"line\">        instance = new Fuck(bitch)</div><div class=\"line\">      &#125;</div><div class=\"line\">      return instance</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)()</div><div class=\"line\"></div><div class=\"line\">// 共享一个实例</div><div class=\"line\">var s = single.getInstance(&apos;fucker&apos;)</div><div class=\"line\">console.log(s)</div><div class=\"line\">var y = single.getInstance(&apos;dsfsd&apos;)</div><div class=\"line\">console.log(y)</div><div class=\"line\">console.log(y.start())</div></pre></td></tr></table></figure>"},{"title":"js设计模式笔记--建造者模式","date":"2017-08-18T07:36:51.000Z","_content":"\n## 建造者模式\n* 创建出来的对象直接具有已实现的某些属性方法\n* 此模式参与对象的创建过程，干涉了对象的创建细节\n* 场景：已有内部给定的方法和属性，只需要选择需要的属性，就可以产生一个完整的对象\n\n```flow js\n~function () {\n  'use strict'\n\n  var Human = function (param) {\n    this.skill = param && param.skill || '保密'\n    this.hobby = param && param.hobby || '保密'\n  }\n\n  Human.prototype = {\n    getSkill: function () {\n      return this.skill\n    },\n    getHobby: function () {\n      return this.hobby\n    }\n  }\n\n  var Named = function (name) {\n    var _this = this\n    // 构造\n    ~function (name, _this) {\n      _this.wholeName = name\n      if (name.indexOf(' ') > -1) {\n        _this.firstName = name.slice(0, name.indexOf(' '))\n        _this.secondName = name.slice(name.indexOf(' '))\n      }\n    }(name, _this)\n\n  }\n\n  var Work = function (work) {\n    var _this = this\n    ~function (work, _this) {\n      switch (work) {\n        case 'code':\n          _this.work = '工程师'\n          _this.workDescript = '每天沉醉于编程'\n          break\n        case 'UI':\n        case 'UE':\n          _this.work = '设计师'\n          _this.workDescript = '设计更似一种艺术'\n          break\n        case 'teach':\n          _this.work = '教师'\n          _this.workDescript = '分享也是一种快乐'\n          break\n        default:\n          _this.work = work\n          _this.workDescript = '不清楚你的职业'\n      }\n    }(work, _this)\n  }\n\n  Work.prototype.changeWork = function (work) {\n    this.work = work\n  }\n\n  Work.prototype.changeDescript = function (descript) {\n    this.workDescript = descript\n  }\n\n  var Person = function (name, work) {\n    var _person = new Human()\n    _person.name = new Named(name)\n    _person.work = new Work(work)\n\n    return _person\n  }\n\n  var person = new Person('s b', 'UI')\n\n  console.log(person.skill)\n  console.log(person.name.firstName)\n\n}()\n\n```","source":"_posts/2017/08/js设计模式笔记-建造者模式.md","raw":"---\ntitle: js设计模式笔记--建造者模式\ndate: 2017-08-18 15:36:51\ntags:\n  - 设计模式\n  - js基础\n---\n\n## 建造者模式\n* 创建出来的对象直接具有已实现的某些属性方法\n* 此模式参与对象的创建过程，干涉了对象的创建细节\n* 场景：已有内部给定的方法和属性，只需要选择需要的属性，就可以产生一个完整的对象\n\n```flow js\n~function () {\n  'use strict'\n\n  var Human = function (param) {\n    this.skill = param && param.skill || '保密'\n    this.hobby = param && param.hobby || '保密'\n  }\n\n  Human.prototype = {\n    getSkill: function () {\n      return this.skill\n    },\n    getHobby: function () {\n      return this.hobby\n    }\n  }\n\n  var Named = function (name) {\n    var _this = this\n    // 构造\n    ~function (name, _this) {\n      _this.wholeName = name\n      if (name.indexOf(' ') > -1) {\n        _this.firstName = name.slice(0, name.indexOf(' '))\n        _this.secondName = name.slice(name.indexOf(' '))\n      }\n    }(name, _this)\n\n  }\n\n  var Work = function (work) {\n    var _this = this\n    ~function (work, _this) {\n      switch (work) {\n        case 'code':\n          _this.work = '工程师'\n          _this.workDescript = '每天沉醉于编程'\n          break\n        case 'UI':\n        case 'UE':\n          _this.work = '设计师'\n          _this.workDescript = '设计更似一种艺术'\n          break\n        case 'teach':\n          _this.work = '教师'\n          _this.workDescript = '分享也是一种快乐'\n          break\n        default:\n          _this.work = work\n          _this.workDescript = '不清楚你的职业'\n      }\n    }(work, _this)\n  }\n\n  Work.prototype.changeWork = function (work) {\n    this.work = work\n  }\n\n  Work.prototype.changeDescript = function (descript) {\n    this.workDescript = descript\n  }\n\n  var Person = function (name, work) {\n    var _person = new Human()\n    _person.name = new Named(name)\n    _person.work = new Work(work)\n\n    return _person\n  }\n\n  var person = new Person('s b', 'UI')\n\n  console.log(person.skill)\n  console.log(person.name.firstName)\n\n}()\n\n```","slug":"js设计模式笔记-建造者模式","published":1,"updated":"2017-08-18T07:37:49.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb8x001an8v3mpcgixa0","content":"<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><ul>\n<li>创建出来的对象直接具有已实现的某些属性方法</li>\n<li>此模式参与对象的创建过程，干涉了对象的创建细节</li>\n<li>场景：已有内部给定的方法和属性，只需要选择需要的属性，就可以产生一个完整的对象</li>\n</ul>\n<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\">~function () &#123;</div><div class=\"line\">  &apos;use strict&apos;</div><div class=\"line\"></div><div class=\"line\">  var Human = function (param) &#123;</div><div class=\"line\">    this.skill = param &amp;&amp; param.skill || &apos;保密&apos;</div><div class=\"line\">    this.hobby = param &amp;&amp; param.hobby || &apos;保密&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Human.prototype = &#123;</div><div class=\"line\">    getSkill: function () &#123;</div><div class=\"line\">      return this.skill</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getHobby: function () &#123;</div><div class=\"line\">      return this.hobby</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var Named = function (name) &#123;</div><div class=\"line\">    var _this = this</div><div class=\"line\">    // 构造</div><div class=\"line\">    ~function (name, _this) &#123;</div><div class=\"line\">      _this.wholeName = name</div><div class=\"line\">      if (name.indexOf(&apos; &apos;) &gt; -1) &#123;</div><div class=\"line\">        _this.firstName = name.slice(0, name.indexOf(&apos; &apos;))</div><div class=\"line\">        _this.secondName = name.slice(name.indexOf(&apos; &apos;))</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;(name, _this)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var Work = function (work) &#123;</div><div class=\"line\">    var _this = this</div><div class=\"line\">    ~function (work, _this) &#123;</div><div class=\"line\">      switch (work) &#123;</div><div class=\"line\">        case &apos;code&apos;:</div><div class=\"line\">          _this.work = &apos;工程师&apos;</div><div class=\"line\">          _this.workDescript = &apos;每天沉醉于编程&apos;</div><div class=\"line\">          break</div><div class=\"line\">        case &apos;UI&apos;:</div><div class=\"line\">        case &apos;UE&apos;:</div><div class=\"line\">          _this.work = &apos;设计师&apos;</div><div class=\"line\">          _this.workDescript = &apos;设计更似一种艺术&apos;</div><div class=\"line\">          break</div><div class=\"line\">        case &apos;teach&apos;:</div><div class=\"line\">          _this.work = &apos;教师&apos;</div><div class=\"line\">          _this.workDescript = &apos;分享也是一种快乐&apos;</div><div class=\"line\">          break</div><div class=\"line\">        default:</div><div class=\"line\">          _this.work = work</div><div class=\"line\">          _this.workDescript = &apos;不清楚你的职业&apos;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;(work, _this)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Work.prototype.changeWork = function (work) &#123;</div><div class=\"line\">    this.work = work</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Work.prototype.changeDescript = function (descript) &#123;</div><div class=\"line\">    this.workDescript = descript</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var Person = function (name, work) &#123;</div><div class=\"line\">    var _person = new Human()</div><div class=\"line\">    _person.name = new Named(name)</div><div class=\"line\">    _person.work = new Work(work)</div><div class=\"line\"></div><div class=\"line\">    return _person</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var person = new Person(&apos;s b&apos;, &apos;UI&apos;)</div><div class=\"line\"></div><div class=\"line\">  console.log(person.skill)</div><div class=\"line\">  console.log(person.name.firstName)</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><ul>\n<li>创建出来的对象直接具有已实现的某些属性方法</li>\n<li>此模式参与对象的创建过程，干涉了对象的创建细节</li>\n<li>场景：已有内部给定的方法和属性，只需要选择需要的属性，就可以产生一个完整的对象</li>\n</ul>\n<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\">~function () &#123;</div><div class=\"line\">  &apos;use strict&apos;</div><div class=\"line\"></div><div class=\"line\">  var Human = function (param) &#123;</div><div class=\"line\">    this.skill = param &amp;&amp; param.skill || &apos;保密&apos;</div><div class=\"line\">    this.hobby = param &amp;&amp; param.hobby || &apos;保密&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Human.prototype = &#123;</div><div class=\"line\">    getSkill: function () &#123;</div><div class=\"line\">      return this.skill</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getHobby: function () &#123;</div><div class=\"line\">      return this.hobby</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var Named = function (name) &#123;</div><div class=\"line\">    var _this = this</div><div class=\"line\">    // 构造</div><div class=\"line\">    ~function (name, _this) &#123;</div><div class=\"line\">      _this.wholeName = name</div><div class=\"line\">      if (name.indexOf(&apos; &apos;) &gt; -1) &#123;</div><div class=\"line\">        _this.firstName = name.slice(0, name.indexOf(&apos; &apos;))</div><div class=\"line\">        _this.secondName = name.slice(name.indexOf(&apos; &apos;))</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;(name, _this)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var Work = function (work) &#123;</div><div class=\"line\">    var _this = this</div><div class=\"line\">    ~function (work, _this) &#123;</div><div class=\"line\">      switch (work) &#123;</div><div class=\"line\">        case &apos;code&apos;:</div><div class=\"line\">          _this.work = &apos;工程师&apos;</div><div class=\"line\">          _this.workDescript = &apos;每天沉醉于编程&apos;</div><div class=\"line\">          break</div><div class=\"line\">        case &apos;UI&apos;:</div><div class=\"line\">        case &apos;UE&apos;:</div><div class=\"line\">          _this.work = &apos;设计师&apos;</div><div class=\"line\">          _this.workDescript = &apos;设计更似一种艺术&apos;</div><div class=\"line\">          break</div><div class=\"line\">        case &apos;teach&apos;:</div><div class=\"line\">          _this.work = &apos;教师&apos;</div><div class=\"line\">          _this.workDescript = &apos;分享也是一种快乐&apos;</div><div class=\"line\">          break</div><div class=\"line\">        default:</div><div class=\"line\">          _this.work = work</div><div class=\"line\">          _this.workDescript = &apos;不清楚你的职业&apos;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;(work, _this)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Work.prototype.changeWork = function (work) &#123;</div><div class=\"line\">    this.work = work</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Work.prototype.changeDescript = function (descript) &#123;</div><div class=\"line\">    this.workDescript = descript</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var Person = function (name, work) &#123;</div><div class=\"line\">    var _person = new Human()</div><div class=\"line\">    _person.name = new Named(name)</div><div class=\"line\">    _person.work = new Work(work)</div><div class=\"line\"></div><div class=\"line\">    return _person</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var person = new Person(&apos;s b&apos;, &apos;UI&apos;)</div><div class=\"line\"></div><div class=\"line\">  console.log(person.skill)</div><div class=\"line\">  console.log(person.name.firstName)</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>"},{"title":"js设计模式笔记--原型模式","date":"2017-08-18T07:38:01.000Z","_content":"* 受不了了，什么都是设计模式，一个JS的原型链继承都能当做设计模式，也是醉了\n* 整篇我看最有用的就是那个继承函数\n* 说白了这个模式就像将原型的属性和方法进行共享","source":"_posts/2017/08/js设计模式笔记-原型模式.md","raw":"---\ntitle: js设计模式笔记--原型模式\ndate: 2017-08-18 15:38:01\ntags:\n  - 设计模式\n  - js基础\n---\n* 受不了了，什么都是设计模式，一个JS的原型链继承都能当做设计模式，也是醉了\n* 整篇我看最有用的就是那个继承函数\n* 说白了这个模式就像将原型的属性和方法进行共享","slug":"js设计模式笔记-原型模式","published":1,"updated":"2017-08-18T07:38:38.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eb9d001cn8v329byrp88","content":"<ul>\n<li>受不了了，什么都是设计模式，一个JS的原型链继承都能当做设计模式，也是醉了</li>\n<li>整篇我看最有用的就是那个继承函数</li>\n<li>说白了这个模式就像将原型的属性和方法进行共享</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>受不了了，什么都是设计模式，一个JS的原型链继承都能当做设计模式，也是醉了</li>\n<li>整篇我看最有用的就是那个继承函数</li>\n<li>说白了这个模式就像将原型的属性和方法进行共享</li>\n</ul>\n"},{"title":"js设计模式笔记-组合模式","date":"2017-08-21T10:33:04.000Z","_content":"\n## 组合模式\n1. 层次结构，将部分整合成一个整体，类似DOM tree，所有有节点组合成一个html，使得用户对单个对象和组合的对象具有一致性\n  * 有一个整体作为对外的接口，内部组合若干的层次，模块化每个组件\n\n<!-- more -->\n\n```flow js\n// util\nfunction inheritObject (o) {\n  function F () {\n  }\n\n  F.prototype = o\n  return new F()\n}\n\nfunction inheritPrototype (subClass, superClass) {\n  let p = inheritObject(superClass.prototype)\n  p.constructor = subClass\n  subClass.prototype = p\n}\n\n// 总类\nfunction News () {\n  this.children = []\n  this.element = null\n}\n\n// 抽象\nNews.prototype = {\n  constructor: 'News',\n  init: function () {\n    throw new Error('please override your method')\n  },\n  add: function () {\n    throw new Error('please override your method')\n  },\n  getElement: function () {\n    throw new Error('please override your method')\n  }\n}\n\n// 容器\nfunction Container (id, parent) {\n  News.call(this)\n  this.id = id\n  this.parent = parent\n}\n\ninheritPrototype(Container, News)\n\nContainer.prototype.init = function () {\n  this.element = document.createElement('ul')\n  this.element.id = this.id\n  this.element.className = 'new-container'\n}\n\nContainer.prototype.add = function (child) {\n  this.children.push(child)\n  this.element.appendChild(child.getElement())\n  return this\n}\n\nContainer.prototype.getElement = function () {\n  return this.element\n}\n\nContainer.prototype.show = function () {\n  this.parent.appendChild(this.element)\n}\n\n// 下一层级的集合类\nfunction Item (className) {\n  News.call(this)\n  this.className = className\n  this.init()\n}\n\ninheritPrototype(Item, News)\n\nItem.prototype.init = function () {\n  this.element = document.createElement('li')\n  this.element.className = this.className\n}\n\nItem.prototype.add = function (child) {\n  this.children.push(child)\n  this.element.appendChild(child.getElement())\n  return this\n}\n\nItem.prototype.getElement = function () {\n  return this.element\n}\n\nvar NewsGroup = function (className = '') {\n  News.call(this)\n  this.className = className\n  this.init()\n}\n\ninheritPrototype(NewsGroup, News)\n\nNewsGroup.prototype.init = function () {\n  this.element = document.createElement('div')\n  this.element.className = this.className\n}\n\nNewsGroup.prototype.add = function (child) {\n  this.children.push(child)\n  this.element.appendChild(child.getElement())\n}\n\nNewsGroup.prototype.getElement = function () {\n  return this.element\n}\n\nvar ImageNews = function (url = '', href = '#', className = 'normal') {\n  News.call(this)\n  this.url = url\n  this.href = href\n  this.className = className\n  this.init()\n}\n\ninheritPrototype(ImageNews, News)\n\nImageNews.prototype.init = function () {\n  this.element = document.createElement('a')\n  var img = new Image()\n  img.src = this.url\n  img.href = this.href\n  this.element.appendChild(img)\n  this.element.className = 'image-news ' + this.className\n  this.element.href = this.href\n}\n\nImageNews.prototype.add = function () {\n}\n\nImageNews.prototype.getElement = function () {\n  return this.element\n}\n\nvar IconNews = function (text = '', href = '#', type = 'video') {\n  News.call(this)\n  this.text = text\n  this.href = href\n  this.type = type\n  this.init()\n}\n\ninheritPrototype(IconNews, News)\n\nIconNews.prototype.init = function () {\n  this.element = document.createElement('a')\n  this.element.innerHTML = this.text\n  this.element.href = this.href\n  this.element.className = 'icon ' + this.type\n}\n\nIconNews.prototype.add = function () {\n}\n\nIconNews.prototype.getElement = function () {\n  return this.element\n}\n\nvar EasyNews = function (text = '', href = '#') {\n  News.call(this)\n  this.text = text\n  this.href = href\n  this.init()\n}\n\ninheritPrototype(EasyNews, News)\n\nEasyNews.prototype.init = function () {\n  this.element = document.createElement('a')\n  this.element.innerHTML = this.text\n  this.element.href = this.href\n  this.element.className = 'text'\n}\n\nEasyNews.prototype.add = function () {\n}\n\nEasyNews.prototype.getElement = function () {\n  return this.element\n}\n\nfunction TypeNews (text = '', href = '#', type = '', pos = 'left') {\n  News.call(this)\n  this.text = text\n  this.href = href\n  this.type = type\n  this.pos = pos\n  this.init()\n}\n\ninheritPrototype(TypeNews, News)\n\nTypeNews.prototype.init = function () {\n  this.element = document.createElement('a')\n  if (this.pos === 'left') {\n    this.element.innerHTML = '[' + this.type + '] ' + this.text\n  } else {\n    this.element.innerHTML = this.text + ' [' + this.type + ']'\n  }\n\n  this.element.href = this.href\n  this.element.className = 'text'\n}\n\nTypeNews.prototype.add = function () {\n}\n\nTypeNews.prototype.getElement = function () {\n  return this.element\n}\n\n// 层级已经声明，开始组合\nvar news1 = new Container('news', document.body)\nnews1\n  .add(\n    new Item('normal')\n      .add(\n        new IconNews('fkdsjflksdjflkjsdlkfjlskdjf', '#', 'video')\n      )\n  )\n  .add(\n    new Item('normal')\n      .add(\n        new IconNews('[fdsfdsfdsfsdfsdfdasf', '#', 'live')\n      )\n  )\n  .add(\n    new NewsGroup('has-img')\n      .add(\n        new ImageNews('img/1.jpg', '#', 'small')\n      )\n      .add(\n        new EasyNews('dsfdsfsdfdsfsdfd', '#')\n      )\n      .add(\n        new EasyNews('xxxxxxxxxxxxxx', '#')\n      )\n  )\n```","source":"_posts/2017/08/js设计模式笔记-组合模式.md","raw":"---\ntitle: js设计模式笔记-组合模式\ndate: 2017-08-21 18:33:04\ntags:\n  - 设计模式\n  - js基础\n---\n\n## 组合模式\n1. 层次结构，将部分整合成一个整体，类似DOM tree，所有有节点组合成一个html，使得用户对单个对象和组合的对象具有一致性\n  * 有一个整体作为对外的接口，内部组合若干的层次，模块化每个组件\n\n<!-- more -->\n\n```flow js\n// util\nfunction inheritObject (o) {\n  function F () {\n  }\n\n  F.prototype = o\n  return new F()\n}\n\nfunction inheritPrototype (subClass, superClass) {\n  let p = inheritObject(superClass.prototype)\n  p.constructor = subClass\n  subClass.prototype = p\n}\n\n// 总类\nfunction News () {\n  this.children = []\n  this.element = null\n}\n\n// 抽象\nNews.prototype = {\n  constructor: 'News',\n  init: function () {\n    throw new Error('please override your method')\n  },\n  add: function () {\n    throw new Error('please override your method')\n  },\n  getElement: function () {\n    throw new Error('please override your method')\n  }\n}\n\n// 容器\nfunction Container (id, parent) {\n  News.call(this)\n  this.id = id\n  this.parent = parent\n}\n\ninheritPrototype(Container, News)\n\nContainer.prototype.init = function () {\n  this.element = document.createElement('ul')\n  this.element.id = this.id\n  this.element.className = 'new-container'\n}\n\nContainer.prototype.add = function (child) {\n  this.children.push(child)\n  this.element.appendChild(child.getElement())\n  return this\n}\n\nContainer.prototype.getElement = function () {\n  return this.element\n}\n\nContainer.prototype.show = function () {\n  this.parent.appendChild(this.element)\n}\n\n// 下一层级的集合类\nfunction Item (className) {\n  News.call(this)\n  this.className = className\n  this.init()\n}\n\ninheritPrototype(Item, News)\n\nItem.prototype.init = function () {\n  this.element = document.createElement('li')\n  this.element.className = this.className\n}\n\nItem.prototype.add = function (child) {\n  this.children.push(child)\n  this.element.appendChild(child.getElement())\n  return this\n}\n\nItem.prototype.getElement = function () {\n  return this.element\n}\n\nvar NewsGroup = function (className = '') {\n  News.call(this)\n  this.className = className\n  this.init()\n}\n\ninheritPrototype(NewsGroup, News)\n\nNewsGroup.prototype.init = function () {\n  this.element = document.createElement('div')\n  this.element.className = this.className\n}\n\nNewsGroup.prototype.add = function (child) {\n  this.children.push(child)\n  this.element.appendChild(child.getElement())\n}\n\nNewsGroup.prototype.getElement = function () {\n  return this.element\n}\n\nvar ImageNews = function (url = '', href = '#', className = 'normal') {\n  News.call(this)\n  this.url = url\n  this.href = href\n  this.className = className\n  this.init()\n}\n\ninheritPrototype(ImageNews, News)\n\nImageNews.prototype.init = function () {\n  this.element = document.createElement('a')\n  var img = new Image()\n  img.src = this.url\n  img.href = this.href\n  this.element.appendChild(img)\n  this.element.className = 'image-news ' + this.className\n  this.element.href = this.href\n}\n\nImageNews.prototype.add = function () {\n}\n\nImageNews.prototype.getElement = function () {\n  return this.element\n}\n\nvar IconNews = function (text = '', href = '#', type = 'video') {\n  News.call(this)\n  this.text = text\n  this.href = href\n  this.type = type\n  this.init()\n}\n\ninheritPrototype(IconNews, News)\n\nIconNews.prototype.init = function () {\n  this.element = document.createElement('a')\n  this.element.innerHTML = this.text\n  this.element.href = this.href\n  this.element.className = 'icon ' + this.type\n}\n\nIconNews.prototype.add = function () {\n}\n\nIconNews.prototype.getElement = function () {\n  return this.element\n}\n\nvar EasyNews = function (text = '', href = '#') {\n  News.call(this)\n  this.text = text\n  this.href = href\n  this.init()\n}\n\ninheritPrototype(EasyNews, News)\n\nEasyNews.prototype.init = function () {\n  this.element = document.createElement('a')\n  this.element.innerHTML = this.text\n  this.element.href = this.href\n  this.element.className = 'text'\n}\n\nEasyNews.prototype.add = function () {\n}\n\nEasyNews.prototype.getElement = function () {\n  return this.element\n}\n\nfunction TypeNews (text = '', href = '#', type = '', pos = 'left') {\n  News.call(this)\n  this.text = text\n  this.href = href\n  this.type = type\n  this.pos = pos\n  this.init()\n}\n\ninheritPrototype(TypeNews, News)\n\nTypeNews.prototype.init = function () {\n  this.element = document.createElement('a')\n  if (this.pos === 'left') {\n    this.element.innerHTML = '[' + this.type + '] ' + this.text\n  } else {\n    this.element.innerHTML = this.text + ' [' + this.type + ']'\n  }\n\n  this.element.href = this.href\n  this.element.className = 'text'\n}\n\nTypeNews.prototype.add = function () {\n}\n\nTypeNews.prototype.getElement = function () {\n  return this.element\n}\n\n// 层级已经声明，开始组合\nvar news1 = new Container('news', document.body)\nnews1\n  .add(\n    new Item('normal')\n      .add(\n        new IconNews('fkdsjflksdjflkjsdlkfjlskdjf', '#', 'video')\n      )\n  )\n  .add(\n    new Item('normal')\n      .add(\n        new IconNews('[fdsfdsfdsfsdfsdfdasf', '#', 'live')\n      )\n  )\n  .add(\n    new NewsGroup('has-img')\n      .add(\n        new ImageNews('img/1.jpg', '#', 'small')\n      )\n      .add(\n        new EasyNews('dsfdsfsdfdsfsdfd', '#')\n      )\n      .add(\n        new EasyNews('xxxxxxxxxxxxxx', '#')\n      )\n  )\n```","slug":"js设计模式笔记-组合模式","published":1,"updated":"2017-08-22T05:24:05.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eba4001fn8v32hnja1m1","content":"<h2 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h2><ol>\n<li>层次结构，将部分整合成一个整体，类似DOM tree，所有有节点组合成一个html，使得用户对单个对象和组合的对象具有一致性<ul>\n<li>有一个整体作为对外的接口，内部组合若干的层次，模块化每个组件</li>\n</ul>\n</li>\n</ol>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div></pre></td><td class=\"code\"><pre><div class=\"line\">// util</div><div class=\"line\">function inheritObject (o) &#123;</div><div class=\"line\">  function F () &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  F.prototype = o</div><div class=\"line\">  return new F()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function inheritPrototype (subClass, superClass) &#123;</div><div class=\"line\">  let p = inheritObject(superClass.prototype)</div><div class=\"line\">  p.constructor = subClass</div><div class=\"line\">  subClass.prototype = p</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 总类</div><div class=\"line\">function News () &#123;</div><div class=\"line\">  this.children = []</div><div class=\"line\">  this.element = null</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 抽象</div><div class=\"line\">News.prototype = &#123;</div><div class=\"line\">  constructor: &apos;News&apos;,</div><div class=\"line\">  init: function () &#123;</div><div class=\"line\">    throw new Error(&apos;please override your method&apos;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  add: function () &#123;</div><div class=\"line\">    throw new Error(&apos;please override your method&apos;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  getElement: function () &#123;</div><div class=\"line\">    throw new Error(&apos;please override your method&apos;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 容器</div><div class=\"line\">function Container (id, parent) &#123;</div><div class=\"line\">  News.call(this)</div><div class=\"line\">  this.id = id</div><div class=\"line\">  this.parent = parent</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(Container, News)</div><div class=\"line\"></div><div class=\"line\">Container.prototype.init = function () &#123;</div><div class=\"line\">  this.element = document.createElement(&apos;ul&apos;)</div><div class=\"line\">  this.element.id = this.id</div><div class=\"line\">  this.element.className = &apos;new-container&apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Container.prototype.add = function (child) &#123;</div><div class=\"line\">  this.children.push(child)</div><div class=\"line\">  this.element.appendChild(child.getElement())</div><div class=\"line\">  return this</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Container.prototype.getElement = function () &#123;</div><div class=\"line\">  return this.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Container.prototype.show = function () &#123;</div><div class=\"line\">  this.parent.appendChild(this.element)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 下一层级的集合类</div><div class=\"line\">function Item (className) &#123;</div><div class=\"line\">  News.call(this)</div><div class=\"line\">  this.className = className</div><div class=\"line\">  this.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(Item, News)</div><div class=\"line\"></div><div class=\"line\">Item.prototype.init = function () &#123;</div><div class=\"line\">  this.element = document.createElement(&apos;li&apos;)</div><div class=\"line\">  this.element.className = this.className</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Item.prototype.add = function (child) &#123;</div><div class=\"line\">  this.children.push(child)</div><div class=\"line\">  this.element.appendChild(child.getElement())</div><div class=\"line\">  return this</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Item.prototype.getElement = function () &#123;</div><div class=\"line\">  return this.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var NewsGroup = function (className = &apos;&apos;) &#123;</div><div class=\"line\">  News.call(this)</div><div class=\"line\">  this.className = className</div><div class=\"line\">  this.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(NewsGroup, News)</div><div class=\"line\"></div><div class=\"line\">NewsGroup.prototype.init = function () &#123;</div><div class=\"line\">  this.element = document.createElement(&apos;div&apos;)</div><div class=\"line\">  this.element.className = this.className</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">NewsGroup.prototype.add = function (child) &#123;</div><div class=\"line\">  this.children.push(child)</div><div class=\"line\">  this.element.appendChild(child.getElement())</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">NewsGroup.prototype.getElement = function () &#123;</div><div class=\"line\">  return this.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var ImageNews = function (url = &apos;&apos;, href = &apos;#&apos;, className = &apos;normal&apos;) &#123;</div><div class=\"line\">  News.call(this)</div><div class=\"line\">  this.url = url</div><div class=\"line\">  this.href = href</div><div class=\"line\">  this.className = className</div><div class=\"line\">  this.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(ImageNews, News)</div><div class=\"line\"></div><div class=\"line\">ImageNews.prototype.init = function () &#123;</div><div class=\"line\">  this.element = document.createElement(&apos;a&apos;)</div><div class=\"line\">  var img = new Image()</div><div class=\"line\">  img.src = this.url</div><div class=\"line\">  img.href = this.href</div><div class=\"line\">  this.element.appendChild(img)</div><div class=\"line\">  this.element.className = &apos;image-news &apos; + this.className</div><div class=\"line\">  this.element.href = this.href</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ImageNews.prototype.add = function () &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ImageNews.prototype.getElement = function () &#123;</div><div class=\"line\">  return this.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var IconNews = function (text = &apos;&apos;, href = &apos;#&apos;, type = &apos;video&apos;) &#123;</div><div class=\"line\">  News.call(this)</div><div class=\"line\">  this.text = text</div><div class=\"line\">  this.href = href</div><div class=\"line\">  this.type = type</div><div class=\"line\">  this.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(IconNews, News)</div><div class=\"line\"></div><div class=\"line\">IconNews.prototype.init = function () &#123;</div><div class=\"line\">  this.element = document.createElement(&apos;a&apos;)</div><div class=\"line\">  this.element.innerHTML = this.text</div><div class=\"line\">  this.element.href = this.href</div><div class=\"line\">  this.element.className = &apos;icon &apos; + this.type</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">IconNews.prototype.add = function () &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">IconNews.prototype.getElement = function () &#123;</div><div class=\"line\">  return this.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var EasyNews = function (text = &apos;&apos;, href = &apos;#&apos;) &#123;</div><div class=\"line\">  News.call(this)</div><div class=\"line\">  this.text = text</div><div class=\"line\">  this.href = href</div><div class=\"line\">  this.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(EasyNews, News)</div><div class=\"line\"></div><div class=\"line\">EasyNews.prototype.init = function () &#123;</div><div class=\"line\">  this.element = document.createElement(&apos;a&apos;)</div><div class=\"line\">  this.element.innerHTML = this.text</div><div class=\"line\">  this.element.href = this.href</div><div class=\"line\">  this.element.className = &apos;text&apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">EasyNews.prototype.add = function () &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">EasyNews.prototype.getElement = function () &#123;</div><div class=\"line\">  return this.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function TypeNews (text = &apos;&apos;, href = &apos;#&apos;, type = &apos;&apos;, pos = &apos;left&apos;) &#123;</div><div class=\"line\">  News.call(this)</div><div class=\"line\">  this.text = text</div><div class=\"line\">  this.href = href</div><div class=\"line\">  this.type = type</div><div class=\"line\">  this.pos = pos</div><div class=\"line\">  this.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(TypeNews, News)</div><div class=\"line\"></div><div class=\"line\">TypeNews.prototype.init = function () &#123;</div><div class=\"line\">  this.element = document.createElement(&apos;a&apos;)</div><div class=\"line\">  if (this.pos === &apos;left&apos;) &#123;</div><div class=\"line\">    this.element.innerHTML = &apos;[&apos; + this.type + &apos;] &apos; + this.text</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    this.element.innerHTML = this.text + &apos; [&apos; + this.type + &apos;]&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  this.element.href = this.href</div><div class=\"line\">  this.element.className = &apos;text&apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TypeNews.prototype.add = function () &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TypeNews.prototype.getElement = function () &#123;</div><div class=\"line\">  return this.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 层级已经声明，开始组合</div><div class=\"line\">var news1 = new Container(&apos;news&apos;, document.body)</div><div class=\"line\">news1</div><div class=\"line\">  .add(</div><div class=\"line\">    new Item(&apos;normal&apos;)</div><div class=\"line\">      .add(</div><div class=\"line\">        new IconNews(&apos;fkdsjflksdjflkjsdlkfjlskdjf&apos;, &apos;#&apos;, &apos;video&apos;)</div><div class=\"line\">      )</div><div class=\"line\">  )</div><div class=\"line\">  .add(</div><div class=\"line\">    new Item(&apos;normal&apos;)</div><div class=\"line\">      .add(</div><div class=\"line\">        new IconNews(&apos;[fdsfdsfdsfsdfsdfdasf&apos;, &apos;#&apos;, &apos;live&apos;)</div><div class=\"line\">      )</div><div class=\"line\">  )</div><div class=\"line\">  .add(</div><div class=\"line\">    new NewsGroup(&apos;has-img&apos;)</div><div class=\"line\">      .add(</div><div class=\"line\">        new ImageNews(&apos;img/1.jpg&apos;, &apos;#&apos;, &apos;small&apos;)</div><div class=\"line\">      )</div><div class=\"line\">      .add(</div><div class=\"line\">        new EasyNews(&apos;dsfdsfsdfdsfsdfd&apos;, &apos;#&apos;)</div><div class=\"line\">      )</div><div class=\"line\">      .add(</div><div class=\"line\">        new EasyNews(&apos;xxxxxxxxxxxxxx&apos;, &apos;#&apos;)</div><div class=\"line\">      )</div><div class=\"line\">  )</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h2><ol>\n<li>层次结构，将部分整合成一个整体，类似DOM tree，所有有节点组合成一个html，使得用户对单个对象和组合的对象具有一致性<ul>\n<li>有一个整体作为对外的接口，内部组合若干的层次，模块化每个组件</li>\n</ul>\n</li>\n</ol>","more":"<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div></pre></td><td class=\"code\"><pre><div class=\"line\">// util</div><div class=\"line\">function inheritObject (o) &#123;</div><div class=\"line\">  function F () &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  F.prototype = o</div><div class=\"line\">  return new F()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function inheritPrototype (subClass, superClass) &#123;</div><div class=\"line\">  let p = inheritObject(superClass.prototype)</div><div class=\"line\">  p.constructor = subClass</div><div class=\"line\">  subClass.prototype = p</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 总类</div><div class=\"line\">function News () &#123;</div><div class=\"line\">  this.children = []</div><div class=\"line\">  this.element = null</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 抽象</div><div class=\"line\">News.prototype = &#123;</div><div class=\"line\">  constructor: &apos;News&apos;,</div><div class=\"line\">  init: function () &#123;</div><div class=\"line\">    throw new Error(&apos;please override your method&apos;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  add: function () &#123;</div><div class=\"line\">    throw new Error(&apos;please override your method&apos;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  getElement: function () &#123;</div><div class=\"line\">    throw new Error(&apos;please override your method&apos;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 容器</div><div class=\"line\">function Container (id, parent) &#123;</div><div class=\"line\">  News.call(this)</div><div class=\"line\">  this.id = id</div><div class=\"line\">  this.parent = parent</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(Container, News)</div><div class=\"line\"></div><div class=\"line\">Container.prototype.init = function () &#123;</div><div class=\"line\">  this.element = document.createElement(&apos;ul&apos;)</div><div class=\"line\">  this.element.id = this.id</div><div class=\"line\">  this.element.className = &apos;new-container&apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Container.prototype.add = function (child) &#123;</div><div class=\"line\">  this.children.push(child)</div><div class=\"line\">  this.element.appendChild(child.getElement())</div><div class=\"line\">  return this</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Container.prototype.getElement = function () &#123;</div><div class=\"line\">  return this.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Container.prototype.show = function () &#123;</div><div class=\"line\">  this.parent.appendChild(this.element)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 下一层级的集合类</div><div class=\"line\">function Item (className) &#123;</div><div class=\"line\">  News.call(this)</div><div class=\"line\">  this.className = className</div><div class=\"line\">  this.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(Item, News)</div><div class=\"line\"></div><div class=\"line\">Item.prototype.init = function () &#123;</div><div class=\"line\">  this.element = document.createElement(&apos;li&apos;)</div><div class=\"line\">  this.element.className = this.className</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Item.prototype.add = function (child) &#123;</div><div class=\"line\">  this.children.push(child)</div><div class=\"line\">  this.element.appendChild(child.getElement())</div><div class=\"line\">  return this</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Item.prototype.getElement = function () &#123;</div><div class=\"line\">  return this.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var NewsGroup = function (className = &apos;&apos;) &#123;</div><div class=\"line\">  News.call(this)</div><div class=\"line\">  this.className = className</div><div class=\"line\">  this.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(NewsGroup, News)</div><div class=\"line\"></div><div class=\"line\">NewsGroup.prototype.init = function () &#123;</div><div class=\"line\">  this.element = document.createElement(&apos;div&apos;)</div><div class=\"line\">  this.element.className = this.className</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">NewsGroup.prototype.add = function (child) &#123;</div><div class=\"line\">  this.children.push(child)</div><div class=\"line\">  this.element.appendChild(child.getElement())</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">NewsGroup.prototype.getElement = function () &#123;</div><div class=\"line\">  return this.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var ImageNews = function (url = &apos;&apos;, href = &apos;#&apos;, className = &apos;normal&apos;) &#123;</div><div class=\"line\">  News.call(this)</div><div class=\"line\">  this.url = url</div><div class=\"line\">  this.href = href</div><div class=\"line\">  this.className = className</div><div class=\"line\">  this.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(ImageNews, News)</div><div class=\"line\"></div><div class=\"line\">ImageNews.prototype.init = function () &#123;</div><div class=\"line\">  this.element = document.createElement(&apos;a&apos;)</div><div class=\"line\">  var img = new Image()</div><div class=\"line\">  img.src = this.url</div><div class=\"line\">  img.href = this.href</div><div class=\"line\">  this.element.appendChild(img)</div><div class=\"line\">  this.element.className = &apos;image-news &apos; + this.className</div><div class=\"line\">  this.element.href = this.href</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ImageNews.prototype.add = function () &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ImageNews.prototype.getElement = function () &#123;</div><div class=\"line\">  return this.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var IconNews = function (text = &apos;&apos;, href = &apos;#&apos;, type = &apos;video&apos;) &#123;</div><div class=\"line\">  News.call(this)</div><div class=\"line\">  this.text = text</div><div class=\"line\">  this.href = href</div><div class=\"line\">  this.type = type</div><div class=\"line\">  this.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(IconNews, News)</div><div class=\"line\"></div><div class=\"line\">IconNews.prototype.init = function () &#123;</div><div class=\"line\">  this.element = document.createElement(&apos;a&apos;)</div><div class=\"line\">  this.element.innerHTML = this.text</div><div class=\"line\">  this.element.href = this.href</div><div class=\"line\">  this.element.className = &apos;icon &apos; + this.type</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">IconNews.prototype.add = function () &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">IconNews.prototype.getElement = function () &#123;</div><div class=\"line\">  return this.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var EasyNews = function (text = &apos;&apos;, href = &apos;#&apos;) &#123;</div><div class=\"line\">  News.call(this)</div><div class=\"line\">  this.text = text</div><div class=\"line\">  this.href = href</div><div class=\"line\">  this.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(EasyNews, News)</div><div class=\"line\"></div><div class=\"line\">EasyNews.prototype.init = function () &#123;</div><div class=\"line\">  this.element = document.createElement(&apos;a&apos;)</div><div class=\"line\">  this.element.innerHTML = this.text</div><div class=\"line\">  this.element.href = this.href</div><div class=\"line\">  this.element.className = &apos;text&apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">EasyNews.prototype.add = function () &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">EasyNews.prototype.getElement = function () &#123;</div><div class=\"line\">  return this.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function TypeNews (text = &apos;&apos;, href = &apos;#&apos;, type = &apos;&apos;, pos = &apos;left&apos;) &#123;</div><div class=\"line\">  News.call(this)</div><div class=\"line\">  this.text = text</div><div class=\"line\">  this.href = href</div><div class=\"line\">  this.type = type</div><div class=\"line\">  this.pos = pos</div><div class=\"line\">  this.init()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(TypeNews, News)</div><div class=\"line\"></div><div class=\"line\">TypeNews.prototype.init = function () &#123;</div><div class=\"line\">  this.element = document.createElement(&apos;a&apos;)</div><div class=\"line\">  if (this.pos === &apos;left&apos;) &#123;</div><div class=\"line\">    this.element.innerHTML = &apos;[&apos; + this.type + &apos;] &apos; + this.text</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    this.element.innerHTML = this.text + &apos; [&apos; + this.type + &apos;]&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  this.element.href = this.href</div><div class=\"line\">  this.element.className = &apos;text&apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TypeNews.prototype.add = function () &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TypeNews.prototype.getElement = function () &#123;</div><div class=\"line\">  return this.element</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 层级已经声明，开始组合</div><div class=\"line\">var news1 = new Container(&apos;news&apos;, document.body)</div><div class=\"line\">news1</div><div class=\"line\">  .add(</div><div class=\"line\">    new Item(&apos;normal&apos;)</div><div class=\"line\">      .add(</div><div class=\"line\">        new IconNews(&apos;fkdsjflksdjflkjsdlkfjlskdjf&apos;, &apos;#&apos;, &apos;video&apos;)</div><div class=\"line\">      )</div><div class=\"line\">  )</div><div class=\"line\">  .add(</div><div class=\"line\">    new Item(&apos;normal&apos;)</div><div class=\"line\">      .add(</div><div class=\"line\">        new IconNews(&apos;[fdsfdsfdsfsdfsdfdasf&apos;, &apos;#&apos;, &apos;live&apos;)</div><div class=\"line\">      )</div><div class=\"line\">  )</div><div class=\"line\">  .add(</div><div class=\"line\">    new NewsGroup(&apos;has-img&apos;)</div><div class=\"line\">      .add(</div><div class=\"line\">        new ImageNews(&apos;img/1.jpg&apos;, &apos;#&apos;, &apos;small&apos;)</div><div class=\"line\">      )</div><div class=\"line\">      .add(</div><div class=\"line\">        new EasyNews(&apos;dsfdsfsdfdsfsdfd&apos;, &apos;#&apos;)</div><div class=\"line\">      )</div><div class=\"line\">      .add(</div><div class=\"line\">        new EasyNews(&apos;xxxxxxxxxxxxxx&apos;, &apos;#&apos;)</div><div class=\"line\">      )</div><div class=\"line\">  )</div></pre></td></tr></table></figure>"},{"title":"js设计模式笔记-桥接模式","date":"2017-08-21T10:30:40.000Z","_content":"\n## 桥接模式\n1. 某些类型由于自身的逻辑，会向多个维度变化，使其不增加复杂度并达到解耦的目的\n  * 将一个函数或者类当做一个桥梁，提取公共部分，将实现和抽象通过桥接的方法链接在一起\n  * 针对多维度变化，可以创建许多个桥梁\n  \n```flow js\n'use strict'\nlet log = console.log.bind(console)\nfunction Speed (x, y) {\n  this.x  = x\n  this.y = y\n}\n\nSpeed.prototype.run = function () {\n  log('run')\n}\n\nfunction Color (cl) {\n  this.cl = cl\n}\n\nColor.prototype.draw = function () {\n  log('draw')\n}\n\nfunction Shape (sp) {\n  this.shape = sp\n}\n\nShape.prototype.change = function () {\n  log('改变形状')\n}\n\nfunction Speek (word) {\n  this.word = word\n}\n\nSpeek.prototype.say = function () {\n  log('fuck')\n}\n\n// 创建一座桥梁，在生成 Ball的时候直接 new Ball\nfunction Ball (x, y, c) {\n  this.speed = new Speed(x, y)\n  this.color = new Color(c)\n}\n\nBall.prototype.init = function () {\n  this.speed.run()\n  this.color.draw()\n}\n\nfunction People (x, y, f) {\n  this.speed = new Speed(x, y)\n  this.speek = new Speek(f)\n}\nPeople.prototype.init = function () {\n  this.speed.run()\n  this.speek.say()\n}\n\n// 通过桥梁生成实体\nvar ball = new Ball(1, 2, '#ccc')\nball.init()\n```\n","source":"_posts/2017/08/js设计模式笔记-桥接模式.md","raw":"---\ntitle: js设计模式笔记-桥接模式\ndate: 2017-08-21 18:30:40\ntags:\n  - 设计模式\n  - js基础\n---\n\n## 桥接模式\n1. 某些类型由于自身的逻辑，会向多个维度变化，使其不增加复杂度并达到解耦的目的\n  * 将一个函数或者类当做一个桥梁，提取公共部分，将实现和抽象通过桥接的方法链接在一起\n  * 针对多维度变化，可以创建许多个桥梁\n  \n```flow js\n'use strict'\nlet log = console.log.bind(console)\nfunction Speed (x, y) {\n  this.x  = x\n  this.y = y\n}\n\nSpeed.prototype.run = function () {\n  log('run')\n}\n\nfunction Color (cl) {\n  this.cl = cl\n}\n\nColor.prototype.draw = function () {\n  log('draw')\n}\n\nfunction Shape (sp) {\n  this.shape = sp\n}\n\nShape.prototype.change = function () {\n  log('改变形状')\n}\n\nfunction Speek (word) {\n  this.word = word\n}\n\nSpeek.prototype.say = function () {\n  log('fuck')\n}\n\n// 创建一座桥梁，在生成 Ball的时候直接 new Ball\nfunction Ball (x, y, c) {\n  this.speed = new Speed(x, y)\n  this.color = new Color(c)\n}\n\nBall.prototype.init = function () {\n  this.speed.run()\n  this.color.draw()\n}\n\nfunction People (x, y, f) {\n  this.speed = new Speed(x, y)\n  this.speek = new Speek(f)\n}\nPeople.prototype.init = function () {\n  this.speed.run()\n  this.speek.say()\n}\n\n// 通过桥梁生成实体\nvar ball = new Ball(1, 2, '#ccc')\nball.init()\n```\n","slug":"js设计模式笔记-桥接模式","published":1,"updated":"2017-08-21T10:32:50.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5eba8001gn8v3zwnnq2nu","content":"<h2 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h2><ol>\n<li>某些类型由于自身的逻辑，会向多个维度变化，使其不增加复杂度并达到解耦的目的<ul>\n<li>将一个函数或者类当做一个桥梁，提取公共部分，将实现和抽象通过桥接的方法链接在一起</li>\n<li>针对多维度变化，可以创建许多个桥梁</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\">let log = console.log.bind(console)</div><div class=\"line\">function Speed (x, y) &#123;</div><div class=\"line\">  this.x  = x</div><div class=\"line\">  this.y = y</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Speed.prototype.run = function () &#123;</div><div class=\"line\">  log(&apos;run&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function Color (cl) &#123;</div><div class=\"line\">  this.cl = cl</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Color.prototype.draw = function () &#123;</div><div class=\"line\">  log(&apos;draw&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function Shape (sp) &#123;</div><div class=\"line\">  this.shape = sp</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Shape.prototype.change = function () &#123;</div><div class=\"line\">  log(&apos;改变形状&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function Speek (word) &#123;</div><div class=\"line\">  this.word = word</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Speek.prototype.say = function () &#123;</div><div class=\"line\">  log(&apos;fuck&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 创建一座桥梁，在生成 Ball的时候直接 new Ball</div><div class=\"line\">function Ball (x, y, c) &#123;</div><div class=\"line\">  this.speed = new Speed(x, y)</div><div class=\"line\">  this.color = new Color(c)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Ball.prototype.init = function () &#123;</div><div class=\"line\">  this.speed.run()</div><div class=\"line\">  this.color.draw()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function People (x, y, f) &#123;</div><div class=\"line\">  this.speed = new Speed(x, y)</div><div class=\"line\">  this.speek = new Speek(f)</div><div class=\"line\">&#125;</div><div class=\"line\">People.prototype.init = function () &#123;</div><div class=\"line\">  this.speed.run()</div><div class=\"line\">  this.speek.say()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 通过桥梁生成实体</div><div class=\"line\">var ball = new Ball(1, 2, &apos;#ccc&apos;)</div><div class=\"line\">ball.init()</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h2><ol>\n<li>某些类型由于自身的逻辑，会向多个维度变化，使其不增加复杂度并达到解耦的目的<ul>\n<li>将一个函数或者类当做一个桥梁，提取公共部分，将实现和抽象通过桥接的方法链接在一起</li>\n<li>针对多维度变化，可以创建许多个桥梁</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\">let log = console.log.bind(console)</div><div class=\"line\">function Speed (x, y) &#123;</div><div class=\"line\">  this.x  = x</div><div class=\"line\">  this.y = y</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Speed.prototype.run = function () &#123;</div><div class=\"line\">  log(&apos;run&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function Color (cl) &#123;</div><div class=\"line\">  this.cl = cl</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Color.prototype.draw = function () &#123;</div><div class=\"line\">  log(&apos;draw&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function Shape (sp) &#123;</div><div class=\"line\">  this.shape = sp</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Shape.prototype.change = function () &#123;</div><div class=\"line\">  log(&apos;改变形状&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function Speek (word) &#123;</div><div class=\"line\">  this.word = word</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Speek.prototype.say = function () &#123;</div><div class=\"line\">  log(&apos;fuck&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 创建一座桥梁，在生成 Ball的时候直接 new Ball</div><div class=\"line\">function Ball (x, y, c) &#123;</div><div class=\"line\">  this.speed = new Speed(x, y)</div><div class=\"line\">  this.color = new Color(c)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Ball.prototype.init = function () &#123;</div><div class=\"line\">  this.speed.run()</div><div class=\"line\">  this.color.draw()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function People (x, y, f) &#123;</div><div class=\"line\">  this.speed = new Speed(x, y)</div><div class=\"line\">  this.speek = new Speek(f)</div><div class=\"line\">&#125;</div><div class=\"line\">People.prototype.init = function () &#123;</div><div class=\"line\">  this.speed.run()</div><div class=\"line\">  this.speek.say()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 通过桥梁生成实体</div><div class=\"line\">var ball = new Ball(1, 2, &apos;#ccc&apos;)</div><div class=\"line\">ball.init()</div></pre></td></tr></table></figure>\n"},{"title":"js设计模式笔记--抽象工厂模式","date":"2017-08-18T07:35:43.000Z","_content":"\n## 抽象工厂模式\n1. 抽象类：声明但是不能使用的类\n2. 创造一个通用的大类，通过这个类去创建一系列抽象类，让子类去继承父类定义的但不能使用的方法,子类然后去实现这个抽象的方法\n```flow js\n~function (global) {\n  'use strict'\n  var Car = function () {\n  }\n  Car.prototype = {\n    getPrice: function () {\n      return new Error('抽象方法不能调用')\n    },\n    getSpeed: function () {\n      return new Error('抽象方法不能调用')\n    }\n  }\n\n  // 抽象工厂方法\n  var VehicleFactory = function (subType, superType) {\n    if (typeof VehicleFactory[superType] === 'function') {\n      // noinspection JSAnnotator\n      function F () {\n      }\n\n      F.prototype = new VehicleFactory[superType]()\n      subType.constructor = subType\n      // 子类原型继承父类\n      subType.prototype = new F()\n    } else {\n      throw new Error('未创建该抽象对象')\n    }\n  }\n\n  VehicleFactory.Car = function () {\n    this.type = 'car'\n  }\n\n  VehicleFactory.Car.prototype = {\n    getPrice: function () {\n      return new Error('抽象方法不能调用')\n    },\n    getSpeed: function () {\n      return new Error('抽象方法不能调用')\n    }\n  }\n\n  VehicleFactory.Bus = function () {\n    this.type = 'bus'\n  }\n\n  VehicleFactory.Bus.prototype = {\n    getPrice: function () {\n      return new Error('抽象方法不能调用')\n    },\n    getSpeed: function () {\n      return new Error('抽象方法不能调用')\n    }\n  }\n\n  VehicleFactory.Truck = function () {\n    this.type = 'truck'\n  }\n\n  VehicleFactory.Truck.prototype = {\n    getPrice: function () {\n      return new Error('抽象方法不能调用')\n    },\n    getSpeed: function () {\n      return new Error('抽象方法不能调用')\n    }\n  }\n\n  var BMW = function (price, speed) {\n    this.price = price\n    this.speed = speed\n  }\n\n  VehicleFactory(BMW, 'car')\n\n  BMW.prototype.getPrice = function () {\n    return this.price\n  }\n\n  BMW.prototype.getSpeed = function () {\n    return this.speed\n  }\n\n}(this)\n```","source":"_posts/2017/08/js设计模式笔记-抽象工厂模式.md","raw":"---\ntitle: js设计模式笔记--抽象工厂模式\ndate: 2017-08-18 15:35:43\ntags:\n  - 设计模式\n  - js基础\n---\n\n## 抽象工厂模式\n1. 抽象类：声明但是不能使用的类\n2. 创造一个通用的大类，通过这个类去创建一系列抽象类，让子类去继承父类定义的但不能使用的方法,子类然后去实现这个抽象的方法\n```flow js\n~function (global) {\n  'use strict'\n  var Car = function () {\n  }\n  Car.prototype = {\n    getPrice: function () {\n      return new Error('抽象方法不能调用')\n    },\n    getSpeed: function () {\n      return new Error('抽象方法不能调用')\n    }\n  }\n\n  // 抽象工厂方法\n  var VehicleFactory = function (subType, superType) {\n    if (typeof VehicleFactory[superType] === 'function') {\n      // noinspection JSAnnotator\n      function F () {\n      }\n\n      F.prototype = new VehicleFactory[superType]()\n      subType.constructor = subType\n      // 子类原型继承父类\n      subType.prototype = new F()\n    } else {\n      throw new Error('未创建该抽象对象')\n    }\n  }\n\n  VehicleFactory.Car = function () {\n    this.type = 'car'\n  }\n\n  VehicleFactory.Car.prototype = {\n    getPrice: function () {\n      return new Error('抽象方法不能调用')\n    },\n    getSpeed: function () {\n      return new Error('抽象方法不能调用')\n    }\n  }\n\n  VehicleFactory.Bus = function () {\n    this.type = 'bus'\n  }\n\n  VehicleFactory.Bus.prototype = {\n    getPrice: function () {\n      return new Error('抽象方法不能调用')\n    },\n    getSpeed: function () {\n      return new Error('抽象方法不能调用')\n    }\n  }\n\n  VehicleFactory.Truck = function () {\n    this.type = 'truck'\n  }\n\n  VehicleFactory.Truck.prototype = {\n    getPrice: function () {\n      return new Error('抽象方法不能调用')\n    },\n    getSpeed: function () {\n      return new Error('抽象方法不能调用')\n    }\n  }\n\n  var BMW = function (price, speed) {\n    this.price = price\n    this.speed = speed\n  }\n\n  VehicleFactory(BMW, 'car')\n\n  BMW.prototype.getPrice = function () {\n    return this.price\n  }\n\n  BMW.prototype.getSpeed = function () {\n    return this.speed\n  }\n\n}(this)\n```","slug":"js设计模式笔记-抽象工厂模式","published":1,"updated":"2017-08-18T07:36:38.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5ebaf001in8v3qxivxxle","content":"<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><ol>\n<li>抽象类：声明但是不能使用的类</li>\n<li>创造一个通用的大类，通过这个类去创建一系列抽象类，让子类去继承父类定义的但不能使用的方法,子类然后去实现这个抽象的方法<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\">~function (global) &#123;</div><div class=\"line\">  &apos;use strict&apos;</div><div class=\"line\">  var Car = function () &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">  Car.prototype = &#123;</div><div class=\"line\">    getPrice: function () &#123;</div><div class=\"line\">      return new Error(&apos;抽象方法不能调用&apos;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getSpeed: function () &#123;</div><div class=\"line\">      return new Error(&apos;抽象方法不能调用&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // 抽象工厂方法</div><div class=\"line\">  var VehicleFactory = function (subType, superType) &#123;</div><div class=\"line\">    if (typeof VehicleFactory[superType] === &apos;function&apos;) &#123;</div><div class=\"line\">      // noinspection JSAnnotator</div><div class=\"line\">      function F () &#123;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      F.prototype = new VehicleFactory[superType]()</div><div class=\"line\">      subType.constructor = subType</div><div class=\"line\">      // 子类原型继承父类</div><div class=\"line\">      subType.prototype = new F()</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      throw new Error(&apos;未创建该抽象对象&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Car = function () &#123;</div><div class=\"line\">    this.type = &apos;car&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Car.prototype = &#123;</div><div class=\"line\">    getPrice: function () &#123;</div><div class=\"line\">      return new Error(&apos;抽象方法不能调用&apos;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getSpeed: function () &#123;</div><div class=\"line\">      return new Error(&apos;抽象方法不能调用&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Bus = function () &#123;</div><div class=\"line\">    this.type = &apos;bus&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Bus.prototype = &#123;</div><div class=\"line\">    getPrice: function () &#123;</div><div class=\"line\">      return new Error(&apos;抽象方法不能调用&apos;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getSpeed: function () &#123;</div><div class=\"line\">      return new Error(&apos;抽象方法不能调用&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Truck = function () &#123;</div><div class=\"line\">    this.type = &apos;truck&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Truck.prototype = &#123;</div><div class=\"line\">    getPrice: function () &#123;</div><div class=\"line\">      return new Error(&apos;抽象方法不能调用&apos;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getSpeed: function () &#123;</div><div class=\"line\">      return new Error(&apos;抽象方法不能调用&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var BMW = function (price, speed) &#123;</div><div class=\"line\">    this.price = price</div><div class=\"line\">    this.speed = speed</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory(BMW, &apos;car&apos;)</div><div class=\"line\"></div><div class=\"line\">  BMW.prototype.getPrice = function () &#123;</div><div class=\"line\">    return this.price</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  BMW.prototype.getSpeed = function () &#123;</div><div class=\"line\">    return this.speed</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;(this)</div></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><ol>\n<li>抽象类：声明但是不能使用的类</li>\n<li>创造一个通用的大类，通过这个类去创建一系列抽象类，让子类去继承父类定义的但不能使用的方法,子类然后去实现这个抽象的方法<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\">~function (global) &#123;</div><div class=\"line\">  &apos;use strict&apos;</div><div class=\"line\">  var Car = function () &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">  Car.prototype = &#123;</div><div class=\"line\">    getPrice: function () &#123;</div><div class=\"line\">      return new Error(&apos;抽象方法不能调用&apos;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getSpeed: function () &#123;</div><div class=\"line\">      return new Error(&apos;抽象方法不能调用&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // 抽象工厂方法</div><div class=\"line\">  var VehicleFactory = function (subType, superType) &#123;</div><div class=\"line\">    if (typeof VehicleFactory[superType] === &apos;function&apos;) &#123;</div><div class=\"line\">      // noinspection JSAnnotator</div><div class=\"line\">      function F () &#123;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      F.prototype = new VehicleFactory[superType]()</div><div class=\"line\">      subType.constructor = subType</div><div class=\"line\">      // 子类原型继承父类</div><div class=\"line\">      subType.prototype = new F()</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      throw new Error(&apos;未创建该抽象对象&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Car = function () &#123;</div><div class=\"line\">    this.type = &apos;car&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Car.prototype = &#123;</div><div class=\"line\">    getPrice: function () &#123;</div><div class=\"line\">      return new Error(&apos;抽象方法不能调用&apos;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getSpeed: function () &#123;</div><div class=\"line\">      return new Error(&apos;抽象方法不能调用&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Bus = function () &#123;</div><div class=\"line\">    this.type = &apos;bus&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Bus.prototype = &#123;</div><div class=\"line\">    getPrice: function () &#123;</div><div class=\"line\">      return new Error(&apos;抽象方法不能调用&apos;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getSpeed: function () &#123;</div><div class=\"line\">      return new Error(&apos;抽象方法不能调用&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Truck = function () &#123;</div><div class=\"line\">    this.type = &apos;truck&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory.Truck.prototype = &#123;</div><div class=\"line\">    getPrice: function () &#123;</div><div class=\"line\">      return new Error(&apos;抽象方法不能调用&apos;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getSpeed: function () &#123;</div><div class=\"line\">      return new Error(&apos;抽象方法不能调用&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var BMW = function (price, speed) &#123;</div><div class=\"line\">    this.price = price</div><div class=\"line\">    this.speed = speed</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  VehicleFactory(BMW, &apos;car&apos;)</div><div class=\"line\"></div><div class=\"line\">  BMW.prototype.getPrice = function () &#123;</div><div class=\"line\">    return this.price</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  BMW.prototype.getSpeed = function () &#123;</div><div class=\"line\">    return this.speed</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;(this)</div></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"js设计模式笔记--装饰者模式","date":"2017-08-18T07:44:41.000Z","_content":"##装饰者模式\n* 不改变原对象的基础上，通过添加属性或方法使原对象满足要求\n```flow js\n'use strict'\n// 装饰者\nvar decorator = (function () {\n  return function (input, fn) {\n    // 获取事件源\n    var input = document.getElementById(input)\n    if (typeof input.onclick === 'function') {\n      // 将之前的存起来，那之前有很多怎么办\n      var old = input.onclick\n      input.onclick = function () {\n        old()\n        // 看见吗就是执行了之前的函数，顺便加了个回调\n        fn()\n      }\n    } else {\n      input.onclick = fn\n    }\n    // do something\n\n  }\n}())\n\ndocument.getElementById('btn').onclick = function() {\n  console.log('fuck')\n}\n\ndecorator('btn', function() {\n  console.log('just go on')\n})\n```","source":"_posts/2017/08/js设计模式笔记-装饰者模式.md","raw":"---\ntitle: js设计模式笔记--装饰者模式\ndate: 2017-08-18 15:44:41\ntags:\n  - 设计模式\n  - js基础\n---\n##装饰者模式\n* 不改变原对象的基础上，通过添加属性或方法使原对象满足要求\n```flow js\n'use strict'\n// 装饰者\nvar decorator = (function () {\n  return function (input, fn) {\n    // 获取事件源\n    var input = document.getElementById(input)\n    if (typeof input.onclick === 'function') {\n      // 将之前的存起来，那之前有很多怎么办\n      var old = input.onclick\n      input.onclick = function () {\n        old()\n        // 看见吗就是执行了之前的函数，顺便加了个回调\n        fn()\n      }\n    } else {\n      input.onclick = fn\n    }\n    // do something\n\n  }\n}())\n\ndocument.getElementById('btn').onclick = function() {\n  console.log('fuck')\n}\n\ndecorator('btn', function() {\n  console.log('just go on')\n})\n```","slug":"js设计模式笔记-装饰者模式","published":1,"updated":"2017-08-18T07:52:38.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5ebai001jn8v3x7m4wr3k","content":"<p>##装饰者模式</p>\n<ul>\n<li>不改变原对象的基础上，通过添加属性或方法使原对象满足要求<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\">// 装饰者</div><div class=\"line\">var decorator = (function () &#123;</div><div class=\"line\">  return function (input, fn) &#123;</div><div class=\"line\">    // 获取事件源</div><div class=\"line\">    var input = document.getElementById(input)</div><div class=\"line\">    if (typeof input.onclick === &apos;function&apos;) &#123;</div><div class=\"line\">      // 将之前的存起来，那之前有很多怎么办</div><div class=\"line\">      var old = input.onclick</div><div class=\"line\">      input.onclick = function () &#123;</div><div class=\"line\">        old()</div><div class=\"line\">        // 看见吗就是执行了之前的函数，顺便加了个回调</div><div class=\"line\">        fn()</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      input.onclick = fn</div><div class=\"line\">    &#125;</div><div class=\"line\">    // do something</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;())</div><div class=\"line\"></div><div class=\"line\">document.getElementById(&apos;btn&apos;).onclick = function() &#123;</div><div class=\"line\">  console.log(&apos;fuck&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">decorator(&apos;btn&apos;, function() &#123;</div><div class=\"line\">  console.log(&apos;just go on&apos;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>##装饰者模式</p>\n<ul>\n<li>不改变原对象的基础上，通过添加属性或方法使原对象满足要求<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\">// 装饰者</div><div class=\"line\">var decorator = (function () &#123;</div><div class=\"line\">  return function (input, fn) &#123;</div><div class=\"line\">    // 获取事件源</div><div class=\"line\">    var input = document.getElementById(input)</div><div class=\"line\">    if (typeof input.onclick === &apos;function&apos;) &#123;</div><div class=\"line\">      // 将之前的存起来，那之前有很多怎么办</div><div class=\"line\">      var old = input.onclick</div><div class=\"line\">      input.onclick = function () &#123;</div><div class=\"line\">        old()</div><div class=\"line\">        // 看见吗就是执行了之前的函数，顺便加了个回调</div><div class=\"line\">        fn()</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      input.onclick = fn</div><div class=\"line\">    &#125;</div><div class=\"line\">    // do something</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;())</div><div class=\"line\"></div><div class=\"line\">document.getElementById(&apos;btn&apos;).onclick = function() &#123;</div><div class=\"line\">  console.log(&apos;fuck&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">decorator(&apos;btn&apos;, function() &#123;</div><div class=\"line\">  console.log(&apos;just go on&apos;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"说说HTTP缓存","date":"2017-08-18T01:38:17.000Z","_content":"\n## 浏览器缓存\n### 什么是浏览器缓存 \n用户访问页面的时候，对于某些资源，会将其保存在客户端。在下一次访问的时候，会将缓存从客户端拿出来，减少HTTP请求，提高用户体验。\n\n### 浏览器缓存是什么样子的？\n\n访问github.com，看下资源文件的报文\n<!-- more -->\n\n![github图片](github.png)  \n可以看到报文里面有cache-control，Expires,Last-Modified这样的字段，这种文件就是从浏览器缓存中拿出来的，可以看出速度特别快  \n![github请求图片](githubRequest.png)\n\n### 是什么控制着浏览器对文件的缓存与否？\n#### Cache-Control:\n1. **max-age** 设置缓存时间，单位为秒，这个时间是指缓存的时长，即在这个时间内的这个资源都会使用这个版本，服务器文件变化了浏览器也不会改变。\n2. **public** 如果没有指定，则缺省值是public，指定是浏览器或者任何web的代理中间trunk都可以进行文件的缓存，比如CDN也能缓存\n3. **private** 只有用户浏览器可以缓存，这样CDN中继就缓存不到了\n4. **no-cache** 表明必须要和服务器进行确认资源是否更改，如果更改了，就会返回最新的，在浏览器NetWork界面激活Disable cache，或者使用ctrl+f5强制刷新，浏览器都会给请求加上**Cache-Control:no-cache;Pragma:no-cache**\n5. **no-store** 绝对性的禁止掉缓存，比no-cache强势一百倍，直接从服务器拉取资源\n6. 其他的都不太常用，就不赘述了\n\n#### Expires\n**Expires**是有效期的意思，顾名思义就是设置资源的有效时间，（``Expires:Sat, 26 Aug 2017 10:24:11 GMT``即只保存到2017-08-26 10:24:11,过时过期），和**max-age**有点类似，但是没有**Cache-Control**的优先级高，同时出现**Cache-Control:max-age**会覆盖掉**Expires**。Expires需要和last-modified结合使用\n\n#### Last-modified\n&nbsp;&nbsp;&nbsp;&nbsp;服务器资源的最后修改时间，需要cache-control共用。浏览器第一请求时，会返回``Last-Modified:Wed, 21 Jun 2017 10:03:54 GMT``，指服务端最后一次修改文件的时间。浏览器读取后存到这个信息，在下次请求时会给请求头加上``If-Modified-Since:Wed, 21 Jun 2017 10:03:54 GMT``，用这个值去和服务端对比，没有修改就返回304，如果修改过就返回最新资源。\n\n#### ETag\n&nbsp;&nbsp;&nbsp;&nbsp;由服务端根据内容生成的一段hash，浏览器会拿这段hash和服务端进行验证资源是否修改（``ETag:\"7c9570c4fd0d21:0\"``）。请求时，浏览器会加上这段ETag，不过请求的字段叫做``If-None-Match:W/\"7c9570c4fd0d21:0\"``这就是ETag  \n使用ETag可以解决Last-modified存在的一些问题：\n   1. 某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新 \n   2. 如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒 \n   3. 一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。\n\n### 同样是200 from disk cache 和 from memory cache 区别\n![disk](disk.png)  \n可以看到**from memory cache**是不需要时间的0ms，而memory需要时间。  \n哈哈很简单，就是一个存在disk（磁盘中），一个存在memory(内存)中，存在磁盘需要读取时间。  \n图片之类资源较大，存于磁盘，js.css文件较小也比较重要，存于内存，参考链接[memoryCache和diskCache流程详解](http://blog.csdn.net/m632587166/article/details/50732205?locationNum=14)\n\n### 都特么几乎是后台控制的缓存，那前端呢？\n1. html页面配置no-cache,html ``<meta>``标签中有个叫做http-equiv的属性，就是设置http头信息，关键字等等\n    1. ``<meta http-equiv=\"cache-control\" content=\"no-cache\">``设置no-cache\n    2. ``<meta http-equiv=\"expires\" content=\"0\">`` 设置Expires为0\n    3. ...\n2. 对于js或者css文我们一般会选择进行缓存，如果要更新的话，只需要将引入的js文件写上版本号\n```html\n<script src=\"xxx?v=0.2\"></script>\n```\n最好的方式是给文件加上hash或md5值，对于改变了的文件更改hash，这样就能更新网站了。webpack,gulp等工具都能实现。thx\n\n## 博客中比较流行的缓存流程图\n![liucheng.png](liucheng.png)  \n\n**cache-control**  \n![cache-control.png](cache-control.png)\n","source":"_posts/2017/08/说说HTTP缓存.md","raw":"---\ntitle: 说说HTTP缓存\ndate: 2017-08-18 09:38:17\ntags:\n  - http\n  - 缓存\n---\n\n## 浏览器缓存\n### 什么是浏览器缓存 \n用户访问页面的时候，对于某些资源，会将其保存在客户端。在下一次访问的时候，会将缓存从客户端拿出来，减少HTTP请求，提高用户体验。\n\n### 浏览器缓存是什么样子的？\n\n访问github.com，看下资源文件的报文\n<!-- more -->\n\n![github图片](github.png)  \n可以看到报文里面有cache-control，Expires,Last-Modified这样的字段，这种文件就是从浏览器缓存中拿出来的，可以看出速度特别快  \n![github请求图片](githubRequest.png)\n\n### 是什么控制着浏览器对文件的缓存与否？\n#### Cache-Control:\n1. **max-age** 设置缓存时间，单位为秒，这个时间是指缓存的时长，即在这个时间内的这个资源都会使用这个版本，服务器文件变化了浏览器也不会改变。\n2. **public** 如果没有指定，则缺省值是public，指定是浏览器或者任何web的代理中间trunk都可以进行文件的缓存，比如CDN也能缓存\n3. **private** 只有用户浏览器可以缓存，这样CDN中继就缓存不到了\n4. **no-cache** 表明必须要和服务器进行确认资源是否更改，如果更改了，就会返回最新的，在浏览器NetWork界面激活Disable cache，或者使用ctrl+f5强制刷新，浏览器都会给请求加上**Cache-Control:no-cache;Pragma:no-cache**\n5. **no-store** 绝对性的禁止掉缓存，比no-cache强势一百倍，直接从服务器拉取资源\n6. 其他的都不太常用，就不赘述了\n\n#### Expires\n**Expires**是有效期的意思，顾名思义就是设置资源的有效时间，（``Expires:Sat, 26 Aug 2017 10:24:11 GMT``即只保存到2017-08-26 10:24:11,过时过期），和**max-age**有点类似，但是没有**Cache-Control**的优先级高，同时出现**Cache-Control:max-age**会覆盖掉**Expires**。Expires需要和last-modified结合使用\n\n#### Last-modified\n&nbsp;&nbsp;&nbsp;&nbsp;服务器资源的最后修改时间，需要cache-control共用。浏览器第一请求时，会返回``Last-Modified:Wed, 21 Jun 2017 10:03:54 GMT``，指服务端最后一次修改文件的时间。浏览器读取后存到这个信息，在下次请求时会给请求头加上``If-Modified-Since:Wed, 21 Jun 2017 10:03:54 GMT``，用这个值去和服务端对比，没有修改就返回304，如果修改过就返回最新资源。\n\n#### ETag\n&nbsp;&nbsp;&nbsp;&nbsp;由服务端根据内容生成的一段hash，浏览器会拿这段hash和服务端进行验证资源是否修改（``ETag:\"7c9570c4fd0d21:0\"``）。请求时，浏览器会加上这段ETag，不过请求的字段叫做``If-None-Match:W/\"7c9570c4fd0d21:0\"``这就是ETag  \n使用ETag可以解决Last-modified存在的一些问题：\n   1. 某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新 \n   2. 如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒 \n   3. 一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。\n\n### 同样是200 from disk cache 和 from memory cache 区别\n![disk](disk.png)  \n可以看到**from memory cache**是不需要时间的0ms，而memory需要时间。  \n哈哈很简单，就是一个存在disk（磁盘中），一个存在memory(内存)中，存在磁盘需要读取时间。  \n图片之类资源较大，存于磁盘，js.css文件较小也比较重要，存于内存，参考链接[memoryCache和diskCache流程详解](http://blog.csdn.net/m632587166/article/details/50732205?locationNum=14)\n\n### 都特么几乎是后台控制的缓存，那前端呢？\n1. html页面配置no-cache,html ``<meta>``标签中有个叫做http-equiv的属性，就是设置http头信息，关键字等等\n    1. ``<meta http-equiv=\"cache-control\" content=\"no-cache\">``设置no-cache\n    2. ``<meta http-equiv=\"expires\" content=\"0\">`` 设置Expires为0\n    3. ...\n2. 对于js或者css文我们一般会选择进行缓存，如果要更新的话，只需要将引入的js文件写上版本号\n```html\n<script src=\"xxx?v=0.2\"></script>\n```\n最好的方式是给文件加上hash或md5值，对于改变了的文件更改hash，这样就能更新网站了。webpack,gulp等工具都能实现。thx\n\n## 博客中比较流行的缓存流程图\n![liucheng.png](liucheng.png)  \n\n**cache-control**  \n![cache-control.png](cache-control.png)\n","slug":"说说HTTP缓存","published":1,"updated":"2017-08-18T05:38:46.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5ebb9001ln8v3g32gneb0","content":"<h2 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h2><h3 id=\"什么是浏览器缓存\"><a href=\"#什么是浏览器缓存\" class=\"headerlink\" title=\"什么是浏览器缓存\"></a>什么是浏览器缓存</h3><p>用户访问页面的时候，对于某些资源，会将其保存在客户端。在下一次访问的时候，会将缓存从客户端拿出来，减少HTTP请求，提高用户体验。</p>\n<h3 id=\"浏览器缓存是什么样子的？\"><a href=\"#浏览器缓存是什么样子的？\" class=\"headerlink\" title=\"浏览器缓存是什么样子的？\"></a>浏览器缓存是什么样子的？</h3><p>访问github.com，看下资源文件的报文<br><a id=\"more\"></a></p>\n<p><img src=\"/2017/08/18/说说HTTP缓存/github.png\" alt=\"github图片\"><br>可以看到报文里面有cache-control，Expires,Last-Modified这样的字段，这种文件就是从浏览器缓存中拿出来的，可以看出速度特别快<br><img src=\"/2017/08/18/说说HTTP缓存/githubRequest.png\" alt=\"github请求图片\"></p>\n<h3 id=\"是什么控制着浏览器对文件的缓存与否？\"><a href=\"#是什么控制着浏览器对文件的缓存与否？\" class=\"headerlink\" title=\"是什么控制着浏览器对文件的缓存与否？\"></a>是什么控制着浏览器对文件的缓存与否？</h3><h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control:\"></a>Cache-Control:</h4><ol>\n<li><strong>max-age</strong> 设置缓存时间，单位为秒，这个时间是指缓存的时长，即在这个时间内的这个资源都会使用这个版本，服务器文件变化了浏览器也不会改变。</li>\n<li><strong>public</strong> 如果没有指定，则缺省值是public，指定是浏览器或者任何web的代理中间trunk都可以进行文件的缓存，比如CDN也能缓存</li>\n<li><strong>private</strong> 只有用户浏览器可以缓存，这样CDN中继就缓存不到了</li>\n<li><strong>no-cache</strong> 表明必须要和服务器进行确认资源是否更改，如果更改了，就会返回最新的，在浏览器NetWork界面激活Disable cache，或者使用ctrl+f5强制刷新，浏览器都会给请求加上<strong>Cache-Control:no-cache;Pragma:no-cache</strong></li>\n<li><strong>no-store</strong> 绝对性的禁止掉缓存，比no-cache强势一百倍，直接从服务器拉取资源</li>\n<li>其他的都不太常用，就不赘述了</li>\n</ol>\n<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4><p><strong>Expires</strong>是有效期的意思，顾名思义就是设置资源的有效时间，（<code>Expires:Sat, 26 Aug 2017 10:24:11 GMT</code>即只保存到2017-08-26 10:24:11,过时过期），和<strong>max-age</strong>有点类似，但是没有<strong>Cache-Control</strong>的优先级高，同时出现<strong>Cache-Control:max-age</strong>会覆盖掉<strong>Expires</strong>。Expires需要和last-modified结合使用</p>\n<h4 id=\"Last-modified\"><a href=\"#Last-modified\" class=\"headerlink\" title=\"Last-modified\"></a>Last-modified</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;服务器资源的最后修改时间，需要cache-control共用。浏览器第一请求时，会返回<code>Last-Modified:Wed, 21 Jun 2017 10:03:54 GMT</code>，指服务端最后一次修改文件的时间。浏览器读取后存到这个信息，在下次请求时会给请求头加上<code>If-Modified-Since:Wed, 21 Jun 2017 10:03:54 GMT</code>，用这个值去和服务端对比，没有修改就返回304，如果修改过就返回最新资源。</p>\n<h4 id=\"ETag\"><a href=\"#ETag\" class=\"headerlink\" title=\"ETag\"></a>ETag</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;由服务端根据内容生成的一段hash，浏览器会拿这段hash和服务端进行验证资源是否修改（<code>ETag:&quot;7c9570c4fd0d21:0&quot;</code>）。请求时，浏览器会加上这段ETag，不过请求的字段叫做<code>If-None-Match:W/&quot;7c9570c4fd0d21:0&quot;</code>这就是ETag<br>使用ETag可以解决Last-modified存在的一些问题：</p>\n<ol>\n<li>某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新 </li>\n<li>如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒 </li>\n<li>一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。</li>\n</ol>\n<h3 id=\"同样是200-from-disk-cache-和-from-memory-cache-区别\"><a href=\"#同样是200-from-disk-cache-和-from-memory-cache-区别\" class=\"headerlink\" title=\"同样是200 from disk cache 和 from memory cache 区别\"></a>同样是200 from disk cache 和 from memory cache 区别</h3><p><img src=\"/2017/08/18/说说HTTP缓存/disk.png\" alt=\"disk\"><br>可以看到<strong>from memory cache</strong>是不需要时间的0ms，而memory需要时间。<br>哈哈很简单，就是一个存在disk（磁盘中），一个存在memory(内存)中，存在磁盘需要读取时间。<br>图片之类资源较大，存于磁盘，js.css文件较小也比较重要，存于内存，参考链接<a href=\"http://blog.csdn.net/m632587166/article/details/50732205?locationNum=14\" target=\"_blank\" rel=\"external\">memoryCache和diskCache流程详解</a></p>\n<h3 id=\"都特么几乎是后台控制的缓存，那前端呢？\"><a href=\"#都特么几乎是后台控制的缓存，那前端呢？\" class=\"headerlink\" title=\"都特么几乎是后台控制的缓存，那前端呢？\"></a>都特么几乎是后台控制的缓存，那前端呢？</h3><ol>\n<li>html页面配置no-cache,html <code>&lt;meta&gt;</code>标签中有个叫做http-equiv的属性，就是设置http头信息，关键字等等<ol>\n<li><code>&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;</code>设置no-cache</li>\n<li><code>&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;</code> 设置Expires为0</li>\n<li>…</li>\n</ol>\n</li>\n<li>对于js或者css文我们一般会选择进行缓存，如果要更新的话，只需要将引入的js文件写上版本号<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx?v=0.2\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>最好的方式是给文件加上hash或md5值，对于改变了的文件更改hash，这样就能更新网站了。webpack,gulp等工具都能实现。thx</p>\n<h2 id=\"博客中比较流行的缓存流程图\"><a href=\"#博客中比较流行的缓存流程图\" class=\"headerlink\" title=\"博客中比较流行的缓存流程图\"></a>博客中比较流行的缓存流程图</h2><p><img src=\"/2017/08/18/说说HTTP缓存/liucheng.png\" alt=\"liucheng.png\">  </p>\n<p><strong>cache-control</strong><br><img src=\"/2017/08/18/说说HTTP缓存/cache-control.png\" alt=\"cache-control.png\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h2><h3 id=\"什么是浏览器缓存\"><a href=\"#什么是浏览器缓存\" class=\"headerlink\" title=\"什么是浏览器缓存\"></a>什么是浏览器缓存</h3><p>用户访问页面的时候，对于某些资源，会将其保存在客户端。在下一次访问的时候，会将缓存从客户端拿出来，减少HTTP请求，提高用户体验。</p>\n<h3 id=\"浏览器缓存是什么样子的？\"><a href=\"#浏览器缓存是什么样子的？\" class=\"headerlink\" title=\"浏览器缓存是什么样子的？\"></a>浏览器缓存是什么样子的？</h3><p>访问github.com，看下资源文件的报文<br></p>","more":"<p></p>\n<p><img src=\"/2017/08/18/说说HTTP缓存/github.png\" alt=\"github图片\"><br>可以看到报文里面有cache-control，Expires,Last-Modified这样的字段，这种文件就是从浏览器缓存中拿出来的，可以看出速度特别快<br><img src=\"/2017/08/18/说说HTTP缓存/githubRequest.png\" alt=\"github请求图片\"></p>\n<h3 id=\"是什么控制着浏览器对文件的缓存与否？\"><a href=\"#是什么控制着浏览器对文件的缓存与否？\" class=\"headerlink\" title=\"是什么控制着浏览器对文件的缓存与否？\"></a>是什么控制着浏览器对文件的缓存与否？</h3><h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control:\"></a>Cache-Control:</h4><ol>\n<li><strong>max-age</strong> 设置缓存时间，单位为秒，这个时间是指缓存的时长，即在这个时间内的这个资源都会使用这个版本，服务器文件变化了浏览器也不会改变。</li>\n<li><strong>public</strong> 如果没有指定，则缺省值是public，指定是浏览器或者任何web的代理中间trunk都可以进行文件的缓存，比如CDN也能缓存</li>\n<li><strong>private</strong> 只有用户浏览器可以缓存，这样CDN中继就缓存不到了</li>\n<li><strong>no-cache</strong> 表明必须要和服务器进行确认资源是否更改，如果更改了，就会返回最新的，在浏览器NetWork界面激活Disable cache，或者使用ctrl+f5强制刷新，浏览器都会给请求加上<strong>Cache-Control:no-cache;Pragma:no-cache</strong></li>\n<li><strong>no-store</strong> 绝对性的禁止掉缓存，比no-cache强势一百倍，直接从服务器拉取资源</li>\n<li>其他的都不太常用，就不赘述了</li>\n</ol>\n<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4><p><strong>Expires</strong>是有效期的意思，顾名思义就是设置资源的有效时间，（<code>Expires:Sat, 26 Aug 2017 10:24:11 GMT</code>即只保存到2017-08-26 10:24:11,过时过期），和<strong>max-age</strong>有点类似，但是没有<strong>Cache-Control</strong>的优先级高，同时出现<strong>Cache-Control:max-age</strong>会覆盖掉<strong>Expires</strong>。Expires需要和last-modified结合使用</p>\n<h4 id=\"Last-modified\"><a href=\"#Last-modified\" class=\"headerlink\" title=\"Last-modified\"></a>Last-modified</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;服务器资源的最后修改时间，需要cache-control共用。浏览器第一请求时，会返回<code>Last-Modified:Wed, 21 Jun 2017 10:03:54 GMT</code>，指服务端最后一次修改文件的时间。浏览器读取后存到这个信息，在下次请求时会给请求头加上<code>If-Modified-Since:Wed, 21 Jun 2017 10:03:54 GMT</code>，用这个值去和服务端对比，没有修改就返回304，如果修改过就返回最新资源。</p>\n<h4 id=\"ETag\"><a href=\"#ETag\" class=\"headerlink\" title=\"ETag\"></a>ETag</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;由服务端根据内容生成的一段hash，浏览器会拿这段hash和服务端进行验证资源是否修改（<code>ETag:&quot;7c9570c4fd0d21:0&quot;</code>）。请求时，浏览器会加上这段ETag，不过请求的字段叫做<code>If-None-Match:W/&quot;7c9570c4fd0d21:0&quot;</code>这就是ETag<br>使用ETag可以解决Last-modified存在的一些问题：</p>\n<ol>\n<li>某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新 </li>\n<li>如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒 </li>\n<li>一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。</li>\n</ol>\n<h3 id=\"同样是200-from-disk-cache-和-from-memory-cache-区别\"><a href=\"#同样是200-from-disk-cache-和-from-memory-cache-区别\" class=\"headerlink\" title=\"同样是200 from disk cache 和 from memory cache 区别\"></a>同样是200 from disk cache 和 from memory cache 区别</h3><p><img src=\"/2017/08/18/说说HTTP缓存/disk.png\" alt=\"disk\"><br>可以看到<strong>from memory cache</strong>是不需要时间的0ms，而memory需要时间。<br>哈哈很简单，就是一个存在disk（磁盘中），一个存在memory(内存)中，存在磁盘需要读取时间。<br>图片之类资源较大，存于磁盘，js.css文件较小也比较重要，存于内存，参考链接<a href=\"http://blog.csdn.net/m632587166/article/details/50732205?locationNum=14\">memoryCache和diskCache流程详解</a></p>\n<h3 id=\"都特么几乎是后台控制的缓存，那前端呢？\"><a href=\"#都特么几乎是后台控制的缓存，那前端呢？\" class=\"headerlink\" title=\"都特么几乎是后台控制的缓存，那前端呢？\"></a>都特么几乎是后台控制的缓存，那前端呢？</h3><ol>\n<li>html页面配置no-cache,html <code>&lt;meta&gt;</code>标签中有个叫做http-equiv的属性，就是设置http头信息，关键字等等<ol>\n<li><code>&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;</code>设置no-cache</li>\n<li><code>&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;</code> 设置Expires为0</li>\n<li>…</li>\n</ol>\n</li>\n<li>对于js或者css文我们一般会选择进行缓存，如果要更新的话，只需要将引入的js文件写上版本号<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx?v=0.2\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>最好的方式是给文件加上hash或md5值，对于改变了的文件更改hash，这样就能更新网站了。webpack,gulp等工具都能实现。thx</p>\n<h2 id=\"博客中比较流行的缓存流程图\"><a href=\"#博客中比较流行的缓存流程图\" class=\"headerlink\" title=\"博客中比较流行的缓存流程图\"></a>博客中比较流行的缓存流程图</h2><p><img src=\"/2017/08/18/说说HTTP缓存/liucheng.png\" alt=\"liucheng.png\">  </p>\n<p><strong>cache-control</strong><br><img src=\"/2017/08/18/说说HTTP缓存/cache-control.png\" alt=\"cache-control.png\"></p>"},{"title":"js设计模式笔记--简介","date":"2017-08-18T07:27:18.000Z","_content":"\n##创建函数比较多的时候应该加上命名空间\n1. 可以写在一个对象里面，也可以用构造函数的方式\n2. 链式调用就是返回一个拥有某个方法的对象\n```flow js\n'use strict'\n// 1. 真假对象链式调用\nvar CheckObject = function () {\n  var o = {\n    checkName: function () {\n      console.log('name')\n      return o\n    },\n    checkEmail: function () {\n      console.log('email')\n      return o\n    },\n    checkPassword: function () {\n      console.log('password')\n      return o\n    }\n  }\n  return o\n}\n\nvar checkObject = CheckObject()\ncheckObject.checkName().checkEmail().checkPassword()\n\nconsole.log('-----------------------addMethod-------------------------')\n\n// addMethod添加多个函数\nFunction.prototype.addMethod = function (methods) {\n  Object.keys(methods).forEach((key, index) => {\n    this[key] = methods[key]\n  })\n  return this\n}\n\nvar methods = function () {\n}\nmethods\n  .addMethod({\n    'checkName': function () {\n      console.log('name')\n      return this\n    },\n    'checkPassword': function () {\n      console.log('password')\n      return this\n    }\n  })\n  .addMethod({\n    'checkEmail': function () {\n      console.log('email')\n      return this\n    }\n  })\n\nmethods.checkName().checkPassword().checkEmail()\n```","source":"_posts/2017/08/js设计模式笔记-简介.md","raw":"---\ntitle: js设计模式笔记--简介\ndate: 2017-08-18 15:27:18\ntags:\n  - 设计模式\n  - js基础\n---\n\n##创建函数比较多的时候应该加上命名空间\n1. 可以写在一个对象里面，也可以用构造函数的方式\n2. 链式调用就是返回一个拥有某个方法的对象\n```flow js\n'use strict'\n// 1. 真假对象链式调用\nvar CheckObject = function () {\n  var o = {\n    checkName: function () {\n      console.log('name')\n      return o\n    },\n    checkEmail: function () {\n      console.log('email')\n      return o\n    },\n    checkPassword: function () {\n      console.log('password')\n      return o\n    }\n  }\n  return o\n}\n\nvar checkObject = CheckObject()\ncheckObject.checkName().checkEmail().checkPassword()\n\nconsole.log('-----------------------addMethod-------------------------')\n\n// addMethod添加多个函数\nFunction.prototype.addMethod = function (methods) {\n  Object.keys(methods).forEach((key, index) => {\n    this[key] = methods[key]\n  })\n  return this\n}\n\nvar methods = function () {\n}\nmethods\n  .addMethod({\n    'checkName': function () {\n      console.log('name')\n      return this\n    },\n    'checkPassword': function () {\n      console.log('password')\n      return this\n    }\n  })\n  .addMethod({\n    'checkEmail': function () {\n      console.log('email')\n      return this\n    }\n  })\n\nmethods.checkName().checkPassword().checkEmail()\n```","slug":"js设计模式笔记-简介","published":1,"updated":"2017-08-18T07:29:08.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5ebba001nn8v3eyxk3919","content":"<p>##创建函数比较多的时候应该加上命名空间</p>\n<ol>\n<li>可以写在一个对象里面，也可以用构造函数的方式</li>\n<li>链式调用就是返回一个拥有某个方法的对象<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\">// 1. 真假对象链式调用</div><div class=\"line\">var CheckObject = function () &#123;</div><div class=\"line\">  var o = &#123;</div><div class=\"line\">    checkName: function () &#123;</div><div class=\"line\">      console.log(&apos;name&apos;)</div><div class=\"line\">      return o</div><div class=\"line\">    &#125;,</div><div class=\"line\">    checkEmail: function () &#123;</div><div class=\"line\">      console.log(&apos;email&apos;)</div><div class=\"line\">      return o</div><div class=\"line\">    &#125;,</div><div class=\"line\">    checkPassword: function () &#123;</div><div class=\"line\">      console.log(&apos;password&apos;)</div><div class=\"line\">      return o</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return o</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var checkObject = CheckObject()</div><div class=\"line\">checkObject.checkName().checkEmail().checkPassword()</div><div class=\"line\"></div><div class=\"line\">console.log(&apos;-----------------------addMethod-------------------------&apos;)</div><div class=\"line\"></div><div class=\"line\">// addMethod添加多个函数</div><div class=\"line\">Function.prototype.addMethod = function (methods) &#123;</div><div class=\"line\">  Object.keys(methods).forEach((key, index) =&gt; &#123;</div><div class=\"line\">    this[key] = methods[key]</div><div class=\"line\">  &#125;)</div><div class=\"line\">  return this</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var methods = function () &#123;</div><div class=\"line\">&#125;</div><div class=\"line\">methods</div><div class=\"line\">  .addMethod(&#123;</div><div class=\"line\">    &apos;checkName&apos;: function () &#123;</div><div class=\"line\">      console.log(&apos;name&apos;)</div><div class=\"line\">      return this</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &apos;checkPassword&apos;: function () &#123;</div><div class=\"line\">      console.log(&apos;password&apos;)</div><div class=\"line\">      return this</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .addMethod(&#123;</div><div class=\"line\">    &apos;checkEmail&apos;: function () &#123;</div><div class=\"line\">      console.log(&apos;email&apos;)</div><div class=\"line\">      return this</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">methods.checkName().checkPassword().checkEmail()</div></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>##创建函数比较多的时候应该加上命名空间</p>\n<ol>\n<li>可以写在一个对象里面，也可以用构造函数的方式</li>\n<li>链式调用就是返回一个拥有某个方法的对象<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\">// 1. 真假对象链式调用</div><div class=\"line\">var CheckObject = function () &#123;</div><div class=\"line\">  var o = &#123;</div><div class=\"line\">    checkName: function () &#123;</div><div class=\"line\">      console.log(&apos;name&apos;)</div><div class=\"line\">      return o</div><div class=\"line\">    &#125;,</div><div class=\"line\">    checkEmail: function () &#123;</div><div class=\"line\">      console.log(&apos;email&apos;)</div><div class=\"line\">      return o</div><div class=\"line\">    &#125;,</div><div class=\"line\">    checkPassword: function () &#123;</div><div class=\"line\">      console.log(&apos;password&apos;)</div><div class=\"line\">      return o</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return o</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var checkObject = CheckObject()</div><div class=\"line\">checkObject.checkName().checkEmail().checkPassword()</div><div class=\"line\"></div><div class=\"line\">console.log(&apos;-----------------------addMethod-------------------------&apos;)</div><div class=\"line\"></div><div class=\"line\">// addMethod添加多个函数</div><div class=\"line\">Function.prototype.addMethod = function (methods) &#123;</div><div class=\"line\">  Object.keys(methods).forEach((key, index) =&gt; &#123;</div><div class=\"line\">    this[key] = methods[key]</div><div class=\"line\">  &#125;)</div><div class=\"line\">  return this</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var methods = function () &#123;</div><div class=\"line\">&#125;</div><div class=\"line\">methods</div><div class=\"line\">  .addMethod(&#123;</div><div class=\"line\">    &apos;checkName&apos;: function () &#123;</div><div class=\"line\">      console.log(&apos;name&apos;)</div><div class=\"line\">      return this</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &apos;checkPassword&apos;: function () &#123;</div><div class=\"line\">      console.log(&apos;password&apos;)</div><div class=\"line\">      return this</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .addMethod(&#123;</div><div class=\"line\">    &apos;checkEmail&apos;: function () &#123;</div><div class=\"line\">      console.log(&apos;email&apos;)</div><div class=\"line\">      return this</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">methods.checkName().checkPassword().checkEmail()</div></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"读书整理","date":"2017-08-17T08:10:00.000Z","_content":"## 导言\n总觉得自己看书看的很乱，总结下看过的书和想看的书，避免看重复，最好做下笔记。看完一本及时更新下，读书笔记都会写在[这里](https://github.com/slipkinem/jsTest)。  \n看书总有一种看过了就忘记了，看过了还是不会的感觉，所有看书一定要做好笔记，哪怕记不住，没看懂。将不懂得名词通过搜索引擎查找，哪怕一个词背后有庞大的知识群体，也要硬着头皮看，会有意想不到的收货。读书有一个明显的好处就是可以提高理解能力，读书的时候用心去思考，结合书中的例子将代码一点点敲下来，这是我以后读书要做的事情，之前没做好读书笔记真是太后悔了。keep it real.\n\n\n## 正在看的书籍\n1. javascript权威指南\n2. 《《HTML5 Canvas游戏开发实战》》\n3. webkit技术内幕\n\n## 看过得书籍\n1. angular权威指南\n2. angular2 training\n3. 深入浅出node.js\n4. node.js in action\n5. 架构探险 从零开始写javaweb框架\n6. javascript编码规范\n7. 你不知道的JavaScript第一卷\n8. 一个月悟透javaScript\n9. 图解HTTP协议\n10. jsp&servlet学习笔记\n\n## 想要看的书籍\n1. WEBGL权威指南\n2. C++primary\n\n\n\n","source":"_posts/2017/08/读书整理.md","raw":"---\ntitle: 读书整理\ndate: 2017-08-17 16:10:00\ntags:\n  - 课外学习\n  - javascript\n  - 书籍\n---\n## 导言\n总觉得自己看书看的很乱，总结下看过的书和想看的书，避免看重复，最好做下笔记。看完一本及时更新下，读书笔记都会写在[这里](https://github.com/slipkinem/jsTest)。  \n看书总有一种看过了就忘记了，看过了还是不会的感觉，所有看书一定要做好笔记，哪怕记不住，没看懂。将不懂得名词通过搜索引擎查找，哪怕一个词背后有庞大的知识群体，也要硬着头皮看，会有意想不到的收货。读书有一个明显的好处就是可以提高理解能力，读书的时候用心去思考，结合书中的例子将代码一点点敲下来，这是我以后读书要做的事情，之前没做好读书笔记真是太后悔了。keep it real.\n\n\n## 正在看的书籍\n1. javascript权威指南\n2. 《《HTML5 Canvas游戏开发实战》》\n3. webkit技术内幕\n\n## 看过得书籍\n1. angular权威指南\n2. angular2 training\n3. 深入浅出node.js\n4. node.js in action\n5. 架构探险 从零开始写javaweb框架\n6. javascript编码规范\n7. 你不知道的JavaScript第一卷\n8. 一个月悟透javaScript\n9. 图解HTTP协议\n10. jsp&servlet学习笔记\n\n## 想要看的书籍\n1. WEBGL权威指南\n2. C++primary\n\n\n\n","slug":"读书整理","published":1,"updated":"2017-08-17T08:31:03.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5ebbe001qn8v3ubefztuv","content":"<h2 id=\"导言\"><a href=\"#导言\" class=\"headerlink\" title=\"导言\"></a>导言</h2><p>总觉得自己看书看的很乱，总结下看过的书和想看的书，避免看重复，最好做下笔记。看完一本及时更新下，读书笔记都会写在<a href=\"https://github.com/slipkinem/jsTest\" target=\"_blank\" rel=\"external\">这里</a>。<br>看书总有一种看过了就忘记了，看过了还是不会的感觉，所有看书一定要做好笔记，哪怕记不住，没看懂。将不懂得名词通过搜索引擎查找，哪怕一个词背后有庞大的知识群体，也要硬着头皮看，会有意想不到的收货。读书有一个明显的好处就是可以提高理解能力，读书的时候用心去思考，结合书中的例子将代码一点点敲下来，这是我以后读书要做的事情，之前没做好读书笔记真是太后悔了。keep it real.</p>\n<h2 id=\"正在看的书籍\"><a href=\"#正在看的书籍\" class=\"headerlink\" title=\"正在看的书籍\"></a>正在看的书籍</h2><ol>\n<li>javascript权威指南</li>\n<li>《《HTML5 Canvas游戏开发实战》》</li>\n<li>webkit技术内幕</li>\n</ol>\n<h2 id=\"看过得书籍\"><a href=\"#看过得书籍\" class=\"headerlink\" title=\"看过得书籍\"></a>看过得书籍</h2><ol>\n<li>angular权威指南</li>\n<li>angular2 training</li>\n<li>深入浅出node.js</li>\n<li>node.js in action</li>\n<li>架构探险 从零开始写javaweb框架</li>\n<li>javascript编码规范</li>\n<li>你不知道的JavaScript第一卷</li>\n<li>一个月悟透javaScript</li>\n<li>图解HTTP协议</li>\n<li>jsp&amp;servlet学习笔记</li>\n</ol>\n<h2 id=\"想要看的书籍\"><a href=\"#想要看的书籍\" class=\"headerlink\" title=\"想要看的书籍\"></a>想要看的书籍</h2><ol>\n<li>WEBGL权威指南</li>\n<li>C++primary</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"导言\"><a href=\"#导言\" class=\"headerlink\" title=\"导言\"></a>导言</h2><p>总觉得自己看书看的很乱，总结下看过的书和想看的书，避免看重复，最好做下笔记。看完一本及时更新下，读书笔记都会写在<a href=\"https://github.com/slipkinem/jsTest\">这里</a>。<br>看书总有一种看过了就忘记了，看过了还是不会的感觉，所有看书一定要做好笔记，哪怕记不住，没看懂。将不懂得名词通过搜索引擎查找，哪怕一个词背后有庞大的知识群体，也要硬着头皮看，会有意想不到的收货。读书有一个明显的好处就是可以提高理解能力，读书的时候用心去思考，结合书中的例子将代码一点点敲下来，这是我以后读书要做的事情，之前没做好读书笔记真是太后悔了。keep it real.</p>\n<h2 id=\"正在看的书籍\"><a href=\"#正在看的书籍\" class=\"headerlink\" title=\"正在看的书籍\"></a>正在看的书籍</h2><ol>\n<li>javascript权威指南</li>\n<li>《《HTML5 Canvas游戏开发实战》》</li>\n<li>webkit技术内幕</li>\n</ol>\n<h2 id=\"看过得书籍\"><a href=\"#看过得书籍\" class=\"headerlink\" title=\"看过得书籍\"></a>看过得书籍</h2><ol>\n<li>angular权威指南</li>\n<li>angular2 training</li>\n<li>深入浅出node.js</li>\n<li>node.js in action</li>\n<li>架构探险 从零开始写javaweb框架</li>\n<li>javascript编码规范</li>\n<li>你不知道的JavaScript第一卷</li>\n<li>一个月悟透javaScript</li>\n<li>图解HTTP协议</li>\n<li>jsp&amp;servlet学习笔记</li>\n</ol>\n<h2 id=\"想要看的书籍\"><a href=\"#想要看的书籍\" class=\"headerlink\" title=\"想要看的书籍\"></a>想要看的书籍</h2><ol>\n<li>WEBGL权威指南</li>\n<li>C++primary</li>\n</ol>\n"},{"title":"js设计模式笔记--面向对象","date":"2017-08-18T07:29:39.000Z","_content":"\n##面向对象\n1. 面向对象就是将需要的功能封装为一个对象，这个对象称之为类，台湾翻译为面向物体编程，个人认为比较确切\n2. 面向对象的特征\n  * 封装（就是将私有变量方法封装，高内聚低耦合）\n  * 继承（子类继承父类），即一个类继承另一个类的属性和方法\n  * 多态（根据函数的参数等不一样的状态，构成不一样的方法）\n```flow js\n'use strict'\nlet log = console.log.bind(console)\n\nlog('----------------------封装，主要是封装私有变量-----------------------')\n\nlet Book = function (id, name, price) {\n  /**\n   * 私有变量\n   * @type {number}\n   * @private\n   */\n  let _num = 1\n  let _this = this\n  this.id = id\n  this.name = name\n  this.price = price\n\n  /**\n   * 私有方法\n   */\n  function checkId () {\n    log(_this.id, _num, _this.price)\n  }\n\n  checkId()\n\n  // 公共方法\n  this.id = id\n}\n\n// 类静态共有属性\nBook.face = 'paper'\n// 静态方法\nBook.fuck = function () {\n  log('fuck')\n}\n\n// 通过闭包实现封装\nlet Book2 = (function () {\n  // 通过闭包，将属性包起来\n  /**\n   * 静态变量\n   * @type {number}\n   * @private\n   */\n  let _num = 2\n\n  return function (id, name) {\n    this.name = name\n    this.fuck = function () {\n      log(this.name, _num)\n    }\n  }\n\n})()\nlet b = new Book2(1, 'test')\nb.fuck()\n\nlog('-----------------------继承--------------------------')\nlog('-------类式继承, 引用类型容易和父级绑定到一起，导致问题--------')\n~function () {\n  let SuperClass = function () {\n    this.superValue = true\n    this.books = [1, 2, 3, 4]\n  }\n  SuperClass.prototype.getSuperValue = function () {\n    return this.superValue\n  }\n\n  function SubClass () {\n    this.subValue = false\n  }\n\n  SubClass.prototype = new SuperClass()\n\n  SubClass.prototype.getSubValue = function () {\n    return this.subValue\n  }\n\n  SubClass.prototype.setBook = function () {\n    this.books.push('setBook')\n  }\n\n  let s = new SubClass()\n  let o = new SubClass()\n  log('subValue = ' + o.getSubValue(), 'superValue = ' + o.getSuperValue())\n  o.setBook()\n  s.books.push('jejejej')\n  log(o.books, s.books)\n}()\n\nlog('------构造继承-----')\n\n~function () {\n  function SuperClass (id) {\n    this.books = [1, 2, 3]\n    this.id = id\n  }\n\n  SuperClass.prototype.showBooks = function () {\n    log(this.books)\n  }\n\n  function SubClass (id) {\n    // 关键\n    SuperClass.call(this, id)\n  }\n\n  SubClass.prototype = new SuperClass()\n\n  let o1 = new SubClass(1)\n  let o2 = new SubClass(2)\n\n  o1.books.push('34')\n  o2.books.push('43')\n\n  o1.showBooks()\n  o2.showBooks()\n\n}()\n\nlog('------原型继承-----')\n~function () {\n  function inheritObject (o) {\n    function F () {\n    }\n\n    F.prototype = o\n    return new F()\n  }\n\n  function inheritPrototype (subClass, superClass) {\n    let p = inheritObject(superClass.prototype)\n    p.constructor = subClass\n    subClass.prototype = p\n  }\n\n  function SuperClass (name) {\n    this.name = name\n    this.colors = [1, 2, 2, 3]\n  }\n\n  SuperClass.prototype.getName = function () {\n    return this.name\n  }\n\n  function SubClass (name, time) {\n    // 会开辟内存，构造函数式继承\n    SuperClass.call(this, name)\n    this.time = time\n  }\n\n  inheritPrototype(SubClass, SuperClass)\n\n  SubClass.prototype.getTime = function () {\n    return this.time\n  }\n\n  let o1 = new SubClass('23', 3434)\n  let o2 = new SubClass('234', 34)\n\n  o1.colors.push('dsfdsf')\n  log(o1.colors, o2.colors)\n\n  o1.getName = function () {\n    log('324234324')\n  }\n  o1.getName()\n  log(o2.getName())\n\n}()\n```","source":"_posts/2017/08/js设计模式笔记-面向对象.md","raw":"---\ntitle: js设计模式笔记--面向对象\ndate: 2017-08-18 15:29:39\ntags:\n  - 设计模式\n  - js基础\n---\n\n##面向对象\n1. 面向对象就是将需要的功能封装为一个对象，这个对象称之为类，台湾翻译为面向物体编程，个人认为比较确切\n2. 面向对象的特征\n  * 封装（就是将私有变量方法封装，高内聚低耦合）\n  * 继承（子类继承父类），即一个类继承另一个类的属性和方法\n  * 多态（根据函数的参数等不一样的状态，构成不一样的方法）\n```flow js\n'use strict'\nlet log = console.log.bind(console)\n\nlog('----------------------封装，主要是封装私有变量-----------------------')\n\nlet Book = function (id, name, price) {\n  /**\n   * 私有变量\n   * @type {number}\n   * @private\n   */\n  let _num = 1\n  let _this = this\n  this.id = id\n  this.name = name\n  this.price = price\n\n  /**\n   * 私有方法\n   */\n  function checkId () {\n    log(_this.id, _num, _this.price)\n  }\n\n  checkId()\n\n  // 公共方法\n  this.id = id\n}\n\n// 类静态共有属性\nBook.face = 'paper'\n// 静态方法\nBook.fuck = function () {\n  log('fuck')\n}\n\n// 通过闭包实现封装\nlet Book2 = (function () {\n  // 通过闭包，将属性包起来\n  /**\n   * 静态变量\n   * @type {number}\n   * @private\n   */\n  let _num = 2\n\n  return function (id, name) {\n    this.name = name\n    this.fuck = function () {\n      log(this.name, _num)\n    }\n  }\n\n})()\nlet b = new Book2(1, 'test')\nb.fuck()\n\nlog('-----------------------继承--------------------------')\nlog('-------类式继承, 引用类型容易和父级绑定到一起，导致问题--------')\n~function () {\n  let SuperClass = function () {\n    this.superValue = true\n    this.books = [1, 2, 3, 4]\n  }\n  SuperClass.prototype.getSuperValue = function () {\n    return this.superValue\n  }\n\n  function SubClass () {\n    this.subValue = false\n  }\n\n  SubClass.prototype = new SuperClass()\n\n  SubClass.prototype.getSubValue = function () {\n    return this.subValue\n  }\n\n  SubClass.prototype.setBook = function () {\n    this.books.push('setBook')\n  }\n\n  let s = new SubClass()\n  let o = new SubClass()\n  log('subValue = ' + o.getSubValue(), 'superValue = ' + o.getSuperValue())\n  o.setBook()\n  s.books.push('jejejej')\n  log(o.books, s.books)\n}()\n\nlog('------构造继承-----')\n\n~function () {\n  function SuperClass (id) {\n    this.books = [1, 2, 3]\n    this.id = id\n  }\n\n  SuperClass.prototype.showBooks = function () {\n    log(this.books)\n  }\n\n  function SubClass (id) {\n    // 关键\n    SuperClass.call(this, id)\n  }\n\n  SubClass.prototype = new SuperClass()\n\n  let o1 = new SubClass(1)\n  let o2 = new SubClass(2)\n\n  o1.books.push('34')\n  o2.books.push('43')\n\n  o1.showBooks()\n  o2.showBooks()\n\n}()\n\nlog('------原型继承-----')\n~function () {\n  function inheritObject (o) {\n    function F () {\n    }\n\n    F.prototype = o\n    return new F()\n  }\n\n  function inheritPrototype (subClass, superClass) {\n    let p = inheritObject(superClass.prototype)\n    p.constructor = subClass\n    subClass.prototype = p\n  }\n\n  function SuperClass (name) {\n    this.name = name\n    this.colors = [1, 2, 2, 3]\n  }\n\n  SuperClass.prototype.getName = function () {\n    return this.name\n  }\n\n  function SubClass (name, time) {\n    // 会开辟内存，构造函数式继承\n    SuperClass.call(this, name)\n    this.time = time\n  }\n\n  inheritPrototype(SubClass, SuperClass)\n\n  SubClass.prototype.getTime = function () {\n    return this.time\n  }\n\n  let o1 = new SubClass('23', 3434)\n  let o2 = new SubClass('234', 34)\n\n  o1.colors.push('dsfdsf')\n  log(o1.colors, o2.colors)\n\n  o1.getName = function () {\n    log('324234324')\n  }\n  o1.getName()\n  log(o2.getName())\n\n}()\n```","slug":"js设计模式笔记-面向对象","published":1,"updated":"2017-08-18T08:46:18.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5ebbi001sn8v313aphwvk","content":"<p>##面向对象</p>\n<ol>\n<li>面向对象就是将需要的功能封装为一个对象，这个对象称之为类，台湾翻译为面向物体编程，个人认为比较确切</li>\n<li>面向对象的特征<ul>\n<li>封装（就是将私有变量方法封装，高内聚低耦合）</li>\n<li>继承（子类继承父类），即一个类继承另一个类的属性和方法</li>\n<li>多态（根据函数的参数等不一样的状态，构成不一样的方法）<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\">let log = console.log.bind(console)</div><div class=\"line\"></div><div class=\"line\">log(&apos;----------------------封装，主要是封装私有变量-----------------------&apos;)</div><div class=\"line\"></div><div class=\"line\">let Book = function (id, name, price) &#123;</div><div class=\"line\">  /**</div><div class=\"line\">   * 私有变量</div><div class=\"line\">   * @type &#123;number&#125;</div><div class=\"line\">   * @private</div><div class=\"line\">   */</div><div class=\"line\">  let _num = 1</div><div class=\"line\">  let _this = this</div><div class=\"line\">  this.id = id</div><div class=\"line\">  this.name = name</div><div class=\"line\">  this.price = price</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * 私有方法</div><div class=\"line\">   */</div><div class=\"line\">  function checkId () &#123;</div><div class=\"line\">    log(_this.id, _num, _this.price)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  checkId()</div><div class=\"line\"></div><div class=\"line\">  // 公共方法</div><div class=\"line\">  this.id = id</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 类静态共有属性</div><div class=\"line\">Book.face = &apos;paper&apos;</div><div class=\"line\">// 静态方法</div><div class=\"line\">Book.fuck = function () &#123;</div><div class=\"line\">  log(&apos;fuck&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 通过闭包实现封装</div><div class=\"line\">let Book2 = (function () &#123;</div><div class=\"line\">  // 通过闭包，将属性包起来</div><div class=\"line\">  /**</div><div class=\"line\">   * 静态变量</div><div class=\"line\">   * @type &#123;number&#125;</div><div class=\"line\">   * @private</div><div class=\"line\">   */</div><div class=\"line\">  let _num = 2</div><div class=\"line\"></div><div class=\"line\">  return function (id, name) &#123;</div><div class=\"line\">    this.name = name</div><div class=\"line\">    this.fuck = function () &#123;</div><div class=\"line\">      log(this.name, _num)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)()</div><div class=\"line\">let b = new Book2(1, &apos;test&apos;)</div><div class=\"line\">b.fuck()</div><div class=\"line\"></div><div class=\"line\">log(&apos;-----------------------继承--------------------------&apos;)</div><div class=\"line\">log(&apos;-------类式继承, 引用类型容易和父级绑定到一起，导致问题--------&apos;)</div><div class=\"line\">~function () &#123;</div><div class=\"line\">  let SuperClass = function () &#123;</div><div class=\"line\">    this.superValue = true</div><div class=\"line\">    this.books = [1, 2, 3, 4]</div><div class=\"line\">  &#125;</div><div class=\"line\">  SuperClass.prototype.getSuperValue = function () &#123;</div><div class=\"line\">    return this.superValue</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  function SubClass () &#123;</div><div class=\"line\">    this.subValue = false</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype = new SuperClass()</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype.getSubValue = function () &#123;</div><div class=\"line\">    return this.subValue</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype.setBook = function () &#123;</div><div class=\"line\">    this.books.push(&apos;setBook&apos;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  let s = new SubClass()</div><div class=\"line\">  let o = new SubClass()</div><div class=\"line\">  log(&apos;subValue = &apos; + o.getSubValue(), &apos;superValue = &apos; + o.getSuperValue())</div><div class=\"line\">  o.setBook()</div><div class=\"line\">  s.books.push(&apos;jejejej&apos;)</div><div class=\"line\">  log(o.books, s.books)</div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\">log(&apos;------构造继承-----&apos;)</div><div class=\"line\"></div><div class=\"line\">~function () &#123;</div><div class=\"line\">  function SuperClass (id) &#123;</div><div class=\"line\">    this.books = [1, 2, 3]</div><div class=\"line\">    this.id = id</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SuperClass.prototype.showBooks = function () &#123;</div><div class=\"line\">    log(this.books)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  function SubClass (id) &#123;</div><div class=\"line\">    // 关键</div><div class=\"line\">    SuperClass.call(this, id)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype = new SuperClass()</div><div class=\"line\"></div><div class=\"line\">  let o1 = new SubClass(1)</div><div class=\"line\">  let o2 = new SubClass(2)</div><div class=\"line\"></div><div class=\"line\">  o1.books.push(&apos;34&apos;)</div><div class=\"line\">  o2.books.push(&apos;43&apos;)</div><div class=\"line\"></div><div class=\"line\">  o1.showBooks()</div><div class=\"line\">  o2.showBooks()</div><div class=\"line\"></div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\">log(&apos;------原型继承-----&apos;)</div><div class=\"line\">~function () &#123;</div><div class=\"line\">  function inheritObject (o) &#123;</div><div class=\"line\">    function F () &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    F.prototype = o</div><div class=\"line\">    return new F()</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  function inheritPrototype (subClass, superClass) &#123;</div><div class=\"line\">    let p = inheritObject(superClass.prototype)</div><div class=\"line\">    p.constructor = subClass</div><div class=\"line\">    subClass.prototype = p</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  function SuperClass (name) &#123;</div><div class=\"line\">    this.name = name</div><div class=\"line\">    this.colors = [1, 2, 2, 3]</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SuperClass.prototype.getName = function () &#123;</div><div class=\"line\">    return this.name</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  function SubClass (name, time) &#123;</div><div class=\"line\">    // 会开辟内存，构造函数式继承</div><div class=\"line\">    SuperClass.call(this, name)</div><div class=\"line\">    this.time = time</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  inheritPrototype(SubClass, SuperClass)</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype.getTime = function () &#123;</div><div class=\"line\">    return this.time</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  let o1 = new SubClass(&apos;23&apos;, 3434)</div><div class=\"line\">  let o2 = new SubClass(&apos;234&apos;, 34)</div><div class=\"line\"></div><div class=\"line\">  o1.colors.push(&apos;dsfdsf&apos;)</div><div class=\"line\">  log(o1.colors, o2.colors)</div><div class=\"line\"></div><div class=\"line\">  o1.getName = function () &#123;</div><div class=\"line\">    log(&apos;324234324&apos;)</div><div class=\"line\">  &#125;</div><div class=\"line\">  o1.getName()</div><div class=\"line\">  log(o2.getName())</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>##面向对象</p>\n<ol>\n<li>面向对象就是将需要的功能封装为一个对象，这个对象称之为类，台湾翻译为面向物体编程，个人认为比较确切</li>\n<li>面向对象的特征<ul>\n<li>封装（就是将私有变量方法封装，高内聚低耦合）</li>\n<li>继承（子类继承父类），即一个类继承另一个类的属性和方法</li>\n<li>多态（根据函数的参数等不一样的状态，构成不一样的方法）<figure class=\"highlight plain\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\">let log = console.log.bind(console)</div><div class=\"line\"></div><div class=\"line\">log(&apos;----------------------封装，主要是封装私有变量-----------------------&apos;)</div><div class=\"line\"></div><div class=\"line\">let Book = function (id, name, price) &#123;</div><div class=\"line\">  /**</div><div class=\"line\">   * 私有变量</div><div class=\"line\">   * @type &#123;number&#125;</div><div class=\"line\">   * @private</div><div class=\"line\">   */</div><div class=\"line\">  let _num = 1</div><div class=\"line\">  let _this = this</div><div class=\"line\">  this.id = id</div><div class=\"line\">  this.name = name</div><div class=\"line\">  this.price = price</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * 私有方法</div><div class=\"line\">   */</div><div class=\"line\">  function checkId () &#123;</div><div class=\"line\">    log(_this.id, _num, _this.price)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  checkId()</div><div class=\"line\"></div><div class=\"line\">  // 公共方法</div><div class=\"line\">  this.id = id</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 类静态共有属性</div><div class=\"line\">Book.face = &apos;paper&apos;</div><div class=\"line\">// 静态方法</div><div class=\"line\">Book.fuck = function () &#123;</div><div class=\"line\">  log(&apos;fuck&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 通过闭包实现封装</div><div class=\"line\">let Book2 = (function () &#123;</div><div class=\"line\">  // 通过闭包，将属性包起来</div><div class=\"line\">  /**</div><div class=\"line\">   * 静态变量</div><div class=\"line\">   * @type &#123;number&#125;</div><div class=\"line\">   * @private</div><div class=\"line\">   */</div><div class=\"line\">  let _num = 2</div><div class=\"line\"></div><div class=\"line\">  return function (id, name) &#123;</div><div class=\"line\">    this.name = name</div><div class=\"line\">    this.fuck = function () &#123;</div><div class=\"line\">      log(this.name, _num)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)()</div><div class=\"line\">let b = new Book2(1, &apos;test&apos;)</div><div class=\"line\">b.fuck()</div><div class=\"line\"></div><div class=\"line\">log(&apos;-----------------------继承--------------------------&apos;)</div><div class=\"line\">log(&apos;-------类式继承, 引用类型容易和父级绑定到一起，导致问题--------&apos;)</div><div class=\"line\">~function () &#123;</div><div class=\"line\">  let SuperClass = function () &#123;</div><div class=\"line\">    this.superValue = true</div><div class=\"line\">    this.books = [1, 2, 3, 4]</div><div class=\"line\">  &#125;</div><div class=\"line\">  SuperClass.prototype.getSuperValue = function () &#123;</div><div class=\"line\">    return this.superValue</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  function SubClass () &#123;</div><div class=\"line\">    this.subValue = false</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype = new SuperClass()</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype.getSubValue = function () &#123;</div><div class=\"line\">    return this.subValue</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype.setBook = function () &#123;</div><div class=\"line\">    this.books.push(&apos;setBook&apos;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  let s = new SubClass()</div><div class=\"line\">  let o = new SubClass()</div><div class=\"line\">  log(&apos;subValue = &apos; + o.getSubValue(), &apos;superValue = &apos; + o.getSuperValue())</div><div class=\"line\">  o.setBook()</div><div class=\"line\">  s.books.push(&apos;jejejej&apos;)</div><div class=\"line\">  log(o.books, s.books)</div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\">log(&apos;------构造继承-----&apos;)</div><div class=\"line\"></div><div class=\"line\">~function () &#123;</div><div class=\"line\">  function SuperClass (id) &#123;</div><div class=\"line\">    this.books = [1, 2, 3]</div><div class=\"line\">    this.id = id</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SuperClass.prototype.showBooks = function () &#123;</div><div class=\"line\">    log(this.books)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  function SubClass (id) &#123;</div><div class=\"line\">    // 关键</div><div class=\"line\">    SuperClass.call(this, id)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype = new SuperClass()</div><div class=\"line\"></div><div class=\"line\">  let o1 = new SubClass(1)</div><div class=\"line\">  let o2 = new SubClass(2)</div><div class=\"line\"></div><div class=\"line\">  o1.books.push(&apos;34&apos;)</div><div class=\"line\">  o2.books.push(&apos;43&apos;)</div><div class=\"line\"></div><div class=\"line\">  o1.showBooks()</div><div class=\"line\">  o2.showBooks()</div><div class=\"line\"></div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\">log(&apos;------原型继承-----&apos;)</div><div class=\"line\">~function () &#123;</div><div class=\"line\">  function inheritObject (o) &#123;</div><div class=\"line\">    function F () &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    F.prototype = o</div><div class=\"line\">    return new F()</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  function inheritPrototype (subClass, superClass) &#123;</div><div class=\"line\">    let p = inheritObject(superClass.prototype)</div><div class=\"line\">    p.constructor = subClass</div><div class=\"line\">    subClass.prototype = p</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  function SuperClass (name) &#123;</div><div class=\"line\">    this.name = name</div><div class=\"line\">    this.colors = [1, 2, 2, 3]</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  SuperClass.prototype.getName = function () &#123;</div><div class=\"line\">    return this.name</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  function SubClass (name, time) &#123;</div><div class=\"line\">    // 会开辟内存，构造函数式继承</div><div class=\"line\">    SuperClass.call(this, name)</div><div class=\"line\">    this.time = time</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  inheritPrototype(SubClass, SuperClass)</div><div class=\"line\"></div><div class=\"line\">  SubClass.prototype.getTime = function () &#123;</div><div class=\"line\">    return this.time</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  let o1 = new SubClass(&apos;23&apos;, 3434)</div><div class=\"line\">  let o2 = new SubClass(&apos;234&apos;, 34)</div><div class=\"line\"></div><div class=\"line\">  o1.colors.push(&apos;dsfdsf&apos;)</div><div class=\"line\">  log(o1.colors, o2.colors)</div><div class=\"line\"></div><div class=\"line\">  o1.getName = function () &#123;</div><div class=\"line\">    log(&apos;324234324&apos;)</div><div class=\"line\">  &#125;</div><div class=\"line\">  o1.getName()</div><div class=\"line\">  log(o2.getName())</div><div class=\"line\"></div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n"},{"title":"js设计模式笔记--适配器模式","date":"2017-08-18T07:41:20.000Z","_content":"## 适配器模式\n* 什么是适配器，就是将数据转化了一下，防止出错或者数据改变\n1. 假设引入了JQ，而JQ和自己的代码库重叠了，怎么办？\n  * window.my$ = jQuery 就是这么粗暴\n2. 比如你要的数据是``[{},{}]``这样的，后台给了你``{}``，你怎么办\n  * 写个适配器，转化一下。 噗！吐血","source":"_posts/2017/08/js设计模式笔记-适配器模式.md","raw":"---\ntitle: js设计模式笔记--适配器模式\ndate: 2017-08-18 15:41:20\ntags:\n  - 设计模式\n  - js基础\n---\n## 适配器模式\n* 什么是适配器，就是将数据转化了一下，防止出错或者数据改变\n1. 假设引入了JQ，而JQ和自己的代码库重叠了，怎么办？\n  * window.my$ = jQuery 就是这么粗暴\n2. 比如你要的数据是``[{},{}]``这样的，后台给了你``{}``，你怎么办\n  * 写个适配器，转化一下。 噗！吐血","slug":"js设计模式笔记-适配器模式","published":1,"updated":"2017-08-18T07:42:54.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6n5ebbl001vn8v30uua45yn","content":"<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><ul>\n<li>什么是适配器，就是将数据转化了一下，防止出错或者数据改变</li>\n</ul>\n<ol>\n<li>假设引入了JQ，而JQ和自己的代码库重叠了，怎么办？<ul>\n<li>window.my$ = jQuery 就是这么粗暴</li>\n</ul>\n</li>\n<li>比如你要的数据是<code>[{},{}]</code>这样的，后台给了你<code>{}</code>，你怎么办<ul>\n<li>写个适配器，转化一下。 噗！吐血</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><ul>\n<li>什么是适配器，就是将数据转化了一下，防止出错或者数据改变</li>\n</ul>\n<ol>\n<li>假设引入了JQ，而JQ和自己的代码库重叠了，怎么办？<ul>\n<li>window.my$ = jQuery 就是这么粗暴</li>\n</ul>\n</li>\n<li>比如你要的数据是<code>[{},{}]</code>这样的，后台给了你<code>{}</code>，你怎么办<ul>\n<li>写个适配器，转化一下。 噗！吐血</li>\n</ul>\n</li>\n</ol>\n"}],"PostAsset":[{"_id":"source/_posts/2017/04/vue-cli创建的任务和后台交互cookie及restAPI处理/chrome下cookie.png","post":"cj6n5eb7j000an8v3blnqfli4","slug":"chrome下cookie.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/08/说说HTTP缓存/cache-control.png","post":"cj6n5ebb9001ln8v3g32gneb0","slug":"cache-control.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/08/说说HTTP缓存/disk.png","post":"cj6n5ebb9001ln8v3g32gneb0","slug":"disk.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/08/说说HTTP缓存/github.png","post":"cj6n5ebb9001ln8v3g32gneb0","slug":"github.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/08/说说HTTP缓存/githubRequest.png","post":"cj6n5ebb9001ln8v3g32gneb0","slug":"githubRequest.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/08/说说HTTP缓存/liucheng.png","post":"cj6n5ebb9001ln8v3g32gneb0","slug":"liucheng.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/1.png","post":"cj6n5eb7e0005n8v3au0q11md","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/2.png","post":"cj6n5eb7e0005n8v3au0q11md","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/3.png","post":"cj6n5eb7e0005n8v3au0q11md","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/4.png","post":"cj6n5eb7e0005n8v3au0q11md","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/5.png","post":"cj6n5eb7e0005n8v3au0q11md","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/java-ssm/vue_admin.sql","post":"cj6n5eb7e0005n8v3au0q11md","slug":"vue_admin.sql","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/android_home.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"android_home.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/androids.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"androids.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/avd.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"avd.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/bigSuccess.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"bigSuccess.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/configerr.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"configerr.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/dev.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"dev.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/devSuccess.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"devSuccess.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/directory.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"directory.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/err.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"err.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/gen.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"gen.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/host.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"host.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/init.gradle","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"init.gradle","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/netErr.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"netErr.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/reload.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"reload.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/sdk.png","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"sdk.png","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/snap3555.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"snap3555.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/snap3556.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"snap3556.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/success.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"success.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/tools.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"tools.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/verr.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"verr.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017/04/react-native进入姿势/wox.jpg","post":"cj6n5eb7i0009n8v3hgag16qh","slug":"wox.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cj6n5eb780004n8v34vrgt57f","category_id":"cj6n5eb7f0006n8v37rkg3i6b","_id":"cj6n5eb7s000fn8v3qrbjgxm8"},{"post_id":"cj6n5eb7e0005n8v3au0q11md","category_id":"cj6n5eb7l000bn8v3r8a5h9s0","_id":"cj6n5eb84000mn8v3p3nbdv5p"},{"post_id":"cj6n5eb80000kn8v3cj3nx090","category_id":"cj6n5eb7l000bn8v3r8a5h9s0","_id":"cj6n5eb8a000rn8v3spfd2x3i"},{"post_id":"cj6n5eb7g0007n8v3skcl18dw","category_id":"cj6n5eb7z000in8v3fnszmd0h","_id":"cj6n5eb8d000vn8v310xilj2i"},{"post_id":"cj6n5eb87000qn8v3e8wgei9v","category_id":"cj6n5eb7l000bn8v3r8a5h9s0","_id":"cj6n5eb8k000zn8v3kr6bqt8q"},{"post_id":"cj6n5eb7i0009n8v3hgag16qh","category_id":"cj6n5eb85000nn8v3fu4su447","_id":"cj6n5eb8n0012n8v306u4bgbi"},{"post_id":"cj6n5eb7j000an8v3blnqfli4","category_id":"cj6n5eb7l000bn8v3r8a5h9s0","_id":"cj6n5eb8t0016n8v33gacvotc"}],"PostTag":[{"post_id":"cj6n5eb6l0001n8v3jbinuvw3","tag_id":"cj6n5eb750003n8v3phixih23","_id":"cj6n5eb7r000en8v3q3cksbjf"},{"post_id":"cj6n5eb6l0001n8v3jbinuvw3","tag_id":"cj6n5eb7h0008n8v37cn3ttl1","_id":"cj6n5eb7y000hn8v31mi0pzbm"},{"post_id":"cj6n5eb80000kn8v3cj3nx090","tag_id":"cj6n5eb750003n8v3phixih23","_id":"cj6n5eb86000pn8v3ojg0jso0"},{"post_id":"cj6n5eb80000kn8v3cj3nx090","tag_id":"cj6n5eb7h0008n8v37cn3ttl1","_id":"cj6n5eb8a000sn8v3pyon6qzy"},{"post_id":"cj6n5eb710002n8v37iqb1vjm","tag_id":"cj6n5eb7h0008n8v37cn3ttl1","_id":"cj6n5eb8e000wn8v34g4cgvnr"},{"post_id":"cj6n5eb710002n8v37iqb1vjm","tag_id":"cj6n5eb7z000jn8v3xqdgpz85","_id":"cj6n5eb8k0010n8v3j3vy2zux"},{"post_id":"cj6n5eb780004n8v34vrgt57f","tag_id":"cj6n5eb7h0008n8v37cn3ttl1","_id":"cj6n5eb8w0019n8v3alz6rban"},{"post_id":"cj6n5eb780004n8v34vrgt57f","tag_id":"cj6n5eb8d000un8v36jw8tub9","_id":"cj6n5eb9a001bn8v3ay0dnq9m"},{"post_id":"cj6n5eb780004n8v34vrgt57f","tag_id":"cj6n5eb8o0013n8v3qcbfkpep","_id":"cj6n5eba2001en8v35fus6aov"},{"post_id":"cj6n5eb7e0005n8v3au0q11md","tag_id":"cj6n5eb8v0018n8v3fgmu68eu","_id":"cj6n5ebba001mn8v3a138qgcv"},{"post_id":"cj6n5eb7e0005n8v3au0q11md","tag_id":"cj6n5eba1001dn8v39frhzfau","_id":"cj6n5ebbc001on8v3027agcjt"},{"post_id":"cj6n5eb7e0005n8v3au0q11md","tag_id":"cj6n5eb7h0008n8v37cn3ttl1","_id":"cj6n5ebbh001rn8v3eh791ca7"},{"post_id":"cj6n5eb7g0007n8v3skcl18dw","tag_id":"cj6n5eb8v0018n8v3fgmu68eu","_id":"cj6n5ebbj001tn8v39fh8c7rv"},{"post_id":"cj6n5eb7i0009n8v3hgag16qh","tag_id":"cj6n5eb7h0008n8v37cn3ttl1","_id":"cj6n5ebbp001wn8v3ri8i9goe"},{"post_id":"cj6n5eb7i0009n8v3hgag16qh","tag_id":"cj6n5ebbd001pn8v3mag1kvu7","_id":"cj6n5ebbq001xn8v3xllb2rnl"},{"post_id":"cj6n5eb7j000an8v3blnqfli4","tag_id":"cj6n5ebbk001un8v3iish91qa","_id":"cj6n5ebbt0021n8v3jkvk8gc8"},{"post_id":"cj6n5eb7j000an8v3blnqfli4","tag_id":"cj6n5ebbr001yn8v3aogtv7p9","_id":"cj6n5ebbu0022n8v3qrjguzmy"},{"post_id":"cj6n5eb7j000an8v3blnqfli4","tag_id":"cj6n5ebbs001zn8v3jzf6gjo1","_id":"cj6n5ebbv0024n8v3vs9jlgnr"},{"post_id":"cj6n5eb7j000an8v3blnqfli4","tag_id":"cj6n5eb7h0008n8v37cn3ttl1","_id":"cj6n5ebbv0025n8v3uz9lzvev"},{"post_id":"cj6n5eb7p000dn8v3wlp06bb9","tag_id":"cj6n5ebbs0020n8v337ik7z6q","_id":"cj6n5ebbw0027n8v3n7qwwlbh"},{"post_id":"cj6n5eb7t000gn8v3twsymtyf","tag_id":"cj6n5eb750003n8v3phixih23","_id":"cj6n5ebbw0028n8v30qwhk81x"},{"post_id":"cj6n5eb7t000gn8v3twsymtyf","tag_id":"cj6n5ebbu0023n8v368mi6pi1","_id":"cj6n5ebbw002an8v3bcw5h0vd"},{"post_id":"cj6n5eb81000ln8v36iuofxhp","tag_id":"cj6n5ebbv0026n8v30n7ad3g1","_id":"cj6n5ebbx002cn8v3xuxzvo57"},{"post_id":"cj6n5eb81000ln8v36iuofxhp","tag_id":"cj6n5ebbw0029n8v3z105f2om","_id":"cj6n5ebby002dn8v3m2iay1ov"},{"post_id":"cj6n5eb87000qn8v3e8wgei9v","tag_id":"cj6n5ebbv0026n8v30n7ad3g1","_id":"cj6n5ebby002fn8v33ayvdie1"},{"post_id":"cj6n5eb87000qn8v3e8wgei9v","tag_id":"cj6n5eb7h0008n8v37cn3ttl1","_id":"cj6n5ebby002gn8v3eft7fyqa"},{"post_id":"cj6n5eb8b000tn8v3f4eel7xx","tag_id":"cj6n5ebby002en8v39xcw5l2y","_id":"cj6n5ebbz002in8v3wmxsw7ev"},{"post_id":"cj6n5eb8b000tn8v3f4eel7xx","tag_id":"cj6n5eb7h0008n8v37cn3ttl1","_id":"cj6n5ebbz002jn8v3bqowf99a"},{"post_id":"cj6n5eb8e000yn8v3bb3zajpt","tag_id":"cj6n5ebbv0026n8v30n7ad3g1","_id":"cj6n5ebc0002mn8v3xhkbn9l9"},{"post_id":"cj6n5eb8e000yn8v3bb3zajpt","tag_id":"cj6n5ebbw0029n8v3z105f2om","_id":"cj6n5ebc0002nn8v32d46rukm"},{"post_id":"cj6n5eb8l0011n8v35zws2b3r","tag_id":"cj6n5eb7h0008n8v37cn3ttl1","_id":"cj6n5ebc1002pn8v3alb0n9nj"},{"post_id":"cj6n5eb8l0011n8v35zws2b3r","tag_id":"cj6n5ebc0002ln8v3bsw6673v","_id":"cj6n5ebc1002qn8v3lvaiif74"},{"post_id":"cj6n5eb8o0014n8v3yw513u3i","tag_id":"cj6n5ebbv0026n8v30n7ad3g1","_id":"cj6n5ebc3002tn8v39dvtdyti"},{"post_id":"cj6n5eb8o0014n8v3yw513u3i","tag_id":"cj6n5ebbw0029n8v3z105f2om","_id":"cj6n5ebc3002un8v3asv58706"},{"post_id":"cj6n5eb8r0015n8v3xle4aoiv","tag_id":"cj6n5ebbv0026n8v30n7ad3g1","_id":"cj6n5ebc6002xn8v34x2b0qry"},{"post_id":"cj6n5eb8r0015n8v3xle4aoiv","tag_id":"cj6n5ebbw0029n8v3z105f2om","_id":"cj6n5ebc6002yn8v3ukxpofio"},{"post_id":"cj6n5eb8t0017n8v3j8wukqjs","tag_id":"cj6n5ebbv0026n8v30n7ad3g1","_id":"cj6n5ebc80031n8v3np1gaft5"},{"post_id":"cj6n5eb8t0017n8v3j8wukqjs","tag_id":"cj6n5ebbw0029n8v3z105f2om","_id":"cj6n5ebc80032n8v3u1tanb1v"},{"post_id":"cj6n5eb8x001an8v3mpcgixa0","tag_id":"cj6n5ebbv0026n8v30n7ad3g1","_id":"cj6n5ebcb0035n8v3p5mhefkz"},{"post_id":"cj6n5eb8x001an8v3mpcgixa0","tag_id":"cj6n5ebbw0029n8v3z105f2om","_id":"cj6n5ebcb0036n8v3bm0z1fwg"},{"post_id":"cj6n5eb9d001cn8v329byrp88","tag_id":"cj6n5ebbv0026n8v30n7ad3g1","_id":"cj6n5ebck0039n8v3hc6271r4"},{"post_id":"cj6n5eb9d001cn8v329byrp88","tag_id":"cj6n5ebbw0029n8v3z105f2om","_id":"cj6n5ebcl003an8v32zkdd11q"},{"post_id":"cj6n5eba4001fn8v32hnja1m1","tag_id":"cj6n5ebbv0026n8v30n7ad3g1","_id":"cj6n5ebcn003dn8v3isgv28l7"},{"post_id":"cj6n5eba4001fn8v32hnja1m1","tag_id":"cj6n5ebbw0029n8v3z105f2om","_id":"cj6n5ebco003en8v3g7rl22ov"},{"post_id":"cj6n5eba8001gn8v3zwnnq2nu","tag_id":"cj6n5ebbv0026n8v30n7ad3g1","_id":"cj6n5ebcr003hn8v3ltjgbmqd"},{"post_id":"cj6n5eba8001gn8v3zwnnq2nu","tag_id":"cj6n5ebbw0029n8v3z105f2om","_id":"cj6n5ebcr003in8v3mgk2ggvg"},{"post_id":"cj6n5ebaf001in8v3qxivxxle","tag_id":"cj6n5ebbv0026n8v30n7ad3g1","_id":"cj6n5ebcs003ln8v3j0wd6f9r"},{"post_id":"cj6n5ebaf001in8v3qxivxxle","tag_id":"cj6n5ebbw0029n8v3z105f2om","_id":"cj6n5ebct003mn8v35tbf9mf1"},{"post_id":"cj6n5ebai001jn8v3x7m4wr3k","tag_id":"cj6n5ebbv0026n8v30n7ad3g1","_id":"cj6n5ebcx003pn8v3i5pja00f"},{"post_id":"cj6n5ebai001jn8v3x7m4wr3k","tag_id":"cj6n5ebbw0029n8v3z105f2om","_id":"cj6n5ebcx003qn8v3ez9giaz3"},{"post_id":"cj6n5ebb9001ln8v3g32gneb0","tag_id":"cj6n5ebcw003on8v39bv8013f","_id":"cj6n5ebcy003tn8v3q8nb8wbo"},{"post_id":"cj6n5ebb9001ln8v3g32gneb0","tag_id":"cj6n5ebcx003rn8v3kron1hrs","_id":"cj6n5ebcy003un8v3eri63xej"},{"post_id":"cj6n5ebba001nn8v3eyxk3919","tag_id":"cj6n5ebbv0026n8v30n7ad3g1","_id":"cj6n5ebcz003xn8v3y7rnxngw"},{"post_id":"cj6n5ebba001nn8v3eyxk3919","tag_id":"cj6n5ebbw0029n8v3z105f2om","_id":"cj6n5ebcz003yn8v3po81m8gu"},{"post_id":"cj6n5ebbe001qn8v3ubefztuv","tag_id":"cj6n5ebbs0020n8v337ik7z6q","_id":"cj6n5ebd00041n8v3k210g8ja"},{"post_id":"cj6n5ebbe001qn8v3ubefztuv","tag_id":"cj6n5eb7h0008n8v37cn3ttl1","_id":"cj6n5ebd10042n8v3lfdq23wn"},{"post_id":"cj6n5ebbe001qn8v3ubefztuv","tag_id":"cj6n5ebcz003zn8v3kbigeucr","_id":"cj6n5ebd20044n8v3qtiu7jju"},{"post_id":"cj6n5ebbi001sn8v313aphwvk","tag_id":"cj6n5ebbv0026n8v30n7ad3g1","_id":"cj6n5ebd30046n8v349u4pl4l"},{"post_id":"cj6n5ebbi001sn8v313aphwvk","tag_id":"cj6n5ebbw0029n8v3z105f2om","_id":"cj6n5ebd30047n8v3g1q6tk8j"},{"post_id":"cj6n5ebbl001vn8v30uua45yn","tag_id":"cj6n5ebbv0026n8v30n7ad3g1","_id":"cj6n5ebd40049n8v3h3t77lsu"},{"post_id":"cj6n5ebbl001vn8v30uua45yn","tag_id":"cj6n5ebbw0029n8v3z105f2om","_id":"cj6n5ebd4004an8v3hiamb3ol"}],"Tag":[{"name":"angular","_id":"cj6n5eb750003n8v3phixih23"},{"name":"javascript","_id":"cj6n5eb7h0008n8v37cn3ttl1"},{"name":"dom","_id":"cj6n5eb7z000jn8v3xqdgpz85"},{"name":"es6","_id":"cj6n5eb8d000un8v36jw8tub9"},{"name":"promise","_id":"cj6n5eb8o0013n8v3qcbfkpep"},{"name":"java","_id":"cj6n5eb8v0018n8v3fgmu68eu"},{"name":"ssm","_id":"cj6n5eba1001dn8v39frhzfau"},{"name":"reactNative","_id":"cj6n5ebbd001pn8v3mag1kvu7"},{"name":"vue","_id":"cj6n5ebbk001un8v3iish91qa"},{"name":"cookie","_id":"cj6n5ebbr001yn8v3aogtv7p9"},{"name":"node.js","_id":"cj6n5ebbs001zn8v3jzf6gjo1"},{"name":"课外学习","_id":"cj6n5ebbs0020n8v337ik7z6q"},{"name":"typescript","_id":"cj6n5ebbu0023n8v368mi6pi1"},{"name":"设计模式","_id":"cj6n5ebbv0026n8v30n7ad3g1"},{"name":"js基础","_id":"cj6n5ebbw0029n8v3z105f2om"},{"name":"demo","_id":"cj6n5ebby002en8v39xcw5l2y"},{"name":"基础知识","_id":"cj6n5ebc0002ln8v3bsw6673v"},{"name":"http","_id":"cj6n5ebcw003on8v39bv8013f"},{"name":"缓存","_id":"cj6n5ebcx003rn8v3kron1hrs"},{"name":"书籍","_id":"cj6n5ebcz003zn8v3kbigeucr"}]}}